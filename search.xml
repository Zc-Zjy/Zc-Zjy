<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git 学习笔记</title>
    <url>/2023/09/25/Git/</url>
    <content><![CDATA[<hr>
<h1 id="一、图标含义"><a href="#一、图标含义" class="headerlink" title="一、图标含义"></a>一、图标含义</h1><h3 id="1、简单说明"><a href="#1、简单说明" class="headerlink" title="1、简单说明"></a>1、简单说明</h3><p>（1）<a href="https://www.jianshu.com/p/4363a5b8895f?ivk_sa=1024320u">master、origin master 与 origin&#x2F;master介绍</a><br>（2）o&#x2F;master(remote name&#x2F;branch name):远程仓库名&#x2F;分支名。<br>（3）Git Bash：Unix与Linux风格的命令行，使用最多，推荐最多。<br>（4）Git CMD：Windows风格的命令行。<br>（5）Git GUI：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令。  </p>
<h3 id="2、日常更新上传的步骤："><a href="#2、日常更新上传的步骤：" class="headerlink" title="2、日常更新上传的步骤："></a>2、日常更新上传的步骤：</h3><ul>
<li>git add</li>
<li>git commit</li>
<li>git pull</li>
<li>git push</li>
</ul>
<h3 id="3、关于IDEA集成字体颜色"><a href="#3、关于IDEA集成字体颜色" class="headerlink" title="3、关于IDEA集成字体颜色"></a>3、关于IDEA集成字体颜色</h3><ul>
<li><span style="color:green">绿色</span>，已经加入控制暂未提交</li>
<li><span style="color:red">红色</span>，未加入版本控制</li>
<li><span style="color:blue">蓝色</span>，加入，已提交，有改动</li>
<li>白色，加入，已提交，无改动</li>
<li><span style="color:#cccccc">灰色</span>，版本控制已忽略文件</li>
</ul>
<h3 id="4、分支说明："><a href="#4、分支说明：" class="headerlink" title="4、分支说明："></a>4、分支说明：</h3><p>每个分支都是一个完整的项目，互不影响。<img src="/2023/09/25/Git/1.jpg" class=""></p>
<br/>

<hr>
<br/>

<h1 id="二、Git-常用命令"><a href="#二、Git-常用命令" class="headerlink" title="二、Git 常用命令"></a>二、Git 常用命令</h1><h3 id="1、设置全局变量"><a href="#1、设置全局变量" class="headerlink" title="1、设置全局变量"></a>1、设置全局变量</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">git config <span class="attr">--global</span> user<span class="selector-class">.name</span> <span class="string">&quot;zjy&quot;</span> <span class="comment">// 这个和账号没关系，只是一个用户签名</span></span><br><span class="line">git config <span class="attr">--global</span> user<span class="selector-class">.email</span> <span class="string">&quot;xxxx@qq.com&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="2、常用操作"><a href="#2、常用操作" class="headerlink" title="2、常用操作"></a>2、常用操作</h3><h6 id="（1）初始化"><a href="#（1）初始化" class="headerlink" title="（1）初始化"></a>（1）初始化</h6><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> 需要新建一个目录，在此目录执行之后，这个目录里就有了本地git仓库</span><br><span class="line">git init </span><br></pre></td></tr></table></figure>
<h6 id="（2）下载项目"><a href="#（2）下载项目" class="headerlink" title="（2）下载项目"></a>（2）下载项目</h6><p>说明：下载项目不需要管理凭证，但是只要把代码推送到远程的就需要管理凭证，一台电脑只有一个管理凭证，管理凭证就是git账号</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">【url</span>】</span><br></pre></td></tr></table></figure>
<h6 id="（3）查看所有提交跟踪状态"><a href="#（3）查看所有提交跟踪状态" class="headerlink" title="（3）查看所有提交跟踪状态"></a>（3）查看所有提交跟踪状态</h6><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 单个文件查看</span><br><span class="line">git status 文件名</span><br></pre></td></tr></table></figure>
<h6 id="（4）加入到暂存区"><a href="#（4）加入到暂存区" class="headerlink" title="（4）加入到暂存区"></a>（4）加入到暂存区</h6><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">add</span> 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加所有文件到暂存区</span></span><br><span class="line"><span class="symbol">git</span> <span class="keyword">add</span> .</span><br></pre></td></tr></table></figure>
<h6 id="（5）提交暂存区的文件到本地仓库"><a href="#（5）提交暂存区的文件到本地仓库" class="headerlink" title="（5）提交暂存区的文件到本地仓库"></a>（5）提交暂存区的文件到本地仓库</h6><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git</span> commit -m 【提交的备注信息】</span><br></pre></td></tr></table></figure>
<h6 id="（6）创建公钥密钥"><a href="#（6）创建公钥密钥" class="headerlink" title="（6）创建公钥密钥"></a>（6）创建公钥密钥</h6><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">ssh-keygen -<span class="built_in">t</span> rsa -C 【邮箱】</span><br></pre></td></tr></table></figure>
<h6 id="（7）列出所有本地分支"><a href="#（7）列出所有本地分支" class="headerlink" title="（7）列出所有本地分支"></a>（7）列出所有本地分支</h6><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> git branch -v:列出所有本地分支和分支信息</span><br><span class="line">git branch</span><br></pre></td></tr></table></figure>
<h6 id="（8）列出所有远程分支"><a href="#（8）列出所有远程分支" class="headerlink" title="（8）列出所有远程分支"></a>（8）列出所有远程分支</h6><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git branch -r</span></span><br></pre></td></tr></table></figure>
<h6 id="（9）新建一个分支，但依然停留在当前分支"><a href="#（9）新建一个分支，但依然停留在当前分支" class="headerlink" title="（9）新建一个分支，但依然停留在当前分支"></a>（9）新建一个分支，但依然停留在当前分支</h6><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">branch </span>【分支名字】</span><br></pre></td></tr></table></figure>
<h6 id="（10）新建一个分支，并切换到该分支"><a href="#（10）新建一个分支，并切换到该分支" class="headerlink" title="（10）新建一个分支，并切换到该分支"></a>（10）新建一个分支，并切换到该分支</h6><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">git</span> checkout -<span class="keyword">b</span> 【分支名字】</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只切换分支</span></span><br><span class="line"><span class="symbol">git</span> checkout 【分支名字】</span><br></pre></td></tr></table></figure>
<h6 id="（11）合并指定分支到当前分支"><a href="#（11）合并指定分支到当前分支" class="headerlink" title="（11）合并指定分支到当前分支"></a>（11）合并指定分支到当前分支</h6><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> 在分支<span class="number">1</span>使用该命令，分支<span class="number">2</span>合并到分支<span class="number">1</span></span><br><span class="line"><span class="regexp">//</span> 例如：在分支<span class="number">1</span>使用，git merge 分支<span class="number">2</span>，将分支<span class="number">2</span>合并到分支<span class="number">1</span></span><br><span class="line">git merge 【要合并的分支名字】</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 在分支<span class="number">1</span>使用该命令，将分支<span class="number">1</span>合并到分支<span class="number">2</span>（将自己写的代码提到最前面）</span><br><span class="line"><span class="regexp">//</span> 例如：在分支<span class="number">1</span>使用，git rebase 分支<span class="number">2</span>，将分支<span class="number">1</span>合并到分支<span class="number">2</span></span><br><span class="line">git rebase 【要合并到的分支名字】</span><br></pre></td></tr></table></figure>
<h6 id="（12）删除分支"><a href="#（12）删除分支" class="headerlink" title="（12）删除分支"></a>（12）删除分支</h6><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git branch -d 【分支名字】</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 删除远程分支方法一</span><br><span class="line">git push origin --<span class="keyword">delete</span> 【分支名字】</span><br><span class="line"><span class="regexp">//</span> 删除远程分支方法二</span><br><span class="line">git branch -dr 【remote/branch】</span><br></pre></td></tr></table></figure>
<h6 id="（13）强制移动HEAD"><a href="#（13）强制移动HEAD" class="headerlink" title="（13）强制移动HEAD"></a>（13）强制移动HEAD</h6><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">// 将<span class="literal">master</span>向上移动<span class="number">3</span>个节点</span><br><span class="line">git branch -f <span class="keyword">master</span> <span class="title">HEAD</span>~<span class="number">3</span></span><br></pre></td></tr></table></figure>
<h6 id="（14）查看日志信息"><a href="#（14）查看日志信息" class="headerlink" title="（14）查看日志信息"></a>（14）查看日志信息</h6><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">ref</span>log</span><br></pre></td></tr></table></figure>
<h6 id="（15）查看详细信息"><a href="#（15）查看详细信息" class="headerlink" title="（15）查看详细信息"></a>（15）查看详细信息</h6><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>
<h6 id="（16）回退到某个版本"><a href="#（16）回退到某个版本" class="headerlink" title="（16）回退到某个版本"></a>（16）回退到某个版本</h6><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> 版本号从信息里查看</span><br><span class="line">git reset --hard 【版本号】</span><br></pre></td></tr></table></figure>
<h6 id="（17）查看远程库所有别名"><a href="#（17）查看远程库所有别名" class="headerlink" title="（17）查看远程库所有别名"></a>（17）查看远程库所有别名</h6><p><strong>说明：</strong>别名的意思是项目链接太长了，给项目重新取一个别名。  </p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git remote -v</span></span><br></pre></td></tr></table></figure>
<h6 id="（18）创建别名"><a href="#（18）创建别名" class="headerlink" title="（18）创建别名"></a>（18）创建别名</h6><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">git remote <span class="built_in">add</span> 【别名】 【项目链接】</span><br></pre></td></tr></table></figure>
<h6 id="（19）推送本地库的代码到远程库"><a href="#（19）推送本地库的代码到远程库" class="headerlink" title="（19）推送本地库的代码到远程库"></a>（19）推送本地库的代码到远程库</h6><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">push</span> （别名） 【分支名】</span><br></pre></td></tr></table></figure>
<h6 id="（20）拉取远程库的代码到本地库"><a href="#（20）拉取远程库的代码到本地库" class="headerlink" title="（20）拉取远程库的代码到本地库"></a>（20）拉取远程库的代码到本地库</h6><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git</span> pull （别名） 【分支名】</span><br></pre></td></tr></table></figure>

<br/>

<hr>
<br/>

<h1 id="三、git用法图解"><a href="#三、git用法图解" class="headerlink" title="三、git用法图解"></a>三、git用法图解</h1><img src="/2023/09/25/Git/2.jpg" class="">

<br/>

<hr>
<br/>

<h1 id="四、Git流程说明"><a href="#四、Git流程说明" class="headerlink" title="四、Git流程说明"></a>四、Git流程说明</h1><p>（1）当前在master分支上，需要开发master分支的项目。<br>（2）创建一个开发分支 dev ，git branch dev，dev分支创建成功，dev上存在和master分支一摸一样的项目，当前所在的分支还是master。<br>（3）切换分支，git checkout dev，从当前分支master切换到开发分支dev。（也可以 2 和 3 合并起来，就是 git checkout -b dev，新建一个开发分支dev，并切换到 dev 分支）<br>（4）在开发分支 dev 开发项目，开发完成，准备合并分支。<br>（5）将把开发分支dev合并到master分支上，先切换到master分支，然后键入 git merge dev。（也可以这样，不切换到master分支，当前所在分支为开发分支dev，然后 git rebase master，将dev分支合并到master分支上）</p>
<br/>

<hr>
<br/>

<h1 id="五、Git集成IDEA"><a href="#五、Git集成IDEA" class="headerlink" title="五、Git集成IDEA"></a>五、Git集成IDEA</h1><p>1、首先先配置忽略的配置，作用是：每当把项目上传的时候，git会将所有文件默认选取，为了把一些不必要的文件忽略，所以配置忽略文件。<br>创建 xxx.ignore 文件，然后将需要忽略的文件键入，在.gitconfig配置文件中输入<br>需要用到正斜线 “ &#x2F; ”，不能用反斜线 “ \ ”</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[core]</span></span><br><span class="line">    <span class="attr">excludesfile</span> = xxx.ignore文件地址</span><br></pre></td></tr></table></figure>
<p>2、IDEA配置Git</p>
<img src="/2023/09/25/Git/3.jpg" class="">

<br/>

<hr>
<br/>

<h1 id="六、Git-流程idea更新代码时的两个选项Merge-the-incoming-changes-into-the-current-branch与Rebase-the-current-branch-on-top-of-the-incoming-changes"><a href="#六、Git-流程idea更新代码时的两个选项Merge-the-incoming-changes-into-the-current-branch与Rebase-the-current-branch-on-top-of-the-incoming-changes" class="headerlink" title="六、Git 流程idea更新代码时的两个选项Merge the incoming changes into the current branch与Rebase the current branch on top of the incoming changes"></a>六、Git 流程idea更新代码时的两个选项Merge the incoming changes into the current branch与Rebase the current branch on top of the incoming changes</h1><p>1、第一个Merge<br>一般都使用这个，这个是按照时间顺序更新代码，什么意思呢，就是有两个场景：<br>假如有两个开发人员a、b都在同一个分支test上进行开发：<br>（1）a、b把代码都拉下来；<br>（2）a进行开发，在a开发的同时，b可能也在开发（场景一），可能没有（场景二）；<br>（3）场景一：a开发之后，更新代码并提交代码，然后b也开发好，更新代码，因为Merge更新代码是按照时间来更新的，所以不会出现冲突问题，b很顺利地将代码更新下来；<br>（4）场景二：a开发之后，更新代码并提交代码，b没有进行开发，直接更新代码，这个肯定顺利成功。<br>2、第二个Rebase<br>这个是将别人的代码先更新下来，然后将自己的代码提到最顶端，什么意思呢，就比如：<br>两个开发人员a、b在同一个分支test上进行开发：<br>（1）a、b把代码都拉下来；<br>（2）a进行开发，在a开发的同时，b可能也在开发（场景一），可能没有（场景二）；<br>（3）场景一：a开发之后，更新代码并提交代码，然后b也开发好，更新代码，此时就会出现问题，它会更新代码，将b代码覆盖下来，就会冲突；<br>（4）场景二：b没有开发代码，直接更新代码，这是没有问题的。</p>
<br/>

<hr>
<br/>

<h1 id="七、IDEA上面使用Git提交到本地仓库怎么回退"><a href="#七、IDEA上面使用Git提交到本地仓库怎么回退" class="headerlink" title="七、IDEA上面使用Git提交到本地仓库怎么回退"></a>七、IDEA上面使用Git提交到本地仓库怎么回退</h1><p>1、右键选中需要回退的文件，点击git</p>
<img src="/2023/09/25/Git/4.png" class="">
<p>2、使用 HEAD^ 来描述版本，一个 ^ 表示前一个版本，两个 ^^ 表示前两个版本，以此类推。也可以使用数字来代替 ^，比如说前 100 个版本可以写作 HEAD~100。</p>
<img src="/2023/09/25/Git/5.jpg" class="">
<p>3、回退</p>
<img src="/2023/09/25/Git/6.jpg" class="">
<p>4、如远程仓库也需要回退，本地仓库回退之后直接执行<code>git push -f</code>，强制推送远程仓库。</p>
<br/>

<hr>
<br/>

<h1 id="八、Git提交规范（fix、feat等字段含义）"><a href="#八、Git提交规范（fix、feat等字段含义）" class="headerlink" title="八、Git提交规范（fix、feat等字段含义）"></a>八、Git提交规范（fix、feat等字段含义）</h1><p>feat: 新功能（feature）<br>fix: 修补bug<br>docs: 文档（documentation）<br>style: 格式（不影响代码运行的变动）<br>refactor: 重构（即不是新增功能，也不是修改bug的代码变动）<br>chore: 构建过程或辅助工具的变动<br>revert: 撤销，版本回退<br>perf: 性能优化<br>test：测试<br>improvement: 改进<br>build: 打包<br>ci: 持续集成</p>
<br/>

<hr>
<br/>

<h1 id="九、git-merge和git-rebase使用方法（都是针对本地来进行合并的）"><a href="#九、git-merge和git-rebase使用方法（都是针对本地来进行合并的）" class="headerlink" title="九、git merge和git rebase使用方法（都是针对本地来进行合并的）"></a>九、git merge和git rebase使用方法（都是针对本地来进行合并的）</h1><p>有三个分支master、dev、test：<br>（1）A在dev上开发功能，完成功能开发，先得在dev分支提交开发的功能模块，然后推送到远程服务器，然后git checkout master切换到本地的master分支，使用git merge dev将在dev分支上开发的功能合并到本地的master分支，然后推送到远程服务器；<br>（2）B在本地切换到master分支，更新代码，在本地git checkout test切换到test分支，在使用git rebase master将更新下来的代码合并到自己的本地test分支上。</p>
<br/>

<hr>
<br/>

<h1 id="十、Git常见的问题"><a href="#十、Git常见的问题" class="headerlink" title="十、Git常见的问题"></a>十、Git常见的问题</h1><h3 id="1、error-remote-origin-already-exists"><a href="#1、error-remote-origin-already-exists" class="headerlink" title="1、error: remote origin already exists."></a>1、error: remote origin already exists.</h3><p><strong>说明：</strong>当本地向远程仓库提交代码时，出现：<code>error: remote origin already exists.</code>。<br>解决办法：<br>（1）git remote -v：查看远程库的信息。<br>（2）git remote rm origin：删除现有的远程仓库。<br>（3）git remote add origin + 远程仓库地址：建立新的远程仓库地址。（远程仓库地址是git上clone的地址）  </p>
<h3 id="2、怎么将本地仓库和远程仓库关联"><a href="#2、怎么将本地仓库和远程仓库关联" class="headerlink" title="2、怎么将本地仓库和远程仓库关联"></a>2、怎么将本地仓库和远程仓库关联</h3><p>1、需要新建一个项目，并在该项目中执行命令<code>git init</code>初始化一个本地仓库；<br>2、在云端新建一个仓库；<br>3、然后可以使用下面两种方式之一：<br><strong>第一种方式：</strong>通过IDEA连接<br>（1）打开菜单栏中Git（注意：不是设置中Git） -&gt; Manage Remotes；  </p>
<img src="/2023/09/25/Git/7.jpg" class="">  
<p>（2）将远程仓库中的clone的地址复制粘贴进去就将本地和远程关联上了。<br><strong>第二种方式：</strong>通过git指令<br>使用git命令<code>git remote add 【远程分支名】 【远程仓库clone地址】</code>将本地和远程关联：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git remote add origin https://xxxx......</span><br></pre></td></tr></table></figure>

<h3 id="3、error-failed-to-push-some-refs-to’xxxx’"><a href="#3、error-failed-to-push-some-refs-to’xxxx’" class="headerlink" title="3、error: failed to push some refs to’xxxx’"></a>3、error: failed to push some refs to’xxxx’</h3><p><strong>说明：</strong>出现这个错误可能有两个原因：  </p>
<ol>
<li>直接在github或者gitee远程仓库中修改了代码或者文件，没有更新本地代码，对本地仓库同步；</li>
<li>修改了本地的代码，没有<code>commit</code>提交到本地仓库。<br>1、如果是原因<code>1. </code>：<br>（1）先将远程代码库中文件<code>pull</code>到本地，进行代码合并，使用<code>git pull --rebase origin master</code>（注意啊，这里master是你远程仓库的分支名称）<br>（2）再push新的代码到远程代码库中，进行上传<code>git push -u origin master</code>（注意啊，这里master是你远程仓库的分支名称）<br>2、如果是原因<code>2.</code>：<br>（1）就将修改的代码文件先<code>git add 【修改的文件名】</code>到暂存区（<code>git add .</code>add后面有个点，是将全部修改过的代码添加到暂存区，忽略文件不会被添加）<br>（2）然后提交到本地仓库<code>git commit -m &quot;注释&quot;</code><br>（3）再push到远程代码库中，进行上传<code>git push -u origin master</code>（注意啊，这里master是你远程仓库的分支名称）</li>
</ol>
]]></content>
      <categories>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>SVN 学习笔记</title>
    <url>/2023/09/25/SVN/</url>
    <content><![CDATA[<hr>
<br/>


<h2 id="一、SVN-是C-S模式，有两个端口，一个客户端，一个服务端。"><a href="#一、SVN-是C-S模式，有两个端口，一个客户端，一个服务端。" class="headerlink" title="一、SVN:是C&#x2F;S模式，有两个端口，一个客户端，一个服务端。"></a>一、SVN:是C&#x2F;S模式，有两个端口，一个客户端，一个服务端。</h2><br/>

<hr>
<h2 id="二、三大指令："><a href="#二、三大指令：" class="headerlink" title="二、三大指令："></a>二、三大指令：</h2><ol>
<li>check out:客户端第一次与服务端连接使用。以后不用。</li>
<li>commit：提交本地数据到服务端。</li>
<li>update：从服务端更新下来项目。<br/></li>
</ol>
<hr>
<h2 id="三、图标集的意思："><a href="#三、图标集的意思：" class="headerlink" title="三、图标集的意思："></a>三、图标集的意思：</h2><img src="/2023/09/25/SVN/1.png" class="">
<ol>
<li>常规：当客户端文件与服务端文件完全同步时，系统显示这个图标。</li>
<li>冲突：当客户端提交的文件与服务端数据有冲突，系统显示该图标。</li>
<li>已删除：当服务端数据已删除，那么客户端文件将显示该图标。</li>
<li>增加：当我们编写文件已添加到提交队列，那么显示该图标。</li>
<li>无版本控制：当我们编写的文件没有添加到上传队列时，显示该图标。</li>
<li>修改：当客户端有修改但没有提交，显示该图标。</li>
<li>锁定：当服务端数据已锁定，那么客户端文件将显示该图标。</li>
<li>关于IDEA集成字体颜色</li>
</ol>
<ul>
<li><span style="color:green">绿色</span>，已经加入控制暂未提交</li>
<li><span style="color:red">红色</span>，未加入版本控制</li>
<li><span style="color:blue">蓝色</span>，加入，已提交，有改动</li>
<li>白色，加入，已提交，无改动</li>
<li><span style="color:#cccccc">灰色</span>，版本控制已忽略文件</li>
</ul>
]]></content>
      <categories>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>SVN</tag>
      </tags>
  </entry>
  <entry>
    <title>关于npm、nrm、nvm、yarn学习记录</title>
    <url>/2023/09/28/%E5%85%B3%E4%BA%8Enpm%E3%80%81nrm%E3%80%81nvm%E3%80%81yarn%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<hr>
<h1 id="一、npm"><a href="#一、npm" class="headerlink" title="一、npm"></a>一、npm</h1><h6 id="1、什么是npm？"><a href="#1、什么是npm？" class="headerlink" title="1、什么是npm？"></a>1、什么是npm？</h6><p>npm 是 Node.js 的包管理器，用于安装、管理、卸载 JavaScript 模块。npm 提供了一个包管理器，使得开发者可以方便使用第三方模块，同时也可以将自己编写的模块发布到 npm 上供其他人使用。（npm相当于后端的maven，帮助我们下载依赖）<br><strong>注意：</strong><br>    npm不用安装，只要安装了nodejs就有了。</p>
<h6 id="2、官网地址"><a href="#2、官网地址" class="headerlink" title="2、官网地址"></a>2、官网地址</h6><p><a href="https://www.npmjs.com/">https://www.npmjs.com/</a></p>
<h6 id="3、中文官网地址"><a href="#3、中文官网地址" class="headerlink" title="3、中文官网地址"></a>3、中文官网地址</h6><p><a href="https://www.npmjs.cn/">https://www.npmjs.cn/</a></p>
<h6 id="4、使用方法"><a href="#4、使用方法" class="headerlink" title="4、使用方法"></a>4、使用方法</h6><p>（1）查看npm版本</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure>
<p>（2）初始化一个npm项目<br>说明：在目录下运行下面的命名，目录中就会 多了一个文件 package.json（相当于pom.xml）</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">// -y:直接生成 package.json</span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure>
<p>（3）下载依赖包</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">// 可以简写为：npm i 【包名】</span><br><span class="line">npm install 【包名】</span><br></pre></td></tr></table></figure>
<p><strong>说明：</strong><br>npm install xxx –save –global（简写：-g）（简写：-S大写）-dev</p>
<ul>
<li>xxx 表示某个依赖名字</li>
<li>–save 表示将这个依赖保存进 package.json 依赖标签里</li>
<li>-dev 表示将这个依赖保存进 package.json 开发依赖标签里。</li>
<li>–global 表示全局安装</li>
</ul>
<p>（4）同时下载多个依赖包</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">// 包名之间用空格隔开</span><br><span class="line">npm i 【包名<span class="number">1</span>】 【包名<span class="number">2</span>】 【包名<span class="number">3</span>】...</span><br></pre></td></tr></table></figure>
<p>（5）配置npm下载镜像</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p>（6）卸载某个依赖包</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">// 可以简写为：npm i 【包名】</span><br><span class="line">npm uninstall 【包名】</span><br></pre></td></tr></table></figure>
<p>（7）npm启动项目命令</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">// 具体查看package.json中是不是serve</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure>
<p>（8）npm构建项目命令</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>
<p>（7）如何找依赖包<br>    可以去上面第2点中的官网查找需要的依赖包名。</p>
<br/>

<hr>
<br/>


<h1 id="二、yarn"><a href="#二、yarn" class="headerlink" title="二、yarn"></a>二、yarn</h1><h6 id="1、什么yarn？"><a href="#1、什么yarn？" class="headerlink" title="1、什么yarn？"></a>1、什么yarn？</h6><p>和npm是一样的（yarn需要使用npm安装，npm是npdejs自带的）。</p>
<h6 id="2、官网"><a href="#2、官网" class="headerlink" title="2、官网"></a>2、官网</h6><p>（1）地址1：<a href="https://yarnpkg.com/">https://yarnpkg.com/</a><br>（2）地址2：<a href="https://classic.yarnpkg.com/en/docs/install/#windows-stable">https://classic.yarnpkg.com/en/docs/install/#windows-stable</a></p>
<h6 id="3、中文官网"><a href="#3、中文官网" class="headerlink" title="3、中文官网"></a>3、中文官网</h6><p>（1）地址1：<a href="https://yarn.nodejs.cn/">https://yarn.nodejs.cn/</a><br>（2）地址2：<a href="https://www.yarnpkg.cn/">https://www.yarnpkg.cn/</a></p>
<h6 id="4、使用方法-1"><a href="#4、使用方法-1" class="headerlink" title="4、使用方法"></a>4、使用方法</h6><p>（1）安装方法</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install --global yarn</span><br></pre></td></tr></table></figure>
<p>（2）查看版本</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">yarn --version</span><br></pre></td></tr></table></figure>
<p>（3）添加依赖包<br><strong>说明：</strong> 下载不了就加  –ignore-engines</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">yarn add [package]</span><br><span class="line">yarn add [package]@[version]</span><br><span class="line">yarn add [package]@[tag]</span><br><span class="line"></span><br><span class="line">// 分别添加到 devDependencies、peerDependencies、optionalDependencies</span><br><span class="line">yarn add [package] --dev</span><br><span class="line">yarn add [package] --peer</span><br><span class="line">yarn add [package] --optional</span><br></pre></td></tr></table></figure>
<p>（4）升级依赖</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">yarn upgrade [package]</span><br><span class="line">yarn upgrade [package]@[version]</span><br><span class="line">yarn upgrade [package]@[tag]</span><br></pre></td></tr></table></figure>
<p>（5）删除依赖</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">yarn remove [package]</span><br></pre></td></tr></table></figure>

<br/>

<hr>
<br/>


<h1 id="三、nrm"><a href="#三、nrm" class="headerlink" title="三、nrm"></a>三、nrm</h1><h6 id="1、什么是nrm？为什么要使用nrm？"><a href="#1、什么是nrm？为什么要使用nrm？" class="headerlink" title="1、什么是nrm？为什么要使用nrm？"></a>1、什么是nrm？为什么要使用nrm？</h6><p>我们在使用npm下载依赖的时候，如果不设置国内镜像，下载得就很慢，所以我们需要手动去设置镜像，有可能有些依赖还不能使用国内镜像下载，这个时候还得去设置镜像，虽然有cnpm，但是还是太麻烦了。而nrm就是帮助我们解决了这个麻烦事，提供了一些最常用的npm包镜像地址，能够让我们快速的切换镜像地址。</p>
<h6 id="2、使用方法"><a href="#2、使用方法" class="headerlink" title="2、使用方法"></a>2、使用方法</h6><p>（1）安装方法</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">// 全局安装nrm包</span><br><span class="line">npm i nrm -g</span><br></pre></td></tr></table></figure>
<p>（2）查看当前所有可用的镜像源地址以及当前所使用的镜像源地址</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">nrm ls</span><br></pre></td></tr></table></figure>
<p>（3）切换不同的镜像源地址</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">// 切换成npm镜像</span><br><span class="line">nrm use npm</span><br><span class="line"></span><br><span class="line">// 切换成taobao镜像</span><br><span class="line">urm use taobao</span><br></pre></td></tr></table></figure>

<br/>

<hr>
<br/>

<h1 id="四、nvm"><a href="#四、nvm" class="headerlink" title="四、nvm"></a>四、nvm</h1><h6 id="1、什么是nvm？为什么要使用nvm？"><a href="#1、什么是nvm？为什么要使用nvm？" class="headerlink" title="1、什么是nvm？为什么要使用nvm？"></a>1、什么是nvm？为什么要使用nvm？</h6><p>我们在使用nodejs的时候，一台电脑只能装一个版本的nodejs，如果我们想要更换nodejs版本，就需要我们卸载已有的版本，重新下载我们需要的版本，很麻烦，而nvm帮我们解决了这个麻烦事。<br>nvm是一个 node版本管理工具，拥有它可以轻松的让我们在一台电脑上随时切换node版本。</p>
<h6 id="2、官网地址-1"><a href="#2、官网地址-1" class="headerlink" title="2、官网地址"></a>2、官网地址</h6><p><a href="https://nvm.uihtm.com/">https://nvm.uihtm.com/</a></p>
<h6 id="3、使用方法"><a href="#3、使用方法" class="headerlink" title="3、使用方法"></a>3、使用方法</h6><p>（1）设置镜像<br>    在 nvm 的安装路径下，找到 settings.txt，设置node_mirro与npm_mirror为国内镜像地址。<br>    将下面两行复制粘贴进settings.txt中。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">node_mirror: https://npm.taobao.org/mirrors/node/</span><br><span class="line">npm_mirror: https://npm.taobao.org/mirrors/npm/</span><br><span class="line"></span><br><span class="line">// 或者</span><br><span class="line">nvm npm_mirror https://npmmirror.com/mirrors/npm/</span><br><span class="line">nvm node_mirror https://npmmirror.com/mirrors/node/</span><br></pre></td></tr></table></figure>
<p>（2）显示nodejs可下载版本的部分列表</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">nvm list available</span><br></pre></td></tr></table></figure>
<p>也可以打开链接查看可以node版本：<a href="https://registry.npmmirror.com/binary.html?path=node/">https://registry.npmmirror.com/binary.html?path=node/</a><br>（3）安装最新版本 ( 安装时可以在上面看到 node.js 、 npm 相应的版本号 ，不建议安装最新版本)</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">nvm install latest</span><br></pre></td></tr></table></figure>
<p>（4）安装指定的版本的nodejs</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">// 例如：nvm install <span class="number">8</span>.<span class="number">12</span>.<span class="number">0</span></span><br><span class="line">nvm install 【版本号】</span><br></pre></td></tr></table></figure>
<p>（5）查看已安装版本<br><strong>说明：</strong> 当前版本号前面没有 * ， 此时还没有使用任何一个版本，这时使用 node.js 时会报错。 </p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">// 简写：nvm ls</span><br><span class="line">nvm list</span><br></pre></td></tr></table></figure>
<p>（6）切换node版本<br><strong>说明：</strong>  这时会发现在启用的 node 版本前面有 * 标记，这时就可以使用 node.js。</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">nvm use 【版本号】</span><br></pre></td></tr></table></figure>

<br/>

<hr>
<br/>

<h1 id="五、其它问题"><a href="#五、其它问题" class="headerlink" title="五、其它问题"></a>五、其它问题</h1><h5 id="1、npx、npm、cnpm、pnpm区别"><a href="#1、npx、npm、cnpm、pnpm区别" class="headerlink" title="1、npx、npm、cnpm、pnpm区别"></a>1、npx、npm、cnpm、pnpm区别</h5><p><a href="https://zhuanlan.zhihu.com/p/494076214">https://zhuanlan.zhihu.com/p/494076214</a></p>
<h5 id="2、npm、nrm、nvm的安装和使用"><a href="#2、npm、nrm、nvm的安装和使用" class="headerlink" title="2、npm、nrm、nvm的安装和使用"></a>2、npm、nrm、nvm的安装和使用</h5><p><a href="https://www.jianshu.com/p/95d5228ac73e">https://www.jianshu.com/p/95d5228ac73e</a></p>
]]></content>
      <categories>
        <category>前端技术</category>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>npm、nrm、nvm、yarn</tag>
      </tags>
  </entry>
  <entry>
    <title>关于使用Postman笔记</title>
    <url>/2023/09/28/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Postman%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<hr>
<h1 id="一、关于Postman的说明"><a href="#一、关于Postman的说明" class="headerlink" title="一、关于Postman的说明"></a>一、关于Postman的说明</h1><h3 id="1、postman界面"><a href="#1、postman界面" class="headerlink" title="1、postman界面"></a>1、postman界面</h3><p>1、Collections：集合，项目集合<br>2、Apis：api文档<br>3、EnViromments：环境变量，全局变量<br>4、Mock Server：虚拟服务器<br>5、Monitors：监听器<br>6、History：历史记录  </p>
<h3 id="2、请求页面说明"><a href="#2、请求页面说明" class="headerlink" title="2、请求页面说明"></a>2、请求页面说明</h3><p>1、Params（get请求传参 ）<br>（1）@PathVariable 这种方式传参，直接在请求路径后面加参数值<br><strong>后端controller的请求为：</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;list/&#123;category&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">voidlist</span><span class="params">(<span class="meta">@PathVariable(&quot;category&quot;)</span> String category)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p><strong>postman发送请求为：</strong></p>
<img src="/2023/09/28/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Postman%E7%AC%94%E8%AE%B0/1.jpg" class="">
<p>（2）@RequestParam 这种方式传参，就在Query Params列表下输入参数<br><strong>说明：</strong> 要是参数比较多，不能一个一个输入，可以点击 Bulk Edit，批量输入。<br> <strong>后端controller的请求为：</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/doneList&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doneList</span><span class="params">(<span class="meta">@RequestParam(defaultValue = &quot;&quot;)</span> String category,</span></span><br><span class="line"><span class="params">                     <span class="meta">@RequestParam(value = &quot;keywords&quot;,defaultValue = &quot;&quot;)</span>String keywords)</span> &#123;&#125;       </span><br></pre></td></tr></table></figure>
<p><strong>postman发送请求为：</strong></p>
<img src="/2023/09/28/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Postman%E7%AC%94%E8%AE%B0/2.jpg" class="">
<p>2、Authorization（鉴权）<br>3、Headers（请求头）<br>4、Body（post请求参数）<br>（1）none：没有参数<br>（2）form-data：既可以传键值对参数，也可以传文件<br>（3）x-www-from-urlencoded：只能够传键值对参数<br>（4）raw：可以传json、text、xml、html、javascript<br>（5）binary：把文件以二进制的方式传参<br>5、Pre-request Script（请求前的前置脚本）<br>6、Tests（请求之后的断言，用来查看请求之后的结果）<br>7、Cookies（蓝色的字体，用来管理cookie信息）  </p>
<h3 id="3、响应页面说明"><a href="#3、响应页面说明" class="headerlink" title="3、响应页面说明"></a>3、响应页面说明</h3><p>（1）Body：接口返回的数据<br>（2）Cookies：响应的Cookie信息<br>（3）Headers：响应头<br>（4）Test Results：断言的结果</p>
<h3 id="4、Postman的内置参数"><a href="#4、Postman的内置参数" class="headerlink" title="4、Postman的内置参数"></a>4、Postman的内置参数</h3><p><strong>说明：</strong>“{ {}}” 中加上“$”就是内置的参数。<br>（1）{ { $timestamp }}：生成当前时间的时间戳。<br>（2）{ { $randomInt }}：生成 0-1000 之间的随机数。<br>（3）{ { $guid }}：生成速记 GUID 字符串。</p>
<h3 id="5、请求头各参数说明"><a href="#5、请求头各参数说明" class="headerlink" title="5、请求头各参数说明"></a>5、请求头各参数说明</h3><p>（1）Host：请求的主机地址。<br>（2）Connection：连接方式。<br>（3）Accept：客户端接收到的数据格式。<br>（4）X-Requested-With：异步请求。<br>（5）User-Agent：客户端的用户类型。（向服务器描述浏览器的类型）<br>（6）Referer：来源。<br>（7）Cookie：Cookie信息。<br>（8）Content-Type：请求内容的格式。</p>
<br/>

<hr>
<br/>

<h1 id="二、Postman的一些用法"><a href="#二、Postman的一些用法" class="headerlink" title="二、Postman的一些用法"></a>二、Postman的一些用法</h1><h3 id="1、Postman全局设置token"><a href="#1、Postman全局设置token" class="headerlink" title="1、Postman全局设置token"></a>1、Postman全局设置token</h3><p><strong>说明：</strong>当我们使用Postman来测试接口时，发送每个请求都需要手动加上token，这样的操作太繁琐了，所以我们可以设置全局token，在每次发送请求的时候自动给我们加上token。<br>（1）在Collections中，点击Pre-request Script选项。<br>（2）输入下面代码脚本，根据实际情况更改。  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pm.<span class="title function_">sendRequest</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://localhost:8080/api/v1/account/login&#x27;</span>, <span class="comment">// 登录的接口地址</span></span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">header</span>: &#123;</span><br><span class="line">        <span class="string">&quot;Accept&quot;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">body</span>: &#123;</span><br><span class="line">        <span class="attr">mode</span>: <span class="string">&#x27;raw&#x27;</span>,</span><br><span class="line">        <span class="attr">raw</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">            <span class="attr">username</span>: <span class="string">&quot;admin&quot;</span>, <span class="comment">// 登录账号</span></span><br><span class="line">            <span class="attr">password</span>: <span class="string">&quot;admin&quot;</span> <span class="comment">// 登录密码</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">err, res</span>) &#123;</span><br><span class="line">    pm.<span class="property">request</span>.<span class="property">headers</span>.<span class="title function_">add</span>(&#123;</span><br><span class="line">        <span class="attr">key</span>: <span class="string">&#x27;token&#x27;</span>, <span class="attr">value</span>: res.<span class="title function_">json</span>().<span class="property">data</span> <span class="comment">// 登录请求返回的token数据，如果是data里面的token，就是data.token；key后面的&#x27;token&#x27;表示token的名字。</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2、Postman全局变量使用方法"><a href="#2、Postman全局变量使用方法" class="headerlink" title="2、Postman全局变量使用方法"></a>2、Postman全局变量使用方法</h3><p>（1）在登录的接口那，点击 Tests 选项。<br>（2）在这里使用 js 代码提取 responseBody 返回的数据，比如 token。  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(responseBody); <span class="comment">// 查看 responseBody 数据</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(responseBody); <span class="comment">// 将 responseBody（返回的是 JSON 字符串） 转换为 JSON 数据</span></span><br><span class="line">pm.<span class="property">globals</span>.<span class="title function_">set</span>(<span class="string">&quot;token&quot;</span>,result.<span class="property">data</span>.<span class="property">token</span>); <span class="comment">// 左边方框里面 Snippets 下面选择 Set a global variable 这个选项，然后自动生成的</span></span><br></pre></td></tr></table></figure>
<p>（3）然后可以点击右上角 No Environment 旁边的小眼睛图标查看是否提取设置成功。<br><strong>注意：</strong>如果出现 token 无效等关于 token 的异常错误，就需要在每个请求接口的 Headers 头部中加入  这个。 </p>
<h3 id="3、Postman环境变量使用方法"><a href="#3、Postman环境变量使用方法" class="headerlink" title="3、Postman环境变量使用方法"></a>3、Postman环境变量使用方法</h3><p><strong>说明：</strong>有多种环境（开发环境、生产环境、测试环境）的情况下使用 EnViromments  环境变量。<br>（1）点击 EnViromments 选项，新增三个环境，分别为 开发环境、生产环境、测试环境；<br>（2）三个环境的 Variable 下的值要一样，比如都是 url ，Initial value下的值为服务器地址，比如 localhost:8080；<br>（3）在请求接口的时候就不用这样写了：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>localhost:<span class="number">8080</span><span class="regexp">/api/</span>v1<span class="regexp">/account/</span>login</span><br></pre></td></tr></table></figure>
<p>改成：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>&#123;&#123;url&#125;&#125;:<span class="number">8080</span><span class="regexp">/api/</span>v1<span class="regexp">/account/</span>login</span><br></pre></td></tr></table></figure>
<p>（4）使用：在右上角有一个 No EnViromment，点击选择需要在哪个环境下发送请求就可以了。</p>
<h3 id="4、Postman请求测试同时上传文件和json对象的接口"><a href="#4、Postman请求测试同时上传文件和json对象的接口" class="headerlink" title="4、Postman请求测试同时上传文件和json对象的接口"></a>4、Postman请求测试同时上传文件和json对象的接口</h3><p><strong>controller的代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 后端需要两个参数，一个参数用来接收上传文件，另一个参数用来接收json数据。</span></span><br><span class="line"><span class="comment">// 后端接收文件可以采用MultipartFile来接收，json数据可以创建对象进行接收， </span></span><br><span class="line"><span class="comment">// 采用@RequestPart注解进行数据绑定</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">upload</span><span class="params">(<span class="meta">@RequestPart(&quot;file&quot;)</span> MultipartFile uploadFile,<span class="meta">@RequestPart(&quot;req&quot;)</span> <span class="meta">@Valid</span> Query req)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//TODO 业务代码</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>使用postman进行请求：</strong><br>（1）使用 form-data 来进行传参，将文件和json数据隔开。<br>（2）根据后端别名来取名，文件为：file；json为：req（根据上面controller参数得来。<br>（3）在req json数据后面 Content type列加上 application&#x2F;json就可以了  </p>
<img src="/2023/09/28/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Postman%E7%AC%94%E8%AE%B0/3.jpg" class="">]]></content>
      <categories>
        <category>Postman</category>
      </categories>
      <tags>
        <tag>Postman</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Spring学习笔记</title>
    <url>/2023/10/04/%E5%85%B3%E4%BA%8ESpring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<hr>
<h1 id="一、Spring"><a href="#一、Spring" class="headerlink" title="一、Spring"></a>一、Spring</h1><p><code>spring</code>是一个轻量级的开发框架，为什么是轻量级，因为它所需jar包小，本身的大小也小，并且可以和其他任何框架集成。  </p>
<br/>

<hr>
<br/>


<h1 id="二、SpringBean的生命周期"><a href="#二、SpringBean的生命周期" class="headerlink" title="二、SpringBean的生命周期"></a>二、SpringBean的生命周期</h1><p><strong>图解：</strong>  </p>
<img src="/2023/10/04/%E5%85%B3%E4%BA%8ESpring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.jpg" class="">  
<p><strong>1、实例化</strong><br>在<code>AbstractAutowireCapableBeanFactory</code>类中的<code>createBeanInstance</code>方法中，根据反射的原理实例化bean对象。<br>（1）<code>createBeanInstance</code>方法中第一行是获取<code>Class</code>对象；<br>（2）在<code>instantiateBean</code>方法中，有一行为<code>beanInstance=getInstantiationStrategy（）.instantiate(mbd,beanName,this)</code>；<br>（3）在<code>instantiate</code>方法中的<code>constructorToUse=clazz.getDeclaredConstructor()</code>，这个是使用<code>Class</code>对象获取这个对象的构造器；<br>（4）在<code>instantiateClass</code>方法中的<code>ctor.newInstance(argsWithDefaultValues)</code>，根据构造器获取这个对象的实例。  </p>
<p><strong>2、初始化（自定义属性赋值）</strong><br>在<code>AbstractAutowireCapableBeanFactory</code>类中的<code>populateBean</code>方法中，使用<code>set</code>方法完成赋值。（使用 PropertyValue 实体类的 set 方法完成赋值 setPropertyValue(pv.getName(), pv.getValue())；  </p>
<p><strong>3、检查<code>Aware</code>相关接口并设置依赖（容器对象属性赋值）</strong><br>（1）<code>Aware</code>接口是用来干什么的？<br><code>Aware</code>接口相当于是一个标识作用，比如下面的例子：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(object <span class="keyword">instanceof</span> Aware) &#123;</span><br><span class="line">    <span class="keyword">if</span>(object <span class="keyword">instanceof</span> BeanFactory) &#123;</span><br><span class="line">        <span class="keyword">do</span> soming...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(object <span class="keyword">instanceof</span> ApplicationContext) &#123;</span><br><span class="line">        <span class="keyword">do</span> soming...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2023/10/04/%E5%85%B3%E4%BA%8ESpring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.jpg" class="">  
<p>上图说明：<br>相当于有多个接口去继承<code>Aware</code>接口，然后有多个类去实现那些接口，在<code>spring</code>容器启动的时候，会分别判断这些类的实例化对象<code>bean</code>属于哪个接口，然后按照那个接口的<code>set</code>方法去赋值。<br>（下面4到7步，每个<code>bean</code>对象都会执行，意思就是：每个<code>bean</code>对象在初始化好之后，都会执行前置处理，然后执行<code>invokeInitMethods</code>方法去判断这个<code>bean</code>对象是否实现了<code>InitializingBean</code>接口，有没有扩展点，如果实现了，就执行<code>afterPropertiesSet</code>方法，这个方法相当于一个扩展点，相当于给这个<code>bean</code>对象增强，最后执行后置处理。）  </p>
<p>4、<code>BeanPostProcessor</code>前置处理  </p>
<p>5、检查<code>bean</code>对象实现了<code>InitializingBean</code>接口（执行初始化方法<code>invokeInitMethods</code>，默认没有）  </p>
<p>6、检查是否配置有自定义的<code>init-method</code>（执行初始化方法<code>invokeInitMethods</code>，默认没有）  </p>
<p>7、<code>BeanPostProcessor</code>后置处理</p>
<br/>

<hr>
<br/>


<h1 id="三、Spring三大核心"><a href="#三、Spring三大核心" class="headerlink" title="三、Spring三大核心"></a>三、Spring三大核心</h1><h3 id="1、spring-IOC（控制反转）和spring-DI（依赖注入）"><a href="#1、spring-IOC（控制反转）和spring-DI（依赖注入）" class="headerlink" title="1、spring IOC（控制反转）和spring DI（依赖注入）"></a>1、spring IOC（控制反转）和spring DI（依赖注入）</h3><p><strong>1、什么是<code>IOC</code>控制反转和<code>DI</code>依赖注入？</strong><br>之前我们创建对象，是使用<code>new</code>，<code>new</code>一个对象，但是在<code>spring</code>中，我们不用创建对象，由<code>spring</code>帮我们创建，<code>spring</code>相当于一个容器，我们把对象当成<code>bean</code>，将<code>bean</code>注入（依赖注入）到<code>spring</code>容器中，由<code>spring</code>容器自己帮我们创建和管理对象，在需要使用这个对象的地方使用反射（控制反转）来使用这个对象。<br>例如：<br>（1）以前传统方式创建一个对象：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实体类对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dog&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, color=&#x27;&quot;</span> + color + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试输出</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;小黑狗&quot;</span>, <span class="string">&quot;黑色&quot;</span>);</span><br><span class="line">        System.out.println(dog.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）现在<code>spring</code>帮我们创建，去<code>xml</code>配置文件中配置<code>bean</code>对象：（也可以使用注解的方式，请查看<code>springboot</code>学习笔记）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置属性id的值，相当于给这个实例一个变量名 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置属性class的值，就是Dog实体类的包路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;Dog&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置property就相当于给对应的属性赋值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小黑狗&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">value</span>=<span class="string">&quot;黑色&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上述配置就相当于在java中的下述代码，差别就是这是写在配置文件中，不会造成程序的耦合：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">apple.setName(<span class="string">&quot;小黑狗&quot;</span>);</span><br><span class="line">apple.setColor(<span class="string">&quot;黑色&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>然后测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Dog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="comment">// 通过ClassPathXmlApplicationContext加载dog.xml配置文件，路径是target目录下的相对路径</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">dogContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath:dog.xml&quot;</span>);</span><br><span class="line">	<span class="comment">// 通过反射获取dog实例对象</span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> dogContext.getBean(<span class="string">&quot;dog&quot;</span>, Dog.class);</span><br><span class="line">        System.out.println(dog.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2、有参构造创建对象的例子（这里只列xml方式）</strong><br>（1）有一个<code>student</code>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cn.zuo.pojo</span><br><span class="line"></span><br><span class="line">Student&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StudentOne</span><span class="params">(String name, Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;StudentOne&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>student.xml</code>文件中：<br>第一种：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cn.zuo.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xiaoming&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;29&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>第二种：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cn.zuo.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xiaogang&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;27&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>第三种：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cn.zuo.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xiaohong&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> <span class="attr">value</span>=<span class="string">&quot;29&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>3、bean的自动注入方法</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//输入autowire=&quot;byName&quot; 就实现自动装配了。</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">calss</span>=<span class="string">&quot;com.cn.zuo.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xiaoming&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">说明：</span><br><span class="line">    byname，需要保证所有bean的id唯一，并且这个bean需要和自动注入的属性的set方法一致。</span><br><span class="line">    bytype，需要保证所有bean的class唯一，并且这个bean需要和自动注入的属性的类型一致。</span><br></pre></td></tr></table></figure>

<h3 id="2、spring-AOP（面向切面）"><a href="#2、spring-AOP（面向切面）" class="headerlink" title="2、spring AOP（面向切面）"></a>2、spring AOP（面向切面）</h3><p><strong>说明：</strong>需要导入依赖包 org.aspectj，Aop是用来处理那些和业务没有关系的功能和逻辑模块，比如日志、权限等。<br>Aop 是 IOC 整体流程中的一个扩展点。  </p>
<p>1、<code>SpringAop</code>专业术语</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    add();</span><br><span class="line">    update();</span><br><span class="line">    select();</span><br><span class="line">    delete();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（1）<code>连接点</code>：<code>User</code>类中可以被增强的方法都是连接点，比如上面的<code>add</code>、<code>update</code>、<code>select</code>、<code>delete</code>方法。<br>（2）<code>切入点</code>：实际上被增强的方法叫切入点，比如上面的四个方法中，我增强了<code>add</code>方法、<code>add</code>方法就是切入点。<br>（3）<code>通知（增强）</code>：增强的部分，比如我在<code>add</code>方法中增加一个日志输出，这个日志输出就是通知。通知的类型有：<br>    - 前置通知（BeforeAdvice）：在目标执行之前被调用，对应接口<code>BeforeAdvice</code>。<br>    - 后置通知（AfterReturning）：在目标方法执行之后调用（抛出异常不会执行），对应接口<code>AfterReturnAdvice</code>。<br>    - 环绕通知（前后通知Around）：在目标方法执行前后被调用，对应接口<code>MethodInterceptor</code>。<br>    - 异常通知（AfterThrowingAdvice）：在目标方法抛出异常后调用，对应接口<code>ThrowAdvice</code>。<br>    - 最终通知（相当于fially，After）：在目标方法执行之后被调用（抛出异常也会执行）。<br>（4）<code>切面</code>：把通知切入到切入点的过程。  </p>
<p>2、通过继承类实现<br>（1）<code>BeforeAdvice</code>类<br>    - 会在目标对象的方法之前被调用<br>    - 通过实现<code>MethodBeforeAdvice</code>接口来实现<br>    - 该接口中定义了一个方法即<code>before</code>方法，该方法会在目标对象<code>target</code>之前执行<br>（2）<code>AfterAdvice</code>类<br>    - 在目标对象的方法执行之后调用<br>    - 通过实现<code>AfterReturningAdvice</code>接口实现<br><strong>例子：</strong>  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DemoOneService业务一</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoOneService</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demoOne</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;demoOne...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demoTwo</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;demoTwo...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demoThree</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;demoThree...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DemoTwoService业务二</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoTwoService</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;f()...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增一个MyAfterAdvice类去实现AfterReturningAdvice接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAfterAdvice</span> <span class="keyword">implements</span> <span class="title class_">AfterReturningAdvice</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(Object o,Method method,Object[] objects,object o1)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;执行后发出的通知...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建一个MyBeforeAdvice类去实现MethodBeforeAdvice接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeforeAdvice</span> <span class="keyword">implements</span> <span class="title class_">MethodBeforeAdvice</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Method method,Object[] objects,Object o)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;执行前发出的通知...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Spring</code>核心配置文件<code>applicationContext.xml</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">	   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">	   http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">	   http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mybefore&quot;</span> <span class="attr">class</span>=<span class="string">&quot;MyBeforeAdvice&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;after&quot;</span> <span class="attr">class</span>=<span class="string">&quot;MyAfterAdvice&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;demoOneService&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* xxx.xxx.demo.*.*(...))&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:pointcut</span>&gt;</span></span><br><span class="line">		&lt;aop:advisorvadvice-ref=&quot;after&quot; pointcut-ref=&quot;demoOneService&quot; /&gt;</span><br><span class="line">		&lt;aop:advisorvadvice-ref=&quot;mybefore&quot; pointcut-ref=&quot;demoOneService&quot; /&gt;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;demoOneService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;DemoOneService&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;demoTwoService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;DemoTwoService&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">		<span class="type">DemoOneService</span> <span class="variable">do</span> <span class="operator">=</span> ac.getBean(<span class="string">&quot;demoTwoService&quot;</span>,DemoTwoService.class);</span><br><span class="line">		<span class="keyword">do</span>.demoOne();</span><br><span class="line">		<span class="keyword">do</span>.demoTwo();</span><br><span class="line">		<span class="keyword">do</span>.demoThree();</span><br><span class="line">		<span class="type">DemoTwoService</span> <span class="variable">dt</span> <span class="operator">=</span> ac.getBean(<span class="string">&quot;demoTwoService&quot;</span>,DemoTwoService.class);</span><br><span class="line">		dt.f();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、通过xml方式实现<br>（1）第一种（设置切入点）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    先注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;service.impl.UserServiceImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;beforeLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;log.BeforeLog&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;log.AfterLog&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启aop --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置切入点，expression(要切入的位置）execution（*修饰符 *返回值  *方法名 (..)参数) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* service.impl.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 设置要切入的类，设置要切入的点 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;beforeLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（2）第二种（设置切入面）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;service.impl.UserServiceImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;diyLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;service.diy.DiyLog&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--设置切入面--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;diyLog&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;point&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* service.impl.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- method里面的before是增强类中的方法 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4、通过注解配置切面<br>（1）创建一个<code>User</code>类和一个增强类<code>UserProxy</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增强类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span>  <span class="comment">// 生成增强类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line">    <span class="comment">// 前置通知</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）创建一个spring配置文件bean.xml（使用config类来配置请看第<code>(4)</code>点）  </p>
<ol>
<li>在配置文件头部声明中加入context、aop声明，开启注解扫描；</li>
<li>开启Aspect生成代理对象。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>（3）在需要增强的方法上增加不同通知的注解<br>比如我在上面增强类UserProxy中before方法上增加前置通知：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@before(value=&quot;execution(* User类的全路径.add(..))&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 环绕通知</span></span><br><span class="line"><span class="meta">@Around(value=&quot;execution(* User类的全路径.add(..))&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint p)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;环绕之前...&quot;</span>);</span><br><span class="line">    p.proceed(); <span class="comment">// 执行User类中add方法</span></span><br><span class="line">    System.out.println(<span class="string">&quot;环绕之后...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（4）使用Config类来代替xml配置文件  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.zuo&quot;&#125;)</span> <span class="comment">// 相当于xml中的包扫描</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span> <span class="comment">// 相当于xml中 &lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigAop</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br/>

<hr>
<br/>

<h1 id="四、关于Spring中的一些用法"><a href="#四、关于Spring中的一些用法" class="headerlink" title="四、关于Spring中的一些用法"></a>四、关于Spring中的一些用法</h1><h3 id="1、在xml中配置Spring扫描包"><a href="#1、在xml中配置Spring扫描包" class="headerlink" title="1、在xml中配置Spring扫描包"></a>1、在<code>xml</code>中配置<code>Spring</code>扫描包</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这是默认配置扫描包，会通过默认的 Filter ,扫描到需要的包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.cn.zuo.service&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 示例一</span></span><br><span class="line"><span class="comment">use-default-filters=&quot;false&quot; 表示现在不使用默认 filter，自己配置filter </span></span><br><span class="line"><span class="comment">context:include-filter 设置扫描哪些内容，下面的意思是扫描注解，只扫描带Controller注解的类</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.cn.zuo&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 示例二</span></span><br><span class="line"><span class="comment">context:exclude-filter 设置不扫描哪些内容，下面的意思是不扫描带Controller注解的类，其他在zuo包下的都扫描</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.cn.zuo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、开启事物管理和注解"><a href="#2、开启事物管理和注解" class="headerlink" title="2、开启事物管理和注解"></a>2、开启事物管理和注解</h3><p>（一般在service层加）<br>1、基于注解<br>（1）载入spring-tx依赖，在spring配置文件中加入头部声明，将<code>xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</code>的“xsi”改成“tx”，将<code>xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</code>的<code>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</code>的“beans”改成“tx”。<br>（2）加入事物管理器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 创建事物管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（3）开启事物注解</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启事务注解 </span></span><br><span class="line"><span class="comment">transaction-manager=&quot;transactionManager&quot;对应上面事务管理器中的id，这个属性的意思是指明开启的是哪个事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（4）在service层的实现类上或者方法上加@Transactional  </p>
<p>2、基于xml<br>同上面<code>1、</code>操作，不要（3）<br>加入通知配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;随便取&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;需要配置事务的方法&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>配置切入点</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启aop --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置切入点，expression(要切入的位置）execution（*修饰符 *返回值  *方法名 (..)参数) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* service.impl.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置要切入的类，设置要切入的点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;对应上面随便取的id&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、完全基于注解<br>（1）创建一个配置类，对比spring配置文件来配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.zuo&quot;)</span> <span class="comment">// 相当于xml中的包扫描</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span> <span class="comment">// 开启事务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigAop</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建数据库连接池</span></span><br><span class="line">     <span class="meta">@Bean</span></span><br><span class="line">      <span class="keyword">public</span> DruidDataSource <span class="title function_">getDruidDataSource</span> <span class="params">()</span>&#123;</span><br><span class="line">          <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span> ();</span><br><span class="line">          dataSource.setDriverClassName(<span class="string">&quot; &quot;</span>);</span><br><span class="line">          dataSource.setUrl(<span class="string">&quot; &quot;</span>);</span><br><span class="line">          dataSource.setUsername(<span class="string">&quot; &quot;</span>);</span><br><span class="line">          dataSource.setPassword(<span class="string">&quot; &quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> dataSource;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 同理创建JdbcTemplate</span></span><br><span class="line">      <span class="meta">@Bean</span></span><br><span class="line">      <span class="keyword">public</span>  JdbcTemplate <span class="title function_">getJdbcTemplate</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">          <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line">          <span class="comment">//jdbcTemplate.setDataSource(getDruidDataSource ()); </span></span><br><span class="line">         <span class="comment">//可以直接调用上面这个方法，但是会重新创建，我们需要用的是spring容器中已经存在的dataSource，</span></span><br><span class="line">        <span class="comment">//所以直接在这个方法里增加一个参数DataSource dataSource，这个dataSource是spring容器中已经存在的。</span></span><br><span class="line">        jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="meta">@Bean</span></span><br><span class="line">      <span class="keyword">public</span> DataSourceTransactionManager <span class="title function_">getDataSourceTransactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">DataSourceTransactionManager</span> <span class="variable">transactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">        transactionManager.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> transactionManager;</span><br><span class="line">      &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>


<h3 id="3、新特性之单元测试框架"><a href="#3、新特性之单元测试框架" class="headerlink" title="3、新特性之单元测试框架"></a>3、新特性之单元测试框架</h3><p>需要导入依赖spring-test</p>
<img src="/2023/10/04/%E5%85%B3%E4%BA%8ESpring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3.jpg" class="">]]></content>
      <categories>
        <category>后端技术</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8 stream 调式方法</title>
    <url>/2023/10/07/Java8-stream-%E8%B0%83%E5%BC%8F%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<br/>

<hr>
<br/>

<p><strong>说明：</strong><code>Java</code>的<code>Stream</code>编程给调试带来了极大的不便，IDEA推出了stream trace功能，可以详细看到每一步操作的关系、结果，非常方便进行调试。  </p>
<div align="center">
    <font size="50">StreamTrace 用法</font>
</div>

<h3 id="1、StreamTrace-例子"><a href="#1、StreamTrace-例子" class="headerlink" title="1、StreamTrace 例子"></a>1、StreamTrace 例子</h3><p>这里简单将字符串转成它的字符数，并设置断点开启debug模式。</p>
<img src="/2023/10/07/Java8-stream-%E8%B0%83%E5%BC%8F%E6%96%B9%E6%B3%95/1.png" class="">
<p>如上图所示，可以看到每一步操作的元素个数、操作的结果、元素转换前后的对应关，非常清晰明了；还可以查看具体的对象内容。  </p>
<h3 id="2、使用-StreamTrace-方法"><a href="#2、使用-StreamTrace-方法" class="headerlink" title="2、使用 StreamTrace 方法"></a>2、使用 StreamTrace 方法</h3><p>StreamTrace只有在debug模式下才能使用，当在Stream代码上设置断点后，启动debug，点击流按钮，如图所示：</p>
<img src="/2023/10/07/Java8-stream-%E8%B0%83%E5%BC%8F%E6%96%B9%E6%B3%95/2.png" class=""> 
<br/>

<p>点击后，默认Split 模式显示：</p>
<img src="/2023/10/07/Java8-stream-%E8%B0%83%E5%BC%8F%E6%96%B9%E6%B3%95/3.png" class=""> 
<br/>

<p>可以点击左下方按钮切换到FlatMode模式，当然也可以再切换回去：</p>
<img src="/2023/10/07/Java8-stream-%E8%B0%83%E5%BC%8F%E6%96%B9%E6%B3%95/4.png" class="">

<h3 id="3、实战演练"><a href="#3、实战演练" class="headerlink" title="3、实战演练"></a>3、实战演练</h3><p>这里演示一段字符转长度并过滤长度小于5的stream操作：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span>    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestTrace</span><span class="params">()</span> &#123;</span><br><span class="line">    Stream.of(<span class="string">&quot;beijing&quot;</span>,<span class="string">&quot;tianjin&quot;</span>,<span class="string">&quot;shanghai&quot;</span>,<span class="string">&quot;wuhan&quot;</span>)                </span><br><span class="line">        .map(String::length)               </span><br><span class="line">        .filter(e -&gt; e &gt; <span class="number">5</span>)               </span><br><span class="line">        .collect(Collectors.toList()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2023/10/07/Java8-stream-%E8%B0%83%E5%BC%8F%E6%96%B9%E6%B3%95/5.png" class="">
]]></content>
      <categories>
        <category>后端技术</category>
        <category>问题方法合集</category>
      </categories>
      <tags>
        <tag>Java8 stream 调式方法</tag>
      </tags>
  </entry>
  <entry>
    <title>ObjectMapper（各个类型和Json类型互转）</title>
    <url>/2023/10/07/ObjectMapper%EF%BC%88%E5%90%84%E4%B8%AA%E7%B1%BB%E5%9E%8B%E5%92%8CJson%E7%B1%BB%E5%9E%8B%E4%BA%92%E8%BD%AC%EF%BC%89/</url>
    <content><![CDATA[<br/>

<hr>
<br/>

<h1 id="一、ObjectMapper（各个类型和Json类型互转）"><a href="#一、ObjectMapper（各个类型和Json类型互转）" class="headerlink" title="一、ObjectMapper（各个类型和Json类型互转）"></a>一、ObjectMapper（各个类型和Json类型互转）</h1><p><strong>说明：</strong><code>ObjectMapper</code>类<code>(com.fasterxml.jackson.databind.ObjectMapper)</code>是<code>Jackson</code>的主要类，它可以帮助我们快速的进行各个类型和Json类型的相互转换。  </p>
<h3 id="1、使用"><a href="#1、使用" class="headerlink" title="1、使用"></a>1、使用</h3><p>（1）引入Jackson的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据自己需要引入相关版本依赖。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、ObjectMapper的常用配置"><a href="#2、ObjectMapper的常用配置" class="headerlink" title="2、ObjectMapper的常用配置"></a>2、<code>ObjectMapper</code>的常用配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectMapper mapper;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ObjectMapper <span class="title function_">getObjectMapper</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.mapper;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">    <span class="comment">//创建ObjectMapper对象</span></span><br><span class="line">    mapper = <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>()</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//configure方法 配置一些需要的参数</span></span><br><span class="line">    <span class="comment">// 转换为格式化的json 显示出来的格式美化</span></span><br><span class="line">    mapper.enable(SerializationFeature.INDENT_OUTPUT);</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//序列化的时候序列对象的那些属性  </span></span><br><span class="line">   <span class="comment">//JsonInclude.Include.NON_DEFAULT 属性为默认值不序列化 </span></span><br><span class="line">   <span class="comment">//JsonInclude.Include.ALWAYS      所有属性</span></span><br><span class="line">   <span class="comment">//JsonInclude.Include.NON_EMPTY   属性为 空（“”） 或者为 NULL 都不序列化 </span></span><br><span class="line">   <span class="comment">//JsonInclude.Include.NON_NULL    属性为NULL 不序列化</span></span><br><span class="line">   mapper.setSerializationInclusion(JsonInclude.Include.ALWAYS);  </span><br><span class="line"> </span><br><span class="line">   </span><br><span class="line">    <span class="comment">//反序列化时,遇到未知属性会不会报错 </span></span><br><span class="line">    <span class="comment">//true - 遇到没有的属性就报错 false - 没有的属性不会管，不会报错</span></span><br><span class="line">    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//如果是空对象的时候,不抛异常  </span></span><br><span class="line">    mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, <span class="literal">false</span>);  </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 忽略 transient 修饰的属性</span></span><br><span class="line">    mapper.configure(MapperFeature.PROPAGATE_TRANSIENT_MARKER, <span class="literal">true</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//修改序列化后日期格式</span></span><br><span class="line">    mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="literal">false</span>);  </span><br><span class="line">    mapper.setDateFormat(<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//处理不同的时区偏移格式</span></span><br><span class="line">   mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);</span><br><span class="line">   mapper.registerModule(<span class="keyword">new</span> <span class="title class_">JavaTimeModule</span>());</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、ObjectMapper的常用方法"><a href="#3、ObjectMapper的常用方法" class="headerlink" title="3、ObjectMapper的常用方法"></a>3、<code>ObjectMapper</code>的常用方法</h3><h6 id="（1）json字符串转对象"><a href="#（1）json字符串转对象" class="headerlink" title="（1）json字符串转对象"></a>（1）json字符串转对象</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;Hyl\&quot;, \&quot;age\&quot;:20&#125;&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//将字符串转换为对象</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> mapper.readValue(jsonString, Student.class);</span><br><span class="line">System.out.println(student); <span class="comment">// 结果一</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//将对象转换为json字符串</span></span><br><span class="line">jsonString = mapper.writeValueAsString(student);</span><br><span class="line">System.out.println(jsonString); <span class="comment">// 结果二</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">结果一：</span><br><span class="line">Student [ name: Hyl, age: <span class="number">20</span> ]</span><br><span class="line">结果二：</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span> : <span class="string">&quot;Hyl&quot;</span>,</span><br><span class="line">  <span class="string">&quot;age&quot;</span> : <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="（2）数组和对象之间转换"><a href="#（2）数组和对象之间转换" class="headerlink" title="（2）数组和对象之间转换"></a>（2）数组和对象之间转换</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对象转为byte数组</span></span><br><span class="line"><span class="type">byte</span>[] byteArr = mapper.writeValueAsBytes(student);</span><br><span class="line">System.out.println(byteArr); <span class="comment">// 结果一</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//byte数组转为对象</span></span><br><span class="line">Student student= mapper.readValue(byteArr, Student.class);</span><br><span class="line">System.out.println(student); <span class="comment">// 结果二</span></span><br><span class="line"> </span><br><span class="line">结果一：</span><br><span class="line">[B@3327bd23</span><br><span class="line">结果二：</span><br><span class="line">Student [ name: Hyl, age: <span class="number">20</span> ]</span><br></pre></td></tr></table></figure>
<h6 id="（3）集合和json字符串之间转换"><a href="#（3）集合和json字符串之间转换" class="headerlink" title="（3）集合和json字符串之间转换"></a>（3）集合和json字符串之间转换</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Student&gt; studentList= <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">studentList.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;hyl1&quot;</span> ,<span class="number">20</span> , <span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">studentList.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;hyl2&quot;</span> ,<span class="number">21</span> , <span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">studentList.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;hyl3&quot;</span> ,<span class="number">22</span> , <span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">studentList.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;hyl4&quot;</span> ,<span class="number">23</span> , <span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line"> </span><br><span class="line"><span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> mapper.writeValueAsString(studentList);</span><br><span class="line">System.out.println(jsonStr); <span class="comment">// 结果一</span></span><br><span class="line">        </span><br><span class="line">List&lt;Student&gt; studentList2 = mapper.readValue(jsonStr, List.class);</span><br><span class="line">System.out.println(<span class="string">&quot;字符串转集合：&quot;</span> + studentList2 ); <span class="comment">// 结果二</span></span><br><span class="line"> </span><br><span class="line">结果一：</span><br><span class="line">[ &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span> : <span class="string">&quot;hyl1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;age&quot;</span> : <span class="number">20</span>,</span><br><span class="line">  <span class="string">&quot;sendTime&quot;</span> : <span class="number">1525164212803</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span> : <span class="string">&quot;hyl2&quot;</span>,</span><br><span class="line">  <span class="string">&quot;age&quot;</span> : <span class="number">21</span>,</span><br><span class="line">  <span class="string">&quot;sendTime&quot;</span> : <span class="number">1525164212803</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span> : <span class="string">&quot;hyl3&quot;</span>,</span><br><span class="line">  <span class="string">&quot;age&quot;</span> : <span class="number">22</span>,</span><br><span class="line">  <span class="string">&quot;sendTime&quot;</span> : <span class="number">1525164212803</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span> : <span class="string">&quot;hyl4&quot;</span>,</span><br><span class="line">  <span class="string">&quot;age&quot;</span> : <span class="number">23</span>,</span><br><span class="line">  <span class="string">&quot;sendTime&quot;</span> : <span class="number">1525164212803</span></span><br><span class="line">&#125; ]</span><br><span class="line">结果二：</span><br><span class="line">[</span><br><span class="line">	&#123;</span><br><span class="line">		name=hyl1, </span><br><span class="line">		age=<span class="number">20</span>, </span><br><span class="line">		sendTime=<span class="number">1525164212803</span></span><br><span class="line">	&#125;, &#123;</span><br><span class="line">		name=hyl2, </span><br><span class="line">		age=<span class="number">21</span>, </span><br><span class="line">		sendTime=<span class="number">1525164212803</span></span><br><span class="line">	&#125;, &#123;</span><br><span class="line">		name=hyl3, </span><br><span class="line">		age=<span class="number">22</span>, </span><br><span class="line">		sendTime=<span class="number">1525164212803</span></span><br><span class="line">	&#125;, &#123;</span><br><span class="line">		name=hyl4, </span><br><span class="line">		age=<span class="number">23</span>, </span><br><span class="line">		sendTime=<span class="number">1525164212803</span></span><br><span class="line">	&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h6 id="（4）map和json字符串之间转换"><a href="#（4）map和json字符串之间转换" class="headerlink" title="（4）map和json字符串之间转换"></a>（4）map和json字符串之间转换</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Object&gt; testMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">testMap.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;22&quot;</span>);</span><br><span class="line">testMap.put(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>);</span><br><span class="line">testMap.put(<span class="string">&quot;date&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">testMap.put(<span class="string">&quot;student&quot;</span>, <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;hyl&quot;</span>, <span class="number">20</span>, <span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> mapper.writeValueAsString(testMap);</span><br><span class="line">System.out.println(jsonStr); <span class="comment">// 结果一</span></span><br><span class="line">Map&lt;String, Object&gt; testMapDes = mapper.readValue(jsonStr, Map.class);</span><br><span class="line">System.out.println(testMapDes); <span class="comment">// 结果二</span></span><br><span class="line"> </span><br><span class="line">结果一：</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;date&quot;</span> : <span class="number">1525164212803</span>,</span><br><span class="line">  <span class="string">&quot;name&quot;</span> : <span class="string">&quot;22&quot;</span>,</span><br><span class="line">  <span class="string">&quot;student&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span> : <span class="string">&quot;hyl&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span> : <span class="number">20</span>,</span><br><span class="line">    <span class="string">&quot;sendTime&quot;</span> : <span class="number">1525164212803</span>,</span><br><span class="line">    <span class="string">&quot;intList&quot;</span> : <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;age&quot;</span> : <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line">结果二：</span><br><span class="line">&#123;date=<span class="number">1525164212803</span>, name=<span class="number">22</span>, student=&#123;name=hyl, age=<span class="number">20</span>, sendTime=<span class="number">1525164212803</span>, intList=<span class="literal">null</span>&#125;, age=<span class="number">20</span>&#125;</span><br></pre></td></tr></table></figure>
<h6 id="（5）日期转json字符串"><a href="#（5）日期转json字符串" class="headerlink" title="（5）日期转json字符串"></a>（5）日期转json字符串</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改时间格式</span></span><br><span class="line">mapper.setDateFormat(<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span> (<span class="string">&quot;hyl&quot;</span>,<span class="number">21</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">student.setIntList(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"> </span><br><span class="line"><span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> mapper.writeValueAsString(student);</span><br><span class="line">System.out.println(jsonStr);</span><br><span class="line"> </span><br><span class="line">结果：</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span> : <span class="string">&quot;hyl&quot;</span>,</span><br><span class="line">  <span class="string">&quot;age&quot;</span> : <span class="number">21</span>,</span><br><span class="line">  <span class="string">&quot;sendTime&quot;</span> : <span class="string">&quot;2020-07-23 13:14:36&quot;</span>,</span><br><span class="line">  <span class="string">&quot;intList&quot;</span> : [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="（6）Object类型转list"><a href="#（6）Object类型转list" class="headerlink" title="（6）Object类型转list"></a>（6）Object类型转list</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> objectMapper.writeValueAsString(object); <span class="comment">// object是Object类型</span></span><br><span class="line"><span class="keyword">return</span> objectMapper.readValue(json, List.class);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java开发中工具和方法</category>
      </categories>
      <tags>
        <tag>ObjectMapper（各个类型和Json类型互转）</tag>
      </tags>
  </entry>
  <entry>
    <title>关于springMVC学习笔记</title>
    <url>/2023/10/09/%E5%85%B3%E4%BA%8EspringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<hr>
<h1 id="一、SpringMVC相关知识整理"><a href="#一、SpringMVC相关知识整理" class="headerlink" title="一、SpringMVC相关知识整理"></a>一、SpringMVC相关知识整理</h1><h3 id="1、springMVC支持ant风格的路径"><a href="#1、springMVC支持ant风格的路径" class="headerlink" title="1、springMVC支持ant风格的路径"></a>1、springMVC支持ant风格的路径</h3><p>?：表示任意单个字符<br>*：表示任意的0个或多个字符<br>**：表示任意的一层或多层目录<br>注意：在使用 ** 时，只能使用 &#x2F;**&#x2F;xxx 的方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前端发送的请求：localhost:8080/aaa/hello 或者 localhost:8080/a:a/hello</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/a?a/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前端发送的请求：localhost:8080/aaa/hello 或者 localhost:8080/aaaaa/hello</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/a*a/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前端发送的请求：localhost:8080/a/b/hello 或者 localhost:8080/a/b/c/d/hello</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/**/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、SpringMVC常用组件"><a href="#2、SpringMVC常用组件" class="headerlink" title="2、SpringMVC常用组件"></a>2、SpringMVC常用组件</h3><p>1、<code>DispatcherServlet</code>：<br><strong>前端控制器</strong>，不需要工程师开发，由框架提供，作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求。<br>2、<code>HandlerMapping</code>：<br><strong>处理器映射器</strong>，不需要工程师开发，由框架提供，作用：根据请求的<code>url</code>、<code>method</code>等信息查找<code>Handler</code>，即控制器方法。<br>（1）<code>Handler</code>：<strong>处理器</strong>，需要工程师开发，作用：在<code>DispatcherServlet</code>的控制下，<code>Handler</code>对具体的用户请求进行处理。<br>（2）<code>HandlerAdapter</code>：<strong>处理器适配器</strong>，不需要工程师开发，由框架提供，作用：通过<code>HandlerAdapter</code>对处理器（控制器方法）进行执行。<br>（3）<code>ViewResolver</code>：<strong>视图解析器</strong>，不需要工程师开发，由框架提供，作用：进行视图解析，得到相应的视图，例如：<code>ThymeleafView</code>、<code>InternalResourceView</code>、<code>RedirectView</code>。<br>（4）<code>View</code>：<strong>视图</strong>，不需要工程师开发，由框架或视图技术提供，作用：将模型数据通过页面展示给用户。</p>
<h3 id="3、SpringMVC执行流程"><a href="#3、SpringMVC执行流程" class="headerlink" title="3、SpringMVC执行流程"></a>3、SpringMVC执行流程</h3><p>说明：Handler就是Controller。<br>1、用户向服务器发送请求，请求被<code>springMVC</code>前端控制器<code>DispatcherServlet</code>捕获；<br>2、<code>DispatcherServlet</code>对请求<code>url</code>进行解析，得到请求资源标识符<code>uri</code>，判断请求<code>uri</code>对应的映射；（<strong>特别说明：</strong><code>&lt;mvc:default-servler-handler/&gt;</code>的作用，如果没有配置，那么<code>springMVC</code>会把所有请求当作后端控制器<code>controller</code>的映射请求，如果请求地址没有映射到<code>controller</code>的，都会404，比如静态资源的请求。而配置上后，<code>springMVC</code>会解析所有请求，将后端控制器有的请求映射给<code>controller</code>，把控制器没有映射的请求交给默认的<code>servlet</code>）<br>3、根据<code>uri</code>，调用<code>HandlerMapping</code>获得该<code>Handler</code>配置的所有相关对象（包括<code>Handler</code>对象以及对应的拦截器），最后以<code>HandlerExecutionChain</code>执行链对象的形式返回；<br>4、<code>DispatcherServlet</code>根据获得的<code>Handler</code>，选择一个合适的<code>HandlerAdapter</code>；<br>5、如果成功获得<code>HandlerAdapter</code>，此时将开始执行拦截器的<code>preHandler</code>方法；<br>6、提取<code>Request</code>中的模型数据，填充<code>Handler</code>入参，开始执行<code>Handler</code>方法，处理请求；在填充<code>Handler</code>的入参过程中，根据配置，<code>spring</code>将做一些额外的工作：<br>（1）<code>HttpMessageConveter</code>：将请求消息（如<code>json</code>）转换成一个对象，将对象转换为指定的响应信息。<br>（2）数据转换：对请求消息进行数据转换，如<code>string</code>类型转换成<code>Integer</code>。<br>（3）数据格式化：对请求消息进行数据格式化，如将字符串转换成格式化数字或格式化日期等。<br>（4）数据验证：验证数据的有效性（长度、格式等）。<br>7、<code>Handler</code>执行完成后，向<code>DispatcherServlet</code>返回一个<code>ModelAndView</code>对象；<br>8、此时将开始执行拦截器的<code>postHandler</code>方法；<br>9、根据返回的<code>ModelAndView</code>（此时会判断是否存在异常，如果存在异常，则执行<code>HandlerExceptionResolver</code>进行异常处理）选择一个适合的<code>ViewResolver</code>进行视图解析，根据<code>Model</code>和<code>View</code>，来渲染视图页面；<br>10、渲染视图完毕执行拦截器的<code>afterCompletion</code>方法；<br>11、将渲染结果返回给客户端。</p>
<br/>

<hr>
<br/>


<h1 id="二、springMVC项目搭建"><a href="#二、springMVC项目搭建" class="headerlink" title="二、springMVC项目搭建"></a>二、springMVC项目搭建</h1><p>1、创建<code>Maven</code>工程项目</p>
<img src="/2023/10/09/%E5%85%B3%E4%BA%8EspringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/springMVC1.jpg" class="">

<p>2、项目结构</p>
<img src="/2023/10/09/%E5%85%B3%E4%BA%8EspringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/springMVC2.jpg" class="">
<p>如果没有web文件夹，我们就新建一个web文件夹，然后点击菜单栏 <code>File</code> -&gt; <code>Project Structure</code>，然后根据下图所示创建：</p>
<img src="/2023/10/09/%E5%85%B3%E4%BA%8EspringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/springMVC3.jpg" class="">
<img src="/2023/10/09/%E5%85%B3%E4%BA%8EspringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/springMVC4.jpg" class="">

<p>3、添加pom文件需要的依赖，刷新maven<br><strong>特别注意：</strong>springMVC项目的依赖和springboot的不同，springMVC依赖还需要手动去web目录下创建lib包，并把所需的依赖手动添加到lib包中才能生效！！！添加方法下面会讲到。  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        mybatis依赖包中有,是test的--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        mybatis-spring依赖包中有是provided，只有在编译和测试的时候使用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--        springMVC依赖包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4、在java包下创建<code>controller</code>包（xxx.xx.controller），并且新建<code>MyController</code>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @Controller:创建控制器（处理器）对象</span></span><br><span class="line"><span class="comment">*   控制器：后端控制器，自定义的类处理请求</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * @RequestMapping:请求映射</span></span><br><span class="line"><span class="comment">    *   属性：value 请求中的url地址，唯一值，以“/”开头</span></span><br><span class="line"><span class="comment">    *   位置：1、在方法的上面（必须的） 2、在类的上面（可选）</span></span><br><span class="line"><span class="comment">    *   作用：把指定的请求，交给指定的方法处理，等同于url-pattern</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/some.do&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">doSome</span><span class="params">(ModelAndView model)</span>&#123;</span><br><span class="line">        <span class="comment">//存放数据</span></span><br><span class="line">        model.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;1111&quot;</span>);</span><br><span class="line">        model.addObject(<span class="string">&quot;fun&quot;</span>,<span class="string">&quot;2222&quot;</span>);</span><br><span class="line">        <span class="comment">//要返回的前端界面</span></span><br><span class="line">        model.setViewName(<span class="string">&quot;show&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> model;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当框架调用完doSome()方法后，得到返回中ModelAndView</span></span><br><span class="line"><span class="comment">     * 框架会在后续的处理逻辑值，处理mv多选里面的数据和视图</span></span><br><span class="line"><span class="comment">     * 对数据执行request.setAttribute(&quot;msg&quot;,&quot;处理了some.do请求&quot;)；把数据放入到request作用域</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、在resources文件夹下创建<code>spring-mvc.xml</code>、<code>applicationContext.xml</code>：<br>（1）<code>spring-mvc.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注解驱动，如果要使用阿里巴巴的fastjson，再导入依赖包之后就使用下面被注释的配置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;mvc:annotation-driven&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;mvc:message-converters register-defaults=&quot;true&quot;&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--            &lt;bean class=&quot;com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter&quot; id=&quot;fastJsonHttpMessageConverter&quot;&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--                &lt;property name=&quot;supportedMediaTypes&quot;&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--                    &lt;list&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--                        &lt;value&gt;text/html;charset=UTF-8&lt;/value&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--                        &lt;value&gt;application/json&lt;/value&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--                    &lt;/list&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--                &lt;/property&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--            &lt;/bean&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;/mvc:message-converters&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;/mvc:annotation-driven&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--静态资源过滤--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--扫描包：controller--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;controller&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- value值里面的jsp要和创建的文件夹名字一致 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（2）<code>applicationContext.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 将spring导入 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;import resource=&quot;classpath:spring-dao.xml&quot;&gt;&lt;/import&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;import resource=&quot;classpath:spring-service.xml&quot;&gt;&lt;/import&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;classpath:spring-mvc.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>6、在<code>web/WEB-INF</code>文件夹下创建jsp文件夹（文件夹名字自定义，要和<code>spring-mvc.xml</code>中视图解析器里的一致），然后在jsp文件夹下创建<code>show.jsp</code></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: <span class="number">86182</span></span><br><span class="line">  Date: <span class="number">2023</span>/<span class="number">10</span>/<span class="number">9</span></span><br><span class="line">  Time: <span class="number">13</span>:<span class="number">45</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">Hello world!</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">$&#123;fun&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>将下面代码复制粘贴进<code>web.xml</code>中：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--DispatchServlet--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">             下面的init-param标签是用来初始化applicationContext.xml的路径，默认配置是可以不用配置init-param标签的，</span></span><br><span class="line"><span class="comment">             如果不配置，它的路径就是 /WEB-INFO 文件夹下，并且配置文件名字后缀还要默认加上 -servlet.xml ，</span></span><br><span class="line"><span class="comment">             完整名字就是 springMVC-servlet.xml </span></span><br><span class="line"><span class="comment">           --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- 设置的话，这个servlet会提前到服务器启动时启动 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- /:不拦截.jsp，/*:拦截.jsp --&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- /：拦截路径，不拦截页面。</span></span><br><span class="line"><span class="comment">               /*：拦截所有的文件夹，不包含子文件夹 </span></span><br><span class="line"><span class="comment">              /**： 是拦截所有的文件夹及里面的子文件夹</span></span><br><span class="line"><span class="comment">           --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>7、设置lib依赖包，点击菜单栏 <code>File</code> -&gt; <code>Project Structure</code>，然后根据下图所示创建：</p>
<img src="/2023/10/09/%E5%85%B3%E4%BA%8EspringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/springMVC5.jpg" class="">
<img src="/2023/10/09/%E5%85%B3%E4%BA%8EspringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/springMVC6.jpg" class="">
<img src="/2023/10/09/%E5%85%B3%E4%BA%8EspringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/springMVC7.jpg" class="">

<p>8、项目启动配置</p>
<img src="/2023/10/09/%E5%85%B3%E4%BA%8EspringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/springMVC8.png" class="">
<img src="/2023/10/09/%E5%85%B3%E4%BA%8EspringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/springMVC9.jpg" class="">
<img src="/2023/10/09/%E5%85%B3%E4%BA%8EspringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/springMVC10.jpg" class="">
<img src="/2023/10/09/%E5%85%B3%E4%BA%8EspringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/springMVC11.jpg" class="">
<p>启动项目之后，在弹出的页面地址栏url后面加some.do访问成功！<br>至此，简单的springMVC项目搭建成功，没有包含数据库连接，下面继续讲解包含数据库连接的搭建。  </p>
<br/>

<p>9、在<code>mysql</code>数据库中新建表，这个大家自定义，这里不讲解。  </p>
<p>10、在<code>pom.xml</code>中加入数据库连接所需要的依赖，并且刷新maven<br><strong>注意：</strong>因为springMVC项目还需要手动去lib包下添加依赖，所以还需要去项目结构那在lib包下添加项目所需依赖，添加方法上面有讲到。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">&lt;/dependency</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果出现<br><code>java.lang.AbstractMethodError: org.mybatis.spring.transaction.SpringManagedTransaction.getTimeout()Ljava/lang/Integer</code><br>异常，表示<code>mybatis</code>依赖包和<code>mybatis-spring</code>依赖包版本不兼容，可以查询版本兼容问题。  </p>
<p>11、在java包下创建<code>dao、service、pojo</code>包（xxx.xx.dao、xxx.xx.service、xxx.xx.pojo），并且新建<code>MyServiceImpl、MyPojo</code>类，<code>MyDao</code>接口：<br>（1）<code>MyPojo</code>（对应数据库中的表，属性对应数据库中的字段）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @创建人 zjy</span></span><br><span class="line"><span class="comment"> * @文件名 MyPojo</span></span><br><span class="line"><span class="comment"> * @创建时间 2023/10/9</span></span><br><span class="line"><span class="comment"> * @描述 TODO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyPojo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>（2）<code>MyServiceImpl</code>（用来处理业务的）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dao.MyDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @创建人 zjy</span></span><br><span class="line"><span class="comment"> * @文件名 MyServiceImpl</span></span><br><span class="line"><span class="comment"> * @创建时间 2023/10/9</span></span><br><span class="line"><span class="comment"> * @描述 TODO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServiceImpl</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyDao myDao;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果spring-service.xml中实现set注入的方式，就使用这个，并把上面@Service和@Autowired注解注释</span></span><br><span class="line"><span class="comment">//    public void setMyDao(MyDao loginDao) &#123;</span></span><br><span class="line"><span class="comment">//        this.loginDao = loginDao;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;MyPojo&gt; <span class="title function_">findUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> myDao.findUsers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>（3）<code>MyDao</code>（用来处理数据库查询的接口）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @创建人 zjy</span></span><br><span class="line"><span class="comment"> * @文件名 MyDao</span></span><br><span class="line"><span class="comment"> * @创建时间 2023/10/9</span></span><br><span class="line"><span class="comment"> * @描述 TODO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;MyPojo&gt; <span class="title function_">findUsers</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>12、在<code>resources</code>目录下新建<code>mapper</code>文件夹、<code>jdbc.properties、mybatis-config.xml、spring-dao.xml、spring-service.xml</code>，在<code>mapper</code>目录下新建<code>MyMapper.xml</code>：<br>（1）<code>MyMapper.xml</code>（用于写sql增删改查的）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace：要对应你的dao接口的包路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;dao.MyDao&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- id：对应MyDao接口中的方法名；resultType：对应方法返回值，这里因为返回MyPojo，所以是MyPojo类的包路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;pojo.MyPojo&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>（2）<code>spring-service.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--扫描service包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;service&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--将我们所有业务注入到spring中，上面配置了扫描包，在serviceImpl加了@service注解，就不用配置了--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 因为我们使用的是注解@Autowired，所以我们在bean标签中使用自动注入的方式注入 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;bean id=&quot;myServiceImpl&quot; class=&quot;service.MyServiceImpl&quot; autowire=&quot;byType&quot;&gt;&lt;/bean&gt; --&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 这种方式是通过set注入，需要在MyServiceImpl类添加set方法 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--    &lt;bean id=&quot;myServiceImpl&quot; class=&quot;service.MyServiceImpl&quot;&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;property name=&quot;myDao&quot; ref=&quot;myDao&quot;&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明式事务配置,需要导入 spring-jdbc依赖包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>（3）<code>jdbc.properties</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#这里mysql数据库用的是5的版本就用这个连接</span></span><br><span class="line"><span class="comment">#driverClassName=com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#mysql数据库用的是8的版本用这个连接</span></span><br><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#注意改下 3306/ 后面数据库的名字</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://root@localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=true&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>
<p>（4）<code>mybatis-config.xml</code>（用来配置mybatis的各种配置）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将mapper注册到mybatis配置中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;/mapper/UserMapper.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（5）<code>spring-dao.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--关联数据库配置文件jdbc.properties 方法一--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 关联数据库配置文件jdbc.properties 方法二 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot; id=&quot;propertyPlaceholderConfigurer&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;location&quot; value=&quot;classpath:jdbc.properties&quot;&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- org.apache.commons.dbcp.BasicDataSource需要 commons-dbcp依赖包--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  destroy-method=”close”的作用是当数据库连接不使用的时候,就把该连接重新放到数据池中,方便下次使用调用. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 下面四个value要对应jdbc.properties中的四个值，如果jdbc.properties中是jdbc.url，下面就要改成jdbc.url --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driverClassName&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span> /&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 如果没有在mybatis-config.xml配置mappers就使用这个 --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:mapper/*.xml&quot;&gt;&lt;/property&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置dao接口扫描包，动态的实现dao接口注入spring中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- value对应上面SqlSessionFactoryBean的id --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>13、将<code>applicationContext.xml</code>中的注释打开，在<code>MyController</code>类中增加下面的属性：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> MyServiceImpl myService;</span><br></pre></td></tr></table></figure>
<p>并且在<code>doSome</code>方法中增加下面的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;MyPojo&gt; users = myService.findUsers();</span><br><span class="line">model.addObject(<span class="string">&quot;users&quot;</span>,users.toString());</span><br></pre></td></tr></table></figure>

<p>14、在<code>show.jsp</code>增加<code>$&#123;users&#125;</code>，启动项目，成功！</p>
]]></content>
      <categories>
        <category>后端技术</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>springMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux学习笔记</title>
    <url>/2023/10/11/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<hr>
<h1 id="一、目录结构介绍"><a href="#一、目录结构介绍" class="headerlink" title="一、目录结构介绍"></a>一、目录结构介绍</h1><h3 id="1、-root-localhost-讲解说明"><a href="#1、-root-localhost-讲解说明" class="headerlink" title="1、[root@localhost ~]#  讲解说明"></a>1、[root@localhost ~]#  讲解说明</h3><p>（1）<code>root</code>：代表当前登录的用户，在Linux中管理员账户是<code>root</code>。<br>（2）<code>localhost</code>：当前计算机主机名。<br>（3）<code>~</code>：当前所在家目录。<br>（4）<code>/</code>：当前所在根目录。<br>（5）<code>#</code>：超级用户提示符。<br>（6）<code>$</code>：普通用户的提示符（<code>$</code>钱的符号，普通用户就是俗人，俗人就爱钱）。</p>
<h3 id="2、目录结构说明"><a href="#2、目录结构说明" class="headerlink" title="2、目录结构说明"></a>2、目录结构说明</h3><p>（1）<code>/bin</code>：bin是Binary的缩写，这个目录存放着最常用的命令。<br>（2）<code>/boot</code>：这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件（不要随便动）。<br>（3）<code>/dev</code>：dev是Device（设备）的缩写，存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。<br>（4）<code>/etc</code>：这个目录用来存放所有的系统管理所需要的配置文件和子目录。<br>（5）<code>/home</code>：用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账户命名的。<br>（6）<code>/lib</code>：这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的dll文件。<br>（7）<code>/lost+found</code>：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。<br>（8）<code>/media</code>：Linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux会把识别的设备挂载到这个目录下。<br>（9）<code>/mnt</code>：系统提供该目录是为了让用户临时挂在别的文件系统的，我们可以将光驱挂载在<code>/mnt</code>上，然后进入该目录就可以查看光驱里的内容了。<br>（10）<code>/opt</code>：这是给主机额外安装软件所摆放的目录，比如你安装一个oracle数据库，就可以放在这个目录下，默认是空的。<br>（11）<code>/proc</code>：这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。<br>（12）<code>/root</code>：该目录为系统管理员，也称作超级权限者的用户主目录。<br>（13）<code>/sbin</code>：s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。<br>（14）<code>/srv</code>：该目录存放一些服务启动之后需要提取的数据。<br>（15）<code>/sys</code>：这是Linux2.6内核的一个很大的变化，该目录下安装了2.6内核中新出现的一个文件系统sysfs。<br>（16）<code>/tmp</code>：这个目录是用来存放一些临时文件的。<br>（17）<code>/usr</code>：这个一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于Windows下的program files目录。<br>（18）<code>/usr/bin</code>：系统用户使用的应用程序。</p>
<br/>

<hr>
<br/>

<h1 id="二、常用的Linux命令"><a href="#二、常用的Linux命令" class="headerlink" title="二、常用的Linux命令"></a>二、常用的Linux命令</h1><h3 id="1、cd（改变目录）"><a href="#1、cd（改变目录）" class="headerlink" title="1、cd（改变目录）"></a>1、cd（改变目录）</h3><p>（1）<code>cd /</code>：进入根目录；<br>（2）<code>cd /home/sharplee/creatfile</code>：进入到<code>home</code>文件夹下的<code>sharplee</code>文件夹下的<code>creatfile</code>目录；<br>（3）<code>cd ..</code>：回退到上一个目录，直接cd进入默认目录。特别说明：cd 空格 .. 才可以。</p>
<h3 id="2、pwd（显示当前所在的目录路径）"><a href="#2、pwd（显示当前所在的目录路径）" class="headerlink" title="2、pwd（显示当前所在的目录路径）"></a>2、pwd（显示当前所在的目录路径）</h3><h3 id="3、ls（列出当前目录的所有文件）"><a href="#3、ls（列出当前目录的所有文件）" class="headerlink" title="3、ls（列出当前目录的所有文件）"></a>3、ls（列出当前目录的所有文件）</h3><p>（1）<code>ls</code>：列出当前目录中的所有文件；<br>（2）<code>ll</code>：比<code>ls</code>列出的内容更详细；<br>（3）<code>ls -a</code>：列出当前目录中所有文件包括隐藏文件；<br>（4）<code>ls -l</code>：同<code>ll</code>。</p>
<h3 id="4、touch（新建文件）"><a href="#4、touch（新建文件）" class="headerlink" title="4、touch（新建文件）"></a>4、touch（新建文件）</h3><p><code>touch</code>：新建一个文件，如：<code>touch index.js</code>，就会在当前目录下新建一个index.js文件。（如果文件已经存在，则只会修改文件的当前时间）</p>
<h3 id="5、rm（删除文件）"><a href="#5、rm（删除文件）" class="headerlink" title="5、rm（删除文件）"></a>5、rm（删除文件）</h3><p><strong>常用后缀选项：</strong>  </p>
<ul>
<li><code>-f</code>：强制删除文件，忽略不存在的文件和不可写的文件，不会出现警告提示；  </li>
<li><code>-d(--dir)</code>：删除空目录；  </li>
<li><code>-i</code>：交互式地询问是否删除每个文件，如果要删除多个文件，rm将询问是否确认删除每个文件；  </li>
<li><code>-I</code>：在删除超过三个文件或者递归删除前要求确认，此选项比-i 提示内容更少，但同样可以阻止大多数错误发生；  </li>
<li><code>-r</code>：递归地删除目录及其内容，用于删除非空目录；  </li>
<li><code>-v</code>：显示详细输出，列出每个删除的文件名；</li>
</ul>
<p><strong>使用例子：</strong><br>（1）<code>rm index.js</code>：删除index.js文件；<br>（2）<code>rm index1.js index2.js</code>：删除index1.js和index2.js文件；<br>（3）<code>rm -f index.js</code>：强制删除index.js文件；<br>（4）<code>rm -r src</code>：删除src目录（特别说明：一般不要使用rm，特别是rm -rf 命令，一定不能使用）；<br>（5）<code>rmdir test</code>：删除test文件夹；<br>（6）<code>rmdir -p test/test/test.txt</code>：递归删除。</p>
<h3 id="6、mkdir（新建目录）"><a href="#6、mkdir（新建目录）" class="headerlink" title="6、mkdir（新建目录）"></a>6、mkdir（新建目录）</h3><p>（1）<code>mkdir test</code>：新建test文件夹；<br>（2）<code>mkdir -p test/test/test</code>：递归创建。</p>
<h3 id="7、mv（移动文件）"><a href="#7、mv（移动文件）" class="headerlink" title="7、mv（移动文件）"></a>7、mv（移动文件）</h3><p><strong>常用后缀选项：</strong>  </p>
<ul>
<li><code>-b</code>：当目标文件存在，先进行备份在覆盖；</li>
<li><code>-f</code>：强制覆盖，如果目标文件已经存在，则不询问，直接强制覆盖；</li>
<li><code>-i</code>：交互移动，如果目标文件已经存在，则会询问用户是否覆盖（默认选项）；</li>
<li><code>-n</code>：如果目标文件已经存在，则不会覆盖移动，而且不询问用户；</li>
<li><code>-v</code>：显示文件或目录的移动过程；</li>
<li><code>-u</code>：若目标文件已经存在，但两者相比，源文件更新，则会对目标文件进行升级；</li>
</ul>
<p><strong>常用示例：</strong><br>（1）<code>mv index.js src/</code>：将index.js移动到src目录下（文件夹用 文件夹名 + <code>/</code>的方式表示）；<br>（2）<code>mv -b a/aa b/</code>：将a目录下的aa文件移动到b目录中，因为b目录已经存在aa文件，所以b目录先备份一份b目录下的aa文件<code>aa~</code>，再将a目录下的aa文件移动到b目录；<br>（3）<code>mv -f index.js b/</code>：强制覆盖，不管b目录下有没有index.js，都将index.js移动到b目录下，如果b目录存在index.js，就覆盖；<br>（4）<code>mv a b</code>：将a文件名改为b；  </p>
<h3 id="8、reset（初始化终端）"><a href="#8、reset（初始化终端）" class="headerlink" title="8、reset（初始化终端）"></a>8、reset（初始化终端）</h3><p><code>reset</code>：初始化终端；</p>
<h3 id="9、clear（清屏）"><a href="#9、clear（清屏）" class="headerlink" title="9、clear（清屏）"></a>9、clear（清屏）</h3><p><code>clear</code>：清屏；</p>
<h3 id="10、history（查看命令历史）"><a href="#10、history（查看命令历史）" class="headerlink" title="10、history（查看命令历史）"></a>10、history（查看命令历史）</h3><p><code>history</code>：查看命令历史；</p>
<h3 id="11、help（帮助）"><a href="#11、help（帮助）" class="headerlink" title="11、help（帮助）"></a>11、help（帮助）</h3><p><code>help</code>：帮助；</p>
<h3 id="12、exit（退出）"><a href="#12、exit（退出）" class="headerlink" title="12、exit（退出）"></a>12、exit（退出）</h3><p><code>exit</code>：帮助；</p>
<h3 id="13、-（注释）"><a href="#13、-（注释）" class="headerlink" title="13、#（注释）"></a>13、#（注释）</h3><h3 id="14、cat（查看文件内容）"><a href="#14、cat（查看文件内容）" class="headerlink" title="14、cat（查看文件内容）"></a>14、cat（查看文件内容）</h3><p>（1）<code>cat test.txt</code>：查看test文件的内容；<br>（2）<code>cat &gt; test.txt</code>：新建一个test文件，按下回车之后，向test文件里输出保存内容，在按<code>ctr + d</code>来保存退出；<br>（3）<code>cat test1.txt test2.txt</code>：查看test1和test2文件的内容；<br>（4）<code>cat test1.txt &gt; test2.txt</code>：将test1文件内容备份到test2文件中；<br>（5）<code>cat test1.txt test2.txt &gt; test3.txt</code>：将test1和test2文件内容备份到test3文件中；<br>（6）<code>tac test.txt</code>：将test文件内容反过来查看；<br>（7）<code>cat test1.txt &gt;&gt; test2.txt</code>：将test1文件内容添加到test2文件内容末尾；<br>（8）<code>cat &gt;&gt; test.txt</code>：在终端输入内容到test.txt末尾，按<code>ctr + d</code>来保存退出；<br>（9）<code>cat -n test.txt</code>：查看test文件内容，并显示行号；<br>（10）<code>cat /etc/os-release</code>：查看当前系统版本；</p>
<h3 id="15、查看系统内核"><a href="#15、查看系统内核" class="headerlink" title="15、查看系统内核"></a>15、查看系统内核</h3><p><code>uname -r</code>：查看系统内核；</p>
<h3 id="16、将数据从内存同步到硬盘"><a href="#16、将数据从内存同步到硬盘" class="headerlink" title="16、将数据从内存同步到硬盘"></a>16、将数据从内存同步到硬盘</h3><p><code>sync</code>：将数据从内存同步到硬盘；</p>
<h3 id="17、关机"><a href="#17、关机" class="headerlink" title="17、关机"></a>17、关机</h3><p>（1）<code>half</code>：立刻关机；<br>（2）<code>shutdown -h now</code>：立刻关机；<br>（3）<code>shutdown -h 10</code>：10分钟后关机；<br>（4）<code>shutdown -h 20:30</code>：20：30的时候关机；<br>（5）<code>shutdown -h +30 &#39;系统将在30分钟后关机&#39;</code>：30分钟后关机，同时向在线用户发送警告消息；</p>
<h3 id="18、重启"><a href="#18、重启" class="headerlink" title="18、重启"></a>18、重启</h3><p><code>reboot</code>：重启；</p>
<h3 id="19、cp（复制粘贴）"><a href="#19、cp（复制粘贴）" class="headerlink" title="19、cp（复制粘贴）"></a>19、cp（复制粘贴）</h3><p><code>cp 【复制的文件名】 【要粘贴到的文件夹】</code></p>
<h3 id="20、chmod（更改文件权限）"><a href="#20、chmod（更改文件权限）" class="headerlink" title="20、chmod（更改文件权限）"></a>20、chmod（更改文件权限）</h3><p><code>chmod 777 文件名</code>：更改文件权限为777，相关知识查看下面第三大点；</p>
<h3 id="21、man（查看命令使用文档）"><a href="#21、man（查看命令使用文档）" class="headerlink" title="21、man（查看命令使用文档）"></a>21、man（查看命令使用文档）</h3><p><code>man cd</code>：查看cd命令的使用文档；</p>
<h3 id="22、vim（修改文件内容）"><a href="#22、vim（修改文件内容）" class="headerlink" title="22、vim（修改文件内容）"></a>22、vim（修改文件内容）</h3><p><code>vim test.txt</code>：修改test文件内容，进入文件后按键盘中的<code>i</code>或者<code>Insert</code>键，就可以输入内容了，然后按<code>Esc</code>退出输入模式，敲入<code>:wq</code>表示保存退出，<code>:q</code>仅退出不保存，显示行号：<code>:set nu</code>，不显示行号：<code>set nonu</code>；</p>
<h3 id="23、hostname（查看主机名）"><a href="#23、hostname（查看主机名）" class="headerlink" title="23、hostname（查看主机名）"></a>23、hostname（查看主机名）</h3><p><code>hostname 【要修改成的新主机名】</code>：修改主机名；</p>
<h3 id="24、ps（查看当前系统正在运行的进程）"><a href="#24、ps（查看当前系统正在运行的进程）" class="headerlink" title="24、ps（查看当前系统正在运行的进程）"></a>24、ps（查看当前系统正在运行的进程）</h3><p>（1）<code>ps -a</code>：显示当前终端运行的所有进程<br>（2）<code>ps -u</code>：查看当前以用户登录的所有进程<br>（3）<code>ps -x</code>：显示后台运行进程的参数<br>（4）<code>ps -aux</code>：查看所有的进程<br>（5）<code>grep</code>：查找文件中符合条件的信息<br>（6）<code>ps -aux|grep mysql</code>：查找所有进程，过滤出mysql进程（查找出mysql进程）<br>（7）<code>rpm -qa | grep postgres</code>：查看当前服务器是否已安装PostgreSQL  </p>
<h3 id="25、结束进程"><a href="#25、结束进程" class="headerlink" title="25、结束进程"></a>25、结束进程</h3><p><code>kill -9 【进程id】</code>：结束进程；</p>
<h3 id="26、解压压缩包"><a href="#26、解压压缩包" class="headerlink" title="26、解压压缩包"></a>26、解压压缩包</h3><p><code>tar -zxvf 【压缩包名】</code>：解压压缩包；</p>
<h3 id="27、查看进程状态"><a href="#27、查看进程状态" class="headerlink" title="27、查看进程状态"></a>27、查看进程状态</h3><p><code>systemctl status postgresql.service</code>：查看postgresql服务器进程状态；</p>
<h3 id="28、查看当前登录的用户名"><a href="#28、查看当前登录的用户名" class="headerlink" title="28、查看当前登录的用户名"></a>28、查看当前登录的用户名</h3><p><code>whoami</code>：查看当前登录的用户名；</p>
<h3 id="29、查看系统中的所有用户"><a href="#29、查看系统中的所有用户" class="headerlink" title="29、查看系统中的所有用户"></a>29、查看系统中的所有用户</h3><p>（1）<code>cat /etc/passwd</code>：查看系统中的所有用户；<br>（2）<code>getent passwd</code>：该命令将显示系统中所有用户的用户名、用户ID、用户所属组ID、用户家目录等信息；  </p>
<h3 id="30、启动、停止服务"><a href="#30、启动、停止服务" class="headerlink" title="30、启动、停止服务"></a>30、启动、停止服务</h3><p>（1）启动某个服务：<code>systemctl start 【服务名】</code><br>（2）停止某个服务：<code>systemctl stop 【服务名】</code><br>（3）重启某个服务：<code>systemctl restart 【服务名】</code><br>（4）查看一个服务的状态：<code>systemctl status 【服务名】</code><br>（5）开机时启用一个服务：<code>systemctl enable 【服务名】</code><br>（6）开机时关闭一个服务：<code>systemctl disable 【服务名】</code><br>（7）查看服务是否开机启动：<code>systemctl is-enabled 【服务名】</code>  </p>
<h3 id="31、防火墙端口"><a href="#31、防火墙端口" class="headerlink" title="31、防火墙端口"></a>31、防火墙端口</h3><p>（1）增加防火墙端口号（端口范围 4400-4600）：<code>firewall-cmd --zone=public --add-port=4400-4600/udp --permanen</code><br>（2）指定端口 4369：<code>firewall-cmd --zone=public --add-port=4369/udp --permanen</code>，出现：<code>Warning: ALREADY_ENABLED: 4369:tcp</code>（说明4369端口通过成功）<br>（3）关闭指定端口：<code>firewall-cmd --zone=public --remove-port=80/tcp --permanent</code><br>（4）查看通过的端口：<code>firewall-cmd --zone=public --list-ports</code></p>
<br/>

<hr>
<br/>

<h1 id="三、权限说明"><a href="#三、权限说明" class="headerlink" title="三、权限说明"></a>三、权限说明</h1><img src="/2023/10/11/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Linux1.jpg" class="">
<p>1、<code>drwxr-xr-x</code>说明：<br>（1）第一个字母表示：<code>d 文件夹，- 文件，l 文档</code><br>（2）后面9个字母，三个为一组<code>rwx</code>，<code>r</code>可读，<code>w</code>可写，<code>x</code>可执行，<code>-</code>没有此权限<br>（3）<code>r</code>：4，<code>w</code>：2，<code>x</code>：1</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA 2020.3.3 x64激活方法</title>
    <url>/2023/09/25/IntelliJ-IDEA-2020-3-3-x64%E6%BF%80%E6%B4%BB%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<hr>
<h1 id="一、激活工具和注册码"><a href="#一、激活工具和注册码" class="headerlink" title="一、激活工具和注册码"></a>一、激活工具和注册码</h1><p>链接：<a href="https://pan.baidu.com/s/1Kd9DgXzE3O_dU0g6akex6g">https://pan.baidu.com/s/1Kd9DgXzE3O_dU0g6akex6g</a><br>提取码：eool<br>软件请到官网下载2020.3版本：<br><a href="https://www.jetbrains.com/idea/download/#section=windows">https://www.jetbrains.com/idea/download/#section=windows</a><br><strong>注意：<br>Ultimate版本：用于web和企业开发<br>Community版本：用于JVM和Android开发</strong><br><br/></p>
<hr>
<h1 id="二、激活方法"><a href="#二、激活方法" class="headerlink" title="二、激活方法"></a>二、激活方法</h1><p>链接地址：<br><a href="https://www.exception.site/essay/how-to-free-use-idea-202021-by-resigter-code">https://www.exception.site/essay/how-to-free-use-idea-202021-by-resigter-code</a><br><br/></p>
<hr>
<h1 id="三、（以防上面的地址失效弄的激活步骤）"><a href="#三、（以防上面的地址失效弄的激活步骤）" class="headerlink" title="三、（以防上面的地址失效弄的激活步骤）"></a>三、（以防上面的地址失效弄的激活步骤）</h1><p>1.打开已经安装好的 IDEA, 我们选择 30 天免费试用。<img src="/2023/09/25/IntelliJ-IDEA-2020-3-3-x64%E6%BF%80%E6%B4%BB%E6%96%B9%E6%B3%95/1.jpg" class=""><br><strong>(注意，如果没有弹出上面的界面，可执行重置30天试用期脚本，脚本网盘地址下面可获取)</strong><img src="/2023/09/25/IntelliJ-IDEA-2020-3-3-x64%E6%BF%80%E6%B4%BB%E6%96%B9%E6%B3%95/2.jpg" class=""><br><br/><br>2. 进入 IDEA 中， 先随便建个 Java 工程， 然后将网盘中最新的 IDEA 破解补丁 BetterIntelliJ.zip拖入 IDEA 界面中，如下图所示：<img src="/2023/09/25/IntelliJ-IDEA-2020-3-3-x64%E6%BF%80%E6%B4%BB%E6%96%B9%E6%B3%95/3.jpg" class=""><br>   <strong>(注意:<br>   zip 补丁包无需解压 ~ 无需解压 ~ 无需解压 ~<br>   激活后补丁不要移动，不要删除~<br>   补丁安装成功后，需要输入激活补丁key.txt里面的激活码，两个步骤缺一不可，否则会激活失败~)</strong><br><br/><br>3. 如果拖动的方式不成功，还可以通过磁盘安装插件，点击菜单 File -&gt; Settings -&gt; Install Plugin From Disk，图文步骤如下：<img src="/2023/09/25/IntelliJ-IDEA-2020-3-3-x64%E6%BF%80%E6%B4%BB%E6%96%B9%E6%B3%95/4.jpg" class=""><br>   <strong>(注意：安装成功后一定要重启 IDEA !!!<br>   注意：安装成功后一定要重启 IDEA !!!<br>   注意：安装成功后一定要重启 IDEA !!!)<br>   PS: 如果重启一次还是提示 key is invaild, 请再重启一次试试 ！本人就是第一次没效果，再重启一次，再输入 激活补丁key.txt里面的激活码就ok了。</strong><br><br/><br>4. 检查插件是否安装成功<br>   插件安装完成后，建议检查一下是否安装成功，点击菜单：Help -&gt; Edit Custom VM Options…，如果成功，会自动生成<br>   -javaagent:C:\Users\Public.BetterIntelliJ\BetterIntelliJ-版本号.jar<br>   <strong>（如果有其它多余的-javaagent，请删除）</strong><br><br/><br>5. 输入 激活补丁key.txt里面的激活码<br>   重启成功后，点击菜单 Help -&gt; Register -&gt; Add New License ， 如下图所示:<img src="/2023/09/25/IntelliJ-IDEA-2020-3-3-x64%E6%BF%80%E6%B4%BB%E6%96%B9%E6%B3%95/5.jpg" class=""><br>   复制网盘中的 激活补丁key.txt文件中的激活码，拷贝到输入框中，然后点击 Activate 按钮激活：<img src="/2023/09/25/IntelliJ-IDEA-2020-3-3-x64%E6%BF%80%E6%B4%BB%E6%96%B9%E6%B3%95/6.jpg" class=""><br><br/><br>到这里， IDEA 就已经激活成功了 ~</p>
]]></content>
      <categories>
        <category>IntelliJ IDEA 2020.3.3 x64激活方法</category>
      </categories>
      <tags>
        <tag>IntelliJ IDEA 2020.3.3 x64激活方法</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql数据库学习笔记</title>
    <url>/2023/10/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<hr>
<h1 id="一、Mysql操作命令"><a href="#一、Mysql操作命令" class="headerlink" title="一、Mysql操作命令"></a>一、Mysql操作命令</h1><h6 id="1、连接mysql"><a href="#1、连接mysql" class="headerlink" title="1、连接mysql"></a>1、连接mysql</h6><p>在Dos（cmd）命令中执行：<code>mysql -u 【mysql用户名】 -p</code>，然后输入密码，比如：<code>mysql -u root -p root</code>。</p>
<h6 id="2、查看数据库"><a href="#2、查看数据库" class="headerlink" title="2、查看数据库"></a>2、查看数据库</h6><p>连接mysql之后，执行命令：<code>show databases;</code>（别忘记分号），查看数据库有几个。</p>
<h6 id="3、选择要使用哪个数据库"><a href="#3、选择要使用哪个数据库" class="headerlink" title="3、选择要使用哪个数据库"></a>3、选择要使用哪个数据库</h6><p><code>use test;</code>：选择使用test数据库。</p>
<h6 id="4、查看数据库里有几个表"><a href="#4、查看数据库里有几个表" class="headerlink" title="4、查看数据库里有几个表"></a>4、查看数据库里有几个表</h6><p><code>show tables;</code>：查看tables数据库有几个表。</p>
<h6 id="5、创建表"><a href="#5、创建表" class="headerlink" title="5、创建表"></a>5、创建表</h6><p>在mysql命令行输入：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> student(</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span>id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;注释&#x27;</span>,</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span>name <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span>sex <span class="type">char</span>(<span class="number">1</span>));</span><br></pre></td></tr></table></figure>

<h6 id="6、查看表结构"><a href="#6、查看表结构" class="headerlink" title="6、查看表结构"></a>6、查看表结构</h6><p><code>desc student;</code>：查看student表结构。</p>
<h6 id="7、设置中文乱码问题"><a href="#7、设置中文乱码问题" class="headerlink" title="7、设置中文乱码问题"></a>7、设置中文乱码问题</h6><p>1、查看编码<br><code>show variables like &#39;char%&#39;;</code><br>2、更改编码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> character_set_results<span class="operator">=</span>gbk; #结果显示乱码问题</span><br><span class="line"><span class="keyword">set</span> character_set_client<span class="operator">=</span>gbk; #数据写入报错</span><br></pre></td></tr></table></figure>

<h6 id="8、插入多个数据"><a href="#8、插入多个数据" class="headerlink" title="8、插入多个数据"></a>8、插入多个数据</h6><p><code>insert into student(name,sex) values (&#39;张三&#39;,&#39;男&#39;),(&#39;李四&#39;,&#39;女&#39;);</code></p>
<h6 id="9、删除数据"><a href="#9、删除数据" class="headerlink" title="9、删除数据"></a>9、删除数据</h6><p><code>delete from student where name = &#39;张三&#39;;</code></p>
<h6 id="10、更改数据"><a href="#10、更改数据" class="headerlink" title="10、更改数据"></a>10、更改数据</h6><p><code>update student set name=&#39;张三&#39; where name=&#39;李四&#39;;</code>：把李四改成张三。</p>
<h6 id="11、删除表"><a href="#11、删除表" class="headerlink" title="11、删除表"></a>11、删除表</h6><p><code>drop table student;</code></p>
<h6 id="12、表中新增一列属性"><a href="#12、表中新增一列属性" class="headerlink" title="12、表中新增一列属性"></a>12、表中新增一列属性</h6><p>语法：<code>alter table 【表名】 add 【列名】 【列类型】;</code><br>例子：<code>alter table table_name add col_name char(5);</code>（向table_name表新增一列col_name属性，类型为char）<br>如果我们希望添加在指定的一列，可以用：<br><code>alter table table_name add column_name varchar(255) not null after name;</code><br>注意，上面这个命令的意思是说添加新列到某一列后面。如果想添加到第一列的话，可以用：<br><code>alter table table_name add column column_name varchar(255) not null first;</code></p>
<h6 id="13、添加外键"><a href="#13、添加外键" class="headerlink" title="13、添加外键"></a>13、添加外键</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 从表名 <span class="operator">/</span><span class="operator">/</span>student</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>   <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> (main_id_con)<span class="operator">/</span><span class="operator">/</span>外键 student里的tid</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>   <span class="keyword">FOREIGN</span> KEY (main_id)<span class="operator">/</span><span class="operator">/</span>从表外键字段(tid)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>   <span class="keyword">REFERENCES</span>  主表(id); <span class="operator">/</span><span class="operator">/</span>teacher</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> </span><br></pre></td></tr></table></figure>

<h6 id="14、多表查询"><a href="#14、多表查询" class="headerlink" title="14、多表查询"></a>14、多表查询</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="keyword">distinct</span> t1.AGENT_ZONE <span class="keyword">as</span> agentzone,   #<span class="keyword">distinct</span> : 去重</span><br><span class="line"><span class="built_in">count</span>(<span class="keyword">distinct</span> t1.G_CORP_NAME) <span class="keyword">as</span> unitcount,</span><br><span class="line"><span class="built_in">count</span>(<span class="keyword">distinct</span> t1.BATCHNO) <span class="keyword">as</span> batchno,</span><br><span class="line"><span class="built_in">count</span>(<span class="keyword">case</span> t1.GBA_BANK_F <span class="keyword">when</span> <span class="string">&#x27;2&#x27;</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">end</span>) <span class="keyword">as</span> bpnums,  </span><br><span class="line">#<span class="keyword">case</span> <span class="keyword">when</span>:当t1.GAB_BANK_F为<span class="number">2</span>的时候等于<span class="number">1</span></span><br><span class="line"><span class="built_in">count</span>(<span class="keyword">case</span> t1.GAB_BANK_F <span class="keyword">when</span> <span class="string">&#x27;2&#x27;</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">end</span>) <span class="keyword">as</span> bcount,</span><br><span class="line">#<span class="keyword">case</span> <span class="keyword">when</span>:当t1.GAB_BANK_F为<span class="number">2</span>的时候等于G_AMOUNT 的值</span><br><span class="line"><span class="built_in">sum</span>(<span class="keyword">case</span> t1.GAB_BANK_F <span class="keyword">when</span> <span class="string">&#x27;2&#x27;</span> <span class="keyword">then</span> t1.G_AMOUNT <span class="keyword">end</span>) <span class="keyword">as</span> bamount,</span><br><span class="line"><span class="built_in">count</span>(<span class="keyword">case</span> t1.GBA_BANK_F <span class="keyword">when</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">end</span>) <span class="keyword">as</span> tpnums,</span><br><span class="line"><span class="built_in">count</span>(<span class="keyword">case</span> t1.GAB_BANK_F <span class="keyword">when</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">end</span>) <span class="keyword">as</span> tcount,</span><br><span class="line"><span class="built_in">sum</span>(<span class="keyword">case</span> t1.GAB_BANK_F <span class="keyword">when</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">then</span> t1.G_AMOUNT <span class="keyword">end</span>) <span class="keyword">as</span> tamount</span><br><span class="line"><span class="keyword">from</span> GJT_WAGES_DETAIL t1</span><br><span class="line"># <span class="keyword">left</span> join...on ：连接查询，即使右表中没有匹配，也从左表返回所有的行</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> GJT_WAGES_SUMMARY t2 </span><br><span class="line"><span class="keyword">on</span> t1.BATCHNO <span class="operator">=</span> t2.BATCHNO</span><br><span class="line"><span class="keyword">where</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="keyword">and</span> WORKDATE <span class="keyword">between</span> <span class="string">&#x27;2020-04-11&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2021-09-12&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> t1.AGENT_ZONE # 以t1.AGENT_ZONE分组  ，分组后如果还要使用<span class="keyword">where</span>条件，就用<span class="keyword">having</span>代替<span class="keyword">where</span></span><br></pre></td></tr></table></figure>

<h6 id="15、修改某一列的字段属性"><a href="#15、修改某一列的字段属性" class="headerlink" title="15、修改某一列的字段属性"></a>15、修改某一列的字段属性</h6><p><code>alter table user modify column sex varchar(50);</code></p>
<h6 id="16、创建一个新表和某一旧表一样"><a href="#16、创建一个新表和某一旧表一样" class="headerlink" title="16、创建一个新表和某一旧表一样"></a>16、创建一个新表和某一旧表一样</h6><p><code>create table 【新表名】 like 【旧表名】;</code></p>
<h6 id="17、修改某一列的列名"><a href="#17、修改某一列的列名" class="headerlink" title="17、修改某一列的列名"></a>17、修改某一列的列名</h6><p><code>alter table 【表名】 change 【旧列名】 【新列名】 【新列名类型】;</code></p>
<h6 id="18、删除某一列"><a href="#18、删除某一列" class="headerlink" title="18、删除某一列"></a>18、删除某一列</h6><p><code>alter table 【表名】 drop 【列名】;</code></p>
<h6 id="19、修改表名"><a href="#19、修改表名" class="headerlink" title="19、修改表名"></a>19、修改表名</h6><p><code>rename table 【旧表名】 to 【新表名】;</code></p>
<h6 id="20、蠕虫复制"><a href="#20、蠕虫复制" class="headerlink" title="20、蠕虫复制"></a>20、蠕虫复制</h6><p><code>insert into 【新表】 select * from 【旧表】;</code><br>如果只想复制某几个字段：<br><code>insert into 【新表】(name,sex) select (name,sex) from 【旧表】;</code></p>
<h6 id="21、单个升序、降序查询"><a href="#21、单个升序、降序查询" class="headerlink" title="21、单个升序、降序查询"></a>21、单个升序、降序查询</h6><p><code>select * from 【表名】 where 【查询条件】 order by 【根据什么字段】 【ASC/DESC】;</code>(ASC：升序。DESC：降序)</p>
<h6 id="22、多个字段升序、降序查询"><a href="#22、多个字段升序、降序查询" class="headerlink" title="22、多个字段升序、降序查询"></a>22、多个字段升序、降序查询</h6><p><code>select * from 【表名】 where 【查询条件】 order by 【字段1】 【ASC/DESC】,【字段2】 【ASC/DESC】;</code>（ASC：升序。DESC：降序）<br>（1）想要将null值的数据往后就：（默认）<br><code>select * from 【表名】 where 【查询条件】 order by 【字段】 【ASC/DESC】 nulls last;</code><br>（2）想要将null值的数据往前排就：<br><code>select * from 【表名】 where 【查询条件】 order by 【字段】 【ASC/DESC】 nulls first;</code></p>
<h6 id="23、分页"><a href="#23、分页" class="headerlink" title="23、分页"></a>23、分页</h6><p><code>limit</code>：跳过几条，当前页显示几条。<br>例如：<br>（1）<code>limit 0,5</code>：跳过0条，从第1条数据开始，显示5条，当前页面显示5条，相当于第一页，查找了5条；<br>（2）<code>limit 5,5</code>：跳过5条，从第6条数据开始，显示5条，当前页面显示5条，相当于第二页，查找了5条；<br>（3）<code>limit 2,5</code>：跳过2条，从第3条数据开始，显示5条，查找出第3、4、5、6、7五条数据显示在当前页面。</p>
<h6 id="24、连接查询"><a href="#24、连接查询" class="headerlink" title="24、连接查询"></a>24、连接查询</h6><p>1、<code>left join...on...</code>：表1左连接表2，以左为主，表示以表1为主，关联上表2的数据；<br>2、<code>right join...on...</code>：右连接查询，和左连接查询相反；<br>3、<code>inner join...on...</code>：内连接查询，表示以两个表的交集为主，查询出来的数据是两个表交集的部分，其余没有关联的就不额外显示。<br><a href="https://segmentfault.com/a/1190000017369618">具体使用方法请点击</a></p>
<h6 id="25、将数据库中的两个字段拼接"><a href="#25、将数据库中的两个字段拼接" class="headerlink" title="25、将数据库中的两个字段拼接"></a>25、将数据库中的两个字段拼接</h6><p><code>select id,concat(concat(student_no,&quot;--&quot;),name) as name,class_id from student;</code>：将学生的学号和姓名拼接起来表示（001–小明）。</p>
<h6 id="26、视图"><a href="#26、视图" class="headerlink" title="26、视图"></a>26、视图</h6><p><strong>说明：</strong>对视图进行增删改操作，也会同步到表，只不过视图中没有的属性列，对应表中的属性列值为null。<br>1、创建视图<br><code>create or replace view stu_view as select id,name from student where id &lt;= 10;</code>：创建一个视图，如果已经存在视图就替换覆盖，从学生表查询id小于等于10的所有学生作为视图中的数据。<br>2、修改视图<br><code>create or replace view stu_view as select id,name from student where id &lt;= 10;</code><br>或者<br><code>alter view stu_view as select id,name from student where id &lt;= 10;</code><br>3、删除视图<br><code>drop view if exists view_stu;</code><br>4、视图检查<br><strong>说明：</strong>如果在创建视图的时候加上 with cascaded（或者是local） check option，那么对视图进行增、删、改操作的时候，必须满足where条件才能成功，不然就失败。<br>（1）<code>cascaded</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 例子一</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">view</span> stu_view <span class="keyword">as</span> <span class="keyword">select</span> id,name <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">&lt;=</span> <span class="number">10</span> <span class="keyword">with</span> <span class="keyword">cascaded</span> <span class="keyword">check</span> option;</span><br><span class="line"># 成功的是：<span class="keyword">insert</span> <span class="keyword">into</span> stu_view <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;zxc&#x27;</span>);</span><br><span class="line"># 失败的是：<span class="keyword">insert</span> <span class="keyword">into</span> stu_view <span class="keyword">values</span>(<span class="number">15</span>,<span class="string">&#x27;zxc&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 例子二  </span><br><span class="line"># 创建视图一</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">view</span> stu_view_1 <span class="keyword">as</span> <span class="keyword">select</span> id,name <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">&lt;=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"># 创建试图二</span><br><span class="line"># 当视图二根据视图一所创建的，我们再进行增、删、改操作时，</span><br><span class="line"># 视图一也会默认加上 <span class="keyword">with</span> <span class="keyword">cascaded</span> <span class="keyword">check</span> option来进行视图检查。</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">view</span> stu_view_2 <span class="keyword">as</span> <span class="keyword">select</span> id,name <span class="keyword">from</span> stu_view_1 <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">10</span> <span class="keyword">with</span> <span class="keyword">cascaded</span> <span class="keyword">check</span> option;</span><br><span class="line"></span><br><span class="line"># 在视图二中，<span class="number">25</span>大于<span class="number">10</span>可以插入，但是在视图一中，<span class="number">25</span>不小于等于<span class="number">20</span>，所以插入失败。</span><br><span class="line"># 成功的是：<span class="keyword">insert</span> <span class="keyword">into</span> stu_view_2 <span class="keyword">values</span>(<span class="number">25</span>,<span class="string">&#x27;zxc&#x27;</span>); </span><br><span class="line"></span><br><span class="line"># 在视图二中，<span class="number">15</span>大于<span class="number">10</span>可以插入，在视图一中，<span class="number">15</span>小于<span class="number">20</span>，所以插入成功。</span><br><span class="line"># 失败的是：<span class="keyword">insert</span> <span class="keyword">into</span> stu_view_2 <span class="keyword">values</span>(<span class="number">15</span>,<span class="string">&#x27;zxc&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>（2）<code>local</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 例子一</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">view</span> stu_view <span class="keyword">as</span> <span class="keyword">select</span> id,name <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">&lt;=</span> <span class="number">10</span> <span class="keyword">with</span> <span class="keyword">local</span> <span class="keyword">check</span> option;</span><br><span class="line"># 成功的是：<span class="keyword">insert</span> <span class="keyword">into</span> stu_view <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;zxc&#x27;</span>);</span><br><span class="line"># 失败的是：<span class="keyword">insert</span> <span class="keyword">into</span> stu_view <span class="keyword">values</span>(<span class="number">15</span>,<span class="string">&#x27;zxc&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 例子二</span><br><span class="line"># 创建视图一</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">view</span> stu_view_1 <span class="keyword">as</span> <span class="keyword">select</span> id,name <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">&lt;=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"># 创建视图二</span><br><span class="line"># 当视图二根据视图一所创建的，我们再进行增、删、改操作时，视图一按它自己所规定的来进行。</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">view</span> stu_view_2 <span class="keyword">as</span> <span class="keyword">select</span> id,name <span class="keyword">from</span> stu_view_1 <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">10</span> <span class="keyword">with</span> <span class="keyword">cascaded</span> <span class="keyword">check</span> option;</span><br><span class="line"></span><br><span class="line"># 在视图二中，<span class="number">25</span>大于<span class="number">10</span>可以插入，在视图一中，视图一没有设置视图检查，所以插入成功。</span><br><span class="line"># 成功的是：<span class="keyword">insert</span> <span class="keyword">into</span> stu_view_2 <span class="keyword">values</span>(<span class="number">25</span>,<span class="string">&#x27;zxc&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 在视图二中，<span class="number">8</span>不大于<span class="number">10</span>，所以插入失败。 </span><br><span class="line"># 失败的是：<span class="keyword">insert</span> <span class="keyword">into</span> stu_view_2 <span class="keyword">values</span>(<span class="number">8</span>,<span class="string">&#x27;zxc&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>5、视图更新<br>要使视图可更新，视图中的行与基础表中的行之间必须存在一对一的关系。如果视图包含以下任何一项，则该视图不可更新：<br>（1）聚合函数或窗口函数（sum、min、max、count等）；<br>（2）distinct；<br>（3）group by；<br>（4）having；<br>（5）union 或 unionall  </p>
<h6 id="27、存储过程"><a href="#27、存储过程" class="headerlink" title="27、存储过程"></a>27、存储过程</h6><p><strong>说明：</strong>存储过程是事先经过编译并存储在数据库中的一段SQL语句的集合，可以接收参数，也可以返回数据。（也就是数据库SQL语言层面的代码封装与重用）<br>1、创建  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> 存储过程名称([参数列表])</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="comment">-- SQL 语句</span></span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"># 例子：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p1()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> student;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong>在命令行中，执行创建存储过程的SQL时，需要通过关键字delimiter指定SQL语句的结束符。<br>例如：<br>（1）先在命令行执行：<code>delimiter $$</code>（这里表示使用$$符号为结束符）；<br>（2）然后再执行创建语句：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p1()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> student;</span><br><span class="line"><span class="keyword">end</span>$$</span><br></pre></td></tr></table></figure>
<p>2、调用  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">call</span> 名称([参数]);</span><br><span class="line"></span><br><span class="line"># 例子</span><br><span class="line"><span class="keyword">call</span> p1();</span><br></pre></td></tr></table></figure>
<p>3、查看  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询指定数据库的存储过程及状态信息</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.routines <span class="keyword">where</span> routine_schema <span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 查询某个存储过程的定义</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">procedure</span> 存储过程名称;</span><br></pre></td></tr></table></figure>
<p>4、删除  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> [if <span class="keyword">exists</span>] 存储过程名称;</span><br></pre></td></tr></table></figure>
<p>5、变量<br>（1）系统变量  </p>
<ol>
<li>查看系统变量<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查看所有系统变量，下面 [] 的意思是二选一</span><br><span class="line"><span class="keyword">show</span> [session <span class="operator">|</span> <span class="keyword">global</span>] variables;</span><br><span class="line"></span><br><span class="line"># 可以通过 <span class="keyword">like</span> 模糊匹配方式查找变量</span><br><span class="line"><span class="keyword">show</span> [session <span class="operator">|</span> <span class="keyword">global</span>] variables <span class="keyword">like</span> <span class="string">&#x27;xxx变量名&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 查看指定变量的值，两个@表示系统变量</span><br><span class="line"><span class="keyword">select</span> @@[session <span class="operator">|</span> <span class="keyword">global</span>] 系统变量名;</span><br></pre></td></tr></table></figure></li>
<li>设置系统变量<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 第一种方式</span><br><span class="line"><span class="keyword">set</span> [session <span class="operator">|</span> <span class="keyword">global</span>] 系统变量名 <span class="operator">=</span> 值;</span><br><span class="line"></span><br><span class="line"># 第二种方式</span><br><span class="line"><span class="keyword">set</span> @@[session <span class="operator">|</span> <span class="keyword">global</span>] 系统变量名 <span class="operator">=</span> 值;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>（2）用户自定义变量<br><strong>说明：</strong>不用提前声明，在用的时候直接用“@变量名” 使用就可以了。（两个@是系统变量，一个@是用户自定义变量）  </p>
<ol>
<li>赋值<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 使用<span class="keyword">set</span>赋值</span><br><span class="line"># 第一种方式</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@var_name</span> <span class="operator">=</span> expr [,<span class="variable">@var_name</span> <span class="operator">=</span> expr]...;</span><br><span class="line"># 第二种方式</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@var_name</span> :<span class="operator">=</span> expr [,<span class="variable">@var_name</span> :<span class="operator">=</span> expr]...;</span><br><span class="line"></span><br><span class="line"># 使用<span class="keyword">select</span>赋值</span><br><span class="line"># 第一种方式</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@var_name</span> :<span class="operator">=</span> expr [,<span class="variable">@var_name</span> :<span class="operator">=</span> expr]...;</span><br><span class="line"># 第二种方式</span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">into</span> <span class="variable">@var_name</span> <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure></li>
<li>使用<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="variable">@var_name</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>（3）局部变量<br><strong>说明：</strong>是根据需要定义在局部生效的变量，访问之前，需要 declare 声明，可用作存储过程内的局部变量和输入参数，局部变量的范围是在其内声明的 begin…end 块。  </p>
<ol>
<li>声明<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 变量类型就是数据库字段类型</span><br><span class="line"><span class="keyword">declare</span> 变量名 变量类型;</span><br></pre></td></tr></table></figure></li>
<li>赋值<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> 变量名 <span class="operator">=</span> 值;</span><br><span class="line"><span class="keyword">set</span> 变量名 :<span class="operator">=</span> 值;</span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">into</span> 变量名 <span class="keyword">from</span> 表名...;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>6、<code>if</code>语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">if 条件 <span class="keyword">then</span></span><br><span class="line">    ......</span><br><span class="line">elseif 条件<span class="number">2</span> <span class="keyword">then</span>      <span class="comment">-- 可选</span></span><br><span class="line">    ......</span><br><span class="line"><span class="keyword">else</span>                   <span class="comment">-- 可选</span></span><br><span class="line">    ......</span><br><span class="line"><span class="keyword">end</span> if;</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 根据定义的分数score变量，判定当前分数对应的分数等级</span><br><span class="line"># score <span class="operator">&gt;=</span> <span class="number">85</span>分，等级为优秀</span><br><span class="line"># score <span class="operator">&gt;=</span> <span class="number">60</span>分且 score <span class="operator">&lt;</span> <span class="number">85</span>分为及格</span><br><span class="line"># score <span class="operator">&lt;</span> <span class="number">60</span>分为不及格</span><br><span class="line"># 无参</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p1()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> score <span class="type">int</span> <span class="keyword">default</span> <span class="number">58</span>;</span><br><span class="line">    <span class="keyword">declare</span> <span class="keyword">result</span> varcher(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    if  score  <span class="operator">&gt;=</span>  <span class="number">85</span>  <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">set</span>  <span class="keyword">result</span>  :<span class="operator">=</span>  <span class="string">&#x27;优秀&#x27;</span>;</span><br><span class="line">    elseif  score  <span class="operator">&gt;=</span>  <span class="number">60</span>  <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">set</span>  <span class="keyword">result</span>  :<span class="operator">=</span>  <span class="string">&#x27;及格&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">set</span>  <span class="keyword">result</span>  :<span class="operator">=</span>  <span class="string">&#x27;不及格&#x27;</span>;</span><br><span class="line">    <span class="keyword">end</span> if;</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">result</span>; # 将结果查询出来</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"># 有参（是需要将结果返回）</span><br><span class="line"># 下面参数说明：<span class="keyword">in</span>表示入参，<span class="keyword">out</span>表示返回结果的参数</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p2(<span class="keyword">in</span> score <span class="type">int</span>,<span class="keyword">out</span> <span class="keyword">result</span> <span class="type">varchar</span>(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">    if  score  <span class="operator">&gt;=</span>  <span class="number">85</span>  <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">set</span>  <span class="keyword">result</span>  :<span class="operator">=</span>  <span class="string">&#x27;优秀&#x27;</span>;</span><br><span class="line">    elseif  score  <span class="operator">&gt;=</span>  <span class="number">60</span>  <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">set</span>  <span class="keyword">result</span>  :<span class="operator">=</span>  <span class="string">&#x27;及格&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">set</span>  <span class="keyword">result</span>  :<span class="operator">=</span>  <span class="string">&#x27;不及格&#x27;</span>;</span><br><span class="line">    <span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"># 调用，<span class="variable">@result</span>表示 用用户自定义变量接收p2的返回值</span><br><span class="line"><span class="keyword">call</span> p2(<span class="number">68</span>,<span class="variable">@result</span>);</span><br></pre></td></tr></table></figure>
<p>7、<code>case</code>语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 语法格式</span><br><span class="line"># 语法一，如果search_condition1成立，则执行statement_list1</span><br><span class="line"><span class="keyword">case</span></span><br><span class="line">    <span class="keyword">when</span> search_condition1 <span class="keyword">then</span> statement_list1</span><br><span class="line">    [<span class="keyword">when</span> search_condition2 <span class="keyword">then</span> statement_list2]...</span><br><span class="line">    [<span class="keyword">else</span> statement_list]</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">case</span>;</span><br><span class="line"></span><br><span class="line"># 语法二，说明：case_value是表达式，如果表达式的结果为 search_condition1，就执行 search_condition1后的 <span class="keyword">then</span></span><br><span class="line"><span class="keyword">case</span> case_value</span><br><span class="line">    <span class="keyword">when</span> search_condition1 <span class="keyword">then</span> statement_list1</span><br><span class="line">    [<span class="keyword">when</span> search_condition2 <span class="keyword">then</span> statement_list2]...</span><br><span class="line">    [<span class="keyword">else</span> statement_list]</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">case</span>;</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 根据传入的月份，判定月份所属的季节</span><br><span class="line"># <span class="number">1</span><span class="number">-3</span>月份，为第一季度</span><br><span class="line"># <span class="number">4</span><span class="number">-6</span>月份，为第二季度</span><br><span class="line"># <span class="number">7</span><span class="number">-9</span>月份，为第三季度</span><br><span class="line"># <span class="number">10</span><span class="number">-12</span>月份，为第四季度</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p1(<span class="keyword">in</span> <span class="keyword">month</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> <span class="keyword">result</span> <span class="type">varchar</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span></span><br><span class="line">        <span class="keyword">when</span> <span class="keyword">month</span> <span class="operator">&gt;=</span> <span class="number">1</span> <span class="keyword">and</span> <span class="keyword">month</span> <span class="operator">&lt;=</span> <span class="number">3</span> <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span> &quot;第一季度&quot;;</span><br><span class="line">        <span class="keyword">when</span> <span class="keyword">month</span> <span class="operator">&gt;=</span> <span class="number">4</span> <span class="keyword">and</span> <span class="keyword">month</span> <span class="operator">&lt;=</span> <span class="number">6</span> <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span> &quot;第二季度&quot;;</span><br><span class="line">        <span class="keyword">when</span> <span class="keyword">month</span> <span class="operator">&gt;=</span> <span class="number">7</span> <span class="keyword">and</span> <span class="keyword">month</span> <span class="operator">&lt;=</span> <span class="number">9</span> <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span> &quot;第三季度&quot;;</span><br><span class="line">        <span class="keyword">when</span> <span class="keyword">month</span> <span class="operator">&gt;=</span> <span class="number">10</span> <span class="keyword">and</span> <span class="keyword">month</span> <span class="operator">&lt;=</span> <span class="number">12</span> <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span> &quot;第四季度&quot;;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span> &quot;非法参数&quot;;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">case</span>;</span><br><span class="line">	# 查询展示，相当于println输出</span><br><span class="line">    <span class="keyword">select</span> concat(<span class="string">&#x27;您输入的月份为：&#x27;</span>,<span class="keyword">month</span>,<span class="string">&#x27;,所有的季度为：&#x27;</span>,<span class="keyword">result</span>);  </span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"># 调用</span><br><span class="line"><span class="keyword">call</span> p1(<span class="number">4</span>);</span><br></pre></td></tr></table></figure>
<p>8、<code>while</code>语法<br><strong>说明：</strong>满足条件后再执行循环体中的SQL语句。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 语法，先判定条件，如果条件为<span class="literal">true</span>，则执行逻辑，否则不执行</span><br><span class="line">while 条件 do</span><br><span class="line">    <span class="keyword">SQL</span>逻辑...</span><br><span class="line"><span class="keyword">end</span> while;</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 例子：计算从<span class="number">1</span>累加到n的值，n为传入的参数值。</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p(<span class="keyword">in</span> n <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> total <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">    while n <span class="operator">&gt;</span> <span class="number">0</span> do</span><br><span class="line">        <span class="keyword">set</span> total :<span class="operator">=</span> total <span class="operator">+</span> n;</span><br><span class="line">        <span class="keyword">set</span> n :<span class="operator">=</span> n <span class="operator">-</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span> while;</span><br><span class="line">    <span class="keyword">select</span> total;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"># 调用</span><br><span class="line"><span class="keyword">call</span> p(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<p>9、<code>repeat</code>语法<br><strong>说明：</strong>当满足条件的时候退出循环。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 语法，先执行一次逻辑，然后判断逻辑是否满足，</span><br><span class="line"># 如果满足就退出；如果不满足就继续循环</span><br><span class="line">repeat</span><br><span class="line">    <span class="keyword">SQL</span>逻辑...</span><br><span class="line">    until 条件</span><br><span class="line"><span class="keyword">end</span> repeat;</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 例子：计算从<span class="number">1</span>累加到n的值，n为传入的参数值。</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p(<span class="keyword">in</span> n <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> total <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">    repeat </span><br><span class="line">        <span class="keyword">set</span> total :<span class="operator">=</span> total <span class="operator">+</span> n;</span><br><span class="line">        <span class="keyword">set</span> n :<span class="operator">=</span> n <span class="operator">-</span> <span class="number">1</span>;</span><br><span class="line">    until n <span class="operator">&lt;=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">end</span> repeat;</span><br><span class="line">    <span class="keyword">select</span> total;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"># 调用</span><br><span class="line"><span class="keyword">call</span> p(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<p>10、<code>loop</code>语法<br><strong>说明：</strong>简单的循环，如果不在SQL逻辑中增加退出循环的条件，可以用来实现简单的死循环。loop配合下面两个语句使用：<br>（1）leave：配合循环使用，退出循环；<br>（2）iterate：必须用在循环中，作用是跳过当前循环剩下的语句，直接进入下一个循环。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 语法</span><br><span class="line">[begin_label]:loop</span><br><span class="line">    <span class="keyword">SQL</span>逻辑...</span><br><span class="line"><span class="keyword">end</span> loop [end_label];</span><br><span class="line"></span><br><span class="line"># 退出两个语句的使用</span><br><span class="line">leavel label; # 退出指定标记的循环体，label为上面begin_label</span><br><span class="line">iterate label; # 直接进入下一次循环</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 例子：计算从<span class="number">1</span>累加到n的值，n为传入的参数值。</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p(<span class="keyword">in</span> n <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> total <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">    sum:loop </span><br><span class="line">        if n <span class="operator">&lt;=</span> <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">            leave sum;</span><br><span class="line">        <span class="keyword">end</span> if;</span><br><span class="line">            <span class="keyword">set</span> total :<span class="operator">=</span> total <span class="operator">+</span> n;</span><br><span class="line">            <span class="keyword">set</span> n :<span class="operator">=</span> n <span class="operator">-</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span> loop sum;</span><br><span class="line">    <span class="keyword">select</span> total;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"># 调用</span><br><span class="line"><span class="keyword">call</span> p(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<p>11、游标<code>cursor</code><br><strong>说明：</strong>用来存储查询结果集的数据类型，在存储过程和函数中可以使用游标对结果集进行循环处理。游标的使用包括游标的声明、open、fetch和close。<br>（1）声明游标<br><code>declare 游标名称 cursor for 查询语句;</code><br>（2）打开游标<br><code>open 游标名称;</code><br>（3）获取游标记录<br><code>fetch 游标名称 into 变量[,变量];</code><br>（4）关闭游标<br><code>close 游标名称;</code><br>例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 根据传入的参数 uage，来查询用户表 tb_user 中</span><br><span class="line"># 所有的用户年龄小于等于 uage 的用户姓名和专业</span><br><span class="line"># 并将用户的姓名和专业插入到所创建的一张新表中</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p(<span class="keyword">in</span> uage <span class="type">int</span>) # 创建存储过程</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    # 注意：游标的声明必须在普通的声明之后</span><br><span class="line">    # 声明两个变量uname、upro</span><br><span class="line">    <span class="keyword">declare</span> uname <span class="type">varchar</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">declare</span> upro <span class="type">varchar</span>(<span class="number">100</span>);</span><br><span class="line">    # 声明一个游标，并把查询结果集赋值给这个游标</span><br><span class="line">    <span class="keyword">declare</span> u_cursor <span class="keyword">cursor</span> <span class="keyword">for</span> <span class="keyword">select</span> name,profession <span class="keyword">from</span> tb_user <span class="keyword">where</span> age <span class="operator">&lt;=</span> uage;</span><br><span class="line">    # 声明一个条件处理程序，如果满足状态<span class="number">02000</span>就关闭游标</span><br><span class="line">    <span class="keyword">declare</span> exit handler <span class="keyword">for</span> <span class="keyword">SQLSTATE</span> <span class="string">&#x27;02000&#x27;</span> <span class="keyword">close</span> u_cursor</span><br><span class="line">     </span><br><span class="line">    # 如果表 tb_user_pro 存在就删除</span><br><span class="line">    <span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> tb_user_pro;</span><br><span class="line">    # 如果表 tb_user_pro 不存在就创建</span><br><span class="line">    <span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> tb_user_pro(</span><br><span class="line">        id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">        name <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line">        profession <span class="type">varchar</span>(<span class="number">100</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    # 开启游标</span><br><span class="line">    <span class="keyword">open</span> u_cursor;</span><br><span class="line">    # 循环遍历游标，将游标中的name和profession的值分别赋值给上面声明的uname和upro</span><br><span class="line">    #  将uanme和upro插入新创建的表 tb_user_pro 中</span><br><span class="line">    while <span class="literal">true</span> do</span><br><span class="line">        <span class="keyword">fetch</span> u_cursor <span class="keyword">into</span> uname,upro;</span><br><span class="line">        <span class="keyword">insert</span> <span class="keyword">into</span> tb_user_pro <span class="keyword">values</span>(<span class="keyword">null</span>,uname,upro);</span><br><span class="line">    <span class="keyword">end</span> while;</span><br><span class="line">    # 关闭游标</span><br><span class="line">    <span class="keyword">close</span> u_cursor;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"># 调用</span><br><span class="line"><span class="keyword">call</span> p(<span class="number">40</span>);</span><br></pre></td></tr></table></figure>
<p>12、条件处理程序<code>handler</code><br><strong>说明：</strong>用来定义在流程控制结构执行过程中遇到问题时相应的处理步骤。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 语法</span><br><span class="line"># handler_action说明：continue:继续执行当前程序  exit:终止执行当前程序</span><br><span class="line"># condition_value说明：<span class="keyword">SQLSTATE</span> sqlstate_value:状态码</span><br><span class="line"><span class="keyword">declare</span> handler_action handler <span class="keyword">for</span> condition_value[,condition_value]... statement;</span><br><span class="line"></span><br><span class="line"># 例子在<span class="number">11</span>例子中</span><br></pre></td></tr></table></figure>

<h6 id="28、触发器"><a href="#28、触发器" class="headerlink" title="28、触发器"></a>28、触发器</h6><p><strong>说明：</strong>可以在insert、update和delete之前或者之后，触发并执行触发器中定义的SQL语句的集合。<br>使用两个 old 和 new 来引用触发器中发生的变化内容：<br>（1）insert型触发器（只有new）<br>new表示将要或者已经新增的数据。<br>（2）update型触发器（有 old 也有 new ）<br>old表示修改之前的数据，new表示将要或已经修改后的数据<br>（3）delete型触发器（只有old）<br>old表示将要或者已经删除的数据<br>1、语法<br>（1）创建  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># trigger_name：触发器名称</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> trigger_name</span><br><span class="line"># 选择是之前还是之后，是插入、更新还是删除</span><br><span class="line">before<span class="operator">/</span>after  <span class="keyword">insert</span><span class="operator">/</span><span class="keyword">update</span><span class="operator">/</span><span class="keyword">delete</span></span><br><span class="line"># table_name：表名。<span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span>：行级触发器（mysql中只支持行级）</span><br><span class="line"><span class="keyword">on</span> table_name <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    trigger_content; # 触发器的逻辑</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>
<p>（2）查看<br><code>show triggers;</code><br>（3）删除  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 如果没有指定 schema_name，默认为当前数据库</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> [schema_name.]trigger_name;</span><br></pre></td></tr></table></figure>
<p>2、例子<br>想要在插入用户表之后，把信息也插入到 tb_user 表中：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tb_user_insert_trigger</span><br><span class="line">after <span class="keyword">insert</span> <span class="keyword">on</span> tb_user <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="operator">/</span><span class="operator">/</span> 说明：new.id：插入到用户表的id；new.name：插入到用户表的姓名</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> user_logs(id,operation,operate_time,operate_id,operate_name) <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;insert&#x27;</span>,now(),new.id,new.name);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
</search>
