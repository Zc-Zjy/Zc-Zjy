<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git 学习笔记</title>
    <url>/2023/09/25/Git/</url>
    <content><![CDATA[<hr>
<h1 id="一、图标含义"><a href="#一、图标含义" class="headerlink" title="一、图标含义"></a>一、图标含义</h1><h3 id="1、简单说明"><a href="#1、简单说明" class="headerlink" title="1、简单说明"></a>1、简单说明</h3><p>（1）<a href="https://www.jianshu.com/p/4363a5b8895f?ivk_sa=1024320u">master、origin master 与 origin&#x2F;master介绍</a><br>（2）o&#x2F;master(remote name&#x2F;branch name):远程仓库名&#x2F;分支名。<br>（3）Git Bash：Unix与Linux风格的命令行，使用最多，推荐最多。<br>（4）Git CMD：Windows风格的命令行。<br>（5）Git GUI：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令。  </p>
<h3 id="2、日常更新上传的步骤："><a href="#2、日常更新上传的步骤：" class="headerlink" title="2、日常更新上传的步骤："></a>2、日常更新上传的步骤：</h3><ul>
<li>git add</li>
<li>git commit</li>
<li>git pull</li>
<li>git push</li>
</ul>
<h3 id="3、关于IDEA集成字体颜色"><a href="#3、关于IDEA集成字体颜色" class="headerlink" title="3、关于IDEA集成字体颜色"></a>3、关于IDEA集成字体颜色</h3><ul>
<li><span style="color:green">绿色</span>，已经加入控制暂未提交</li>
<li><span style="color:red">红色</span>，未加入版本控制</li>
<li><span style="color:blue">蓝色</span>，加入，已提交，有改动</li>
<li>白色，加入，已提交，无改动</li>
<li><span style="color:#cccccc">灰色</span>，版本控制已忽略文件</li>
</ul>
<h3 id="4、分支说明："><a href="#4、分支说明：" class="headerlink" title="4、分支说明："></a>4、分支说明：</h3><p>每个分支都是一个完整的项目，互不影响。<img src="/2023/09/25/Git/1.jpg" class=""></p>
<br/>

<hr>
<br/>

<h1 id="二、Git-常用命令"><a href="#二、Git-常用命令" class="headerlink" title="二、Git 常用命令"></a>二、Git 常用命令</h1><h3 id="1、设置全局变量"><a href="#1、设置全局变量" class="headerlink" title="1、设置全局变量"></a>1、设置全局变量</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">git config <span class="attr">--global</span> user<span class="selector-class">.name</span> <span class="string">&quot;zjy&quot;</span> <span class="comment">// 这个和账号没关系，只是一个用户签名</span></span><br><span class="line">git config <span class="attr">--global</span> user<span class="selector-class">.email</span> <span class="string">&quot;xxxx@qq.com&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="2、常用操作"><a href="#2、常用操作" class="headerlink" title="2、常用操作"></a>2、常用操作</h3><h6 id="（1）初始化"><a href="#（1）初始化" class="headerlink" title="（1）初始化"></a>（1）初始化</h6><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> 需要新建一个目录，在此目录执行之后，这个目录里就有了本地git仓库</span><br><span class="line">git init </span><br></pre></td></tr></table></figure>
<h6 id="（2）下载项目"><a href="#（2）下载项目" class="headerlink" title="（2）下载项目"></a>（2）下载项目</h6><p>说明：下载项目不需要管理凭证，但是只要把代码推送到远程的就需要管理凭证，一台电脑只有一个管理凭证，管理凭证就是git账号</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">【url</span>】</span><br></pre></td></tr></table></figure>
<h6 id="（3）查看所有提交跟踪状态"><a href="#（3）查看所有提交跟踪状态" class="headerlink" title="（3）查看所有提交跟踪状态"></a>（3）查看所有提交跟踪状态</h6><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 单个文件查看</span><br><span class="line">git status 文件名</span><br></pre></td></tr></table></figure>
<h6 id="（4）加入到暂存区"><a href="#（4）加入到暂存区" class="headerlink" title="（4）加入到暂存区"></a>（4）加入到暂存区</h6><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">add</span> 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加所有文件到暂存区</span></span><br><span class="line"><span class="symbol">git</span> <span class="keyword">add</span> .</span><br></pre></td></tr></table></figure>
<h6 id="（5）提交暂存区的文件到本地仓库"><a href="#（5）提交暂存区的文件到本地仓库" class="headerlink" title="（5）提交暂存区的文件到本地仓库"></a>（5）提交暂存区的文件到本地仓库</h6><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git</span> commit -m 【提交的备注信息】</span><br></pre></td></tr></table></figure>
<h6 id="（6）创建公钥密钥"><a href="#（6）创建公钥密钥" class="headerlink" title="（6）创建公钥密钥"></a>（6）创建公钥密钥</h6><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">ssh-keygen -<span class="built_in">t</span> rsa -C 【邮箱】</span><br></pre></td></tr></table></figure>
<h6 id="（7）列出所有本地分支"><a href="#（7）列出所有本地分支" class="headerlink" title="（7）列出所有本地分支"></a>（7）列出所有本地分支</h6><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> git branch -v:列出所有本地分支和分支信息</span><br><span class="line">git branch</span><br></pre></td></tr></table></figure>
<h6 id="（8）列出所有远程分支"><a href="#（8）列出所有远程分支" class="headerlink" title="（8）列出所有远程分支"></a>（8）列出所有远程分支</h6><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git branch -r</span></span><br></pre></td></tr></table></figure>
<h6 id="（9）新建一个分支，但依然停留在当前分支"><a href="#（9）新建一个分支，但依然停留在当前分支" class="headerlink" title="（9）新建一个分支，但依然停留在当前分支"></a>（9）新建一个分支，但依然停留在当前分支</h6><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">branch </span>【分支名字】</span><br></pre></td></tr></table></figure>
<h6 id="（10）新建一个分支，并切换到该分支"><a href="#（10）新建一个分支，并切换到该分支" class="headerlink" title="（10）新建一个分支，并切换到该分支"></a>（10）新建一个分支，并切换到该分支</h6><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">git</span> checkout -<span class="keyword">b</span> 【分支名字】</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只切换分支</span></span><br><span class="line"><span class="symbol">git</span> checkout 【分支名字】</span><br></pre></td></tr></table></figure>
<h6 id="（11）合并指定分支到当前分支"><a href="#（11）合并指定分支到当前分支" class="headerlink" title="（11）合并指定分支到当前分支"></a>（11）合并指定分支到当前分支</h6><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> 在分支<span class="number">1</span>使用该命令，分支<span class="number">2</span>合并到分支<span class="number">1</span></span><br><span class="line"><span class="regexp">//</span> 例如：在分支<span class="number">1</span>使用，git merge 分支<span class="number">2</span>，将分支<span class="number">2</span>合并到分支<span class="number">1</span></span><br><span class="line">git merge 【要合并的分支名字】</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 在分支<span class="number">1</span>使用该命令，将分支<span class="number">1</span>合并到分支<span class="number">2</span>（将自己写的代码提到最前面）</span><br><span class="line"><span class="regexp">//</span> 例如：在分支<span class="number">1</span>使用，git rebase 分支<span class="number">2</span>，将分支<span class="number">1</span>合并到分支<span class="number">2</span></span><br><span class="line">git rebase 【要合并到的分支名字】</span><br></pre></td></tr></table></figure>
<h6 id="（12）删除分支"><a href="#（12）删除分支" class="headerlink" title="（12）删除分支"></a>（12）删除分支</h6><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git branch -d 【分支名字】</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 删除远程分支方法一</span><br><span class="line">git push origin --<span class="keyword">delete</span> 【分支名字】</span><br><span class="line"><span class="regexp">//</span> 删除远程分支方法二</span><br><span class="line">git branch -dr 【remote/branch】</span><br></pre></td></tr></table></figure>
<h6 id="（13）强制移动HEAD"><a href="#（13）强制移动HEAD" class="headerlink" title="（13）强制移动HEAD"></a>（13）强制移动HEAD</h6><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">// 将<span class="literal">master</span>向上移动<span class="number">3</span>个节点</span><br><span class="line">git branch -f <span class="keyword">master</span> <span class="title">HEAD</span>~<span class="number">3</span></span><br></pre></td></tr></table></figure>
<h6 id="（14）查看日志信息"><a href="#（14）查看日志信息" class="headerlink" title="（14）查看日志信息"></a>（14）查看日志信息</h6><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">ref</span>log</span><br></pre></td></tr></table></figure>
<h6 id="（15）查看详细信息"><a href="#（15）查看详细信息" class="headerlink" title="（15）查看详细信息"></a>（15）查看详细信息</h6><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>
<h6 id="（16）回退到某个版本"><a href="#（16）回退到某个版本" class="headerlink" title="（16）回退到某个版本"></a>（16）回退到某个版本</h6><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> 版本号从信息里查看</span><br><span class="line">git reset --hard 【版本号】</span><br></pre></td></tr></table></figure>
<h6 id="（17）查看远程库所有别名"><a href="#（17）查看远程库所有别名" class="headerlink" title="（17）查看远程库所有别名"></a>（17）查看远程库所有别名</h6><p><strong>说明：</strong>别名的意思是项目链接太长了，给项目重新取一个别名。  </p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git remote -v</span></span><br></pre></td></tr></table></figure>
<h6 id="（18）创建别名"><a href="#（18）创建别名" class="headerlink" title="（18）创建别名"></a>（18）创建别名</h6><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">git remote <span class="built_in">add</span> 【别名】 【项目链接】</span><br></pre></td></tr></table></figure>
<h6 id="（19）推送本地库的代码到远程库"><a href="#（19）推送本地库的代码到远程库" class="headerlink" title="（19）推送本地库的代码到远程库"></a>（19）推送本地库的代码到远程库</h6><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">push</span> （别名） 【分支名】</span><br></pre></td></tr></table></figure>
<h6 id="（20）拉取远程库的代码到本地库"><a href="#（20）拉取远程库的代码到本地库" class="headerlink" title="（20）拉取远程库的代码到本地库"></a>（20）拉取远程库的代码到本地库</h6><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git</span> pull （别名） 【分支名】</span><br></pre></td></tr></table></figure>

<br/>

<hr>
<br/>

<h1 id="三、git用法图解"><a href="#三、git用法图解" class="headerlink" title="三、git用法图解"></a>三、git用法图解</h1><img src="/2023/09/25/Git/2.jpg" class="">

<br/>

<hr>
<br/>

<h1 id="四、Git流程说明"><a href="#四、Git流程说明" class="headerlink" title="四、Git流程说明"></a>四、Git流程说明</h1><p>（1）当前在master分支上，需要开发master分支的项目。<br>（2）创建一个开发分支 dev ，git branch dev，dev分支创建成功，dev上存在和master分支一摸一样的项目，当前所在的分支还是master。<br>（3）切换分支，git checkout dev，从当前分支master切换到开发分支dev。（也可以 2 和 3 合并起来，就是 git checkout -b dev，新建一个开发分支dev，并切换到 dev 分支）<br>（4）在开发分支 dev 开发项目，开发完成，准备合并分支。<br>（5）将把开发分支dev合并到master分支上，先切换到master分支，然后键入 git merge dev。（也可以这样，不切换到master分支，当前所在分支为开发分支dev，然后 git rebase master，将dev分支合并到master分支上）</p>
<br/>

<hr>
<br/>

<h1 id="五、Git集成IDEA"><a href="#五、Git集成IDEA" class="headerlink" title="五、Git集成IDEA"></a>五、Git集成IDEA</h1><p>1、首先先配置忽略的配置，作用是：每当把项目上传的时候，git会将所有文件默认选取，为了把一些不必要的文件忽略，所以配置忽略文件。<br>创建 xxx.ignore 文件，然后将需要忽略的文件键入，在.gitconfig配置文件中输入<br>需要用到正斜线 “ &#x2F; ”，不能用反斜线 “ \ ”</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[core]</span></span><br><span class="line">    <span class="attr">excludesfile</span> = xxx.ignore文件地址</span><br></pre></td></tr></table></figure>
<p>2、IDEA配置Git</p>
<img src="/2023/09/25/Git/3.jpg" class="">

<br/>

<hr>
<br/>

<h1 id="六、Git-流程idea更新代码时的两个选项Merge-the-incoming-changes-into-the-current-branch与Rebase-the-current-branch-on-top-of-the-incoming-changes"><a href="#六、Git-流程idea更新代码时的两个选项Merge-the-incoming-changes-into-the-current-branch与Rebase-the-current-branch-on-top-of-the-incoming-changes" class="headerlink" title="六、Git 流程idea更新代码时的两个选项Merge the incoming changes into the current branch与Rebase the current branch on top of the incoming changes"></a>六、Git 流程idea更新代码时的两个选项Merge the incoming changes into the current branch与Rebase the current branch on top of the incoming changes</h1><p>1、第一个Merge<br>一般都使用这个，这个是按照时间顺序更新代码，什么意思呢，就是有两个场景：<br>假如有两个开发人员a、b都在同一个分支test上进行开发：<br>（1）a、b把代码都拉下来；<br>（2）a进行开发，在a开发的同时，b可能也在开发（场景一），可能没有（场景二）；<br>（3）场景一：a开发之后，更新代码并提交代码，然后b也开发好，更新代码，因为Merge更新代码是按照时间来更新的，所以不会出现冲突问题，b很顺利地将代码更新下来；<br>（4）场景二：a开发之后，更新代码并提交代码，b没有进行开发，直接更新代码，这个肯定顺利成功。<br>2、第二个Rebase<br>这个是将别人的代码先更新下来，然后将自己的代码提到最顶端，什么意思呢，就比如：<br>两个开发人员a、b在同一个分支test上进行开发：<br>（1）a、b把代码都拉下来；<br>（2）a进行开发，在a开发的同时，b可能也在开发（场景一），可能没有（场景二）；<br>（3）场景一：a开发之后，更新代码并提交代码，然后b也开发好，更新代码，此时就会出现问题，它会更新代码，将b代码覆盖下来，就会冲突；<br>（4）场景二：b没有开发代码，直接更新代码，这是没有问题的。</p>
<br/>

<hr>
<br/>

<h1 id="七、IDEA上面使用Git提交到本地仓库怎么回退"><a href="#七、IDEA上面使用Git提交到本地仓库怎么回退" class="headerlink" title="七、IDEA上面使用Git提交到本地仓库怎么回退"></a>七、IDEA上面使用Git提交到本地仓库怎么回退</h1><p>1、右键选中需要回退的文件，点击git</p>
<img src="/2023/09/25/Git/4.png" class="">
<p>2、使用 HEAD^ 来描述版本，一个 ^ 表示前一个版本，两个 ^^ 表示前两个版本，以此类推。也可以使用数字来代替 ^，比如说前 100 个版本可以写作 HEAD~100。</p>
<img src="/2023/09/25/Git/5.jpg" class="">
<p>3、回退</p>
<img src="/2023/09/25/Git/6.jpg" class="">

<br/>

<hr>
<br/>

<h1 id="八、Git提交规范（fix、feat等字段含义）"><a href="#八、Git提交规范（fix、feat等字段含义）" class="headerlink" title="八、Git提交规范（fix、feat等字段含义）"></a>八、Git提交规范（fix、feat等字段含义）</h1><p>feat: 新功能（feature）<br>fix: 修补bug<br>docs: 文档（documentation）<br>style: 格式（不影响代码运行的变动）<br>refactor: 重构（即不是新增功能，也不是修改bug的代码变动）<br>chore: 构建过程或辅助工具的变动<br>revert: 撤销，版本回退<br>perf: 性能优化<br>test：测试<br>improvement: 改进<br>build: 打包<br>ci: 持续集成</p>
<br/>

<hr>
<br/>

<h1 id="九、git-merge和git-rebase使用方法（都是针对本地来进行合并的）"><a href="#九、git-merge和git-rebase使用方法（都是针对本地来进行合并的）" class="headerlink" title="九、git merge和git rebase使用方法（都是针对本地来进行合并的）"></a>九、git merge和git rebase使用方法（都是针对本地来进行合并的）</h1><p>有三个分支master、dev、test：<br>（1）A在dev上开发功能，完成功能开发，先得在dev分支提交开发的功能模块，然后推送到远程服务器，然后git checkout master切换到本地的master分支，使用git merge dev将在dev分支上开发的功能合并到本地的master分支，然后推送到远程服务器；<br>（2）B在本地切换到master分支，更新代码，在本地git checkout test切换到test分支，在使用git rebase master将更新下来的代码合并到自己的本地test分支上。</p>
<br/>

<hr>
<br/>

<h1 id="十、Git常见的问题"><a href="#十、Git常见的问题" class="headerlink" title="十、Git常见的问题"></a>十、Git常见的问题</h1><h3 id="1、error-remote-origin-already-exists"><a href="#1、error-remote-origin-already-exists" class="headerlink" title="1、error: remote origin already exists."></a>1、error: remote origin already exists.</h3><p><strong>说明：</strong>当本地向远程仓库提交代码时，出现：<code>error: remote origin already exists.</code>。<br>解决办法：<br>（1）git remote -v：查看远程库的信息。<br>（2）git remote rm origin：删除现有的远程仓库。<br>（3）git remote add origin + 远程仓库地址：建立新的远程仓库地址。（远程仓库地址是git上clone的地址）  </p>
<h3 id="2、怎么将本地仓库和远程仓库关联"><a href="#2、怎么将本地仓库和远程仓库关联" class="headerlink" title="2、怎么将本地仓库和远程仓库关联"></a>2、怎么将本地仓库和远程仓库关联</h3><p>1、需要新建一个项目，并在该项目中执行命令<code>git init</code>初始化一个本地仓库；<br>2、在云端新建一个仓库；<br>3、然后可以使用下面两种方式之一：<br><strong>第一种方式：</strong>通过IDEA连接<br>（1）打开菜单栏中Git（注意：不是设置中Git） -&gt; Manage Remotes；  </p>
<img src="/2023/09/25/Git/7.jpg" class="">  
<p>（2）将远程仓库中的clone的地址复制粘贴进去就将本地和远程关联上了。<br><strong>第二种方式：</strong>通过git指令<br>使用git命令<code>git remote add 【远程分支名】 【远程仓库clone地址】</code>将本地和远程关联：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git remote add origin https://xxxx......</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>版本控制</tag>
      </tags>
  </entry>
  <entry>
    <title>SVN 学习笔记</title>
    <url>/2023/09/25/SVN/</url>
    <content><![CDATA[<hr>
<br/>


<h2 id="一、SVN-是C-S模式，有两个端口，一个客户端，一个服务端。"><a href="#一、SVN-是C-S模式，有两个端口，一个客户端，一个服务端。" class="headerlink" title="一、SVN:是C&#x2F;S模式，有两个端口，一个客户端，一个服务端。"></a>一、SVN:是C&#x2F;S模式，有两个端口，一个客户端，一个服务端。</h2><br/>

<hr>
<h2 id="二、三大指令："><a href="#二、三大指令：" class="headerlink" title="二、三大指令："></a>二、三大指令：</h2><ol>
<li>check out:客户端第一次与服务端连接使用。以后不用。</li>
<li>commit：提交本地数据到服务端。</li>
<li>update：从服务端更新下来项目。<br/></li>
</ol>
<hr>
<h2 id="三、图标集的意思："><a href="#三、图标集的意思：" class="headerlink" title="三、图标集的意思："></a>三、图标集的意思：</h2><img src="/2023/09/25/SVN/1.png" class="">
<ol>
<li>常规：当客户端文件与服务端文件完全同步时，系统显示这个图标。</li>
<li>冲突：当客户端提交的文件与服务端数据有冲突，系统显示该图标。</li>
<li>已删除：当服务端数据已删除，那么客户端文件将显示该图标。</li>
<li>增加：当我们编写文件已添加到提交队列，那么显示该图标。</li>
<li>无版本控制：当我们编写的文件没有添加到上传队列时，显示该图标。</li>
<li>修改：当客户端有修改但没有提交，显示该图标。</li>
<li>锁定：当服务端数据已锁定，那么客户端文件将显示该图标。</li>
<li>关于IDEA集成字体颜色</li>
</ol>
<ul>
<li><span style="color:green">绿色</span>，已经加入控制暂未提交</li>
<li><span style="color:red">红色</span>，未加入版本控制</li>
<li><span style="color:blue">蓝色</span>，加入，已提交，有改动</li>
<li>白色，加入，已提交，无改动</li>
<li><span style="color:#cccccc">灰色</span>，版本控制已忽略文件</li>
</ul>
]]></content>
      <categories>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>版本控制</tag>
      </tags>
  </entry>
  <entry>
    <title>关于npm、nrm、nvm、yarn学习记录</title>
    <url>/2023/09/28/%E5%85%B3%E4%BA%8Enpm%E3%80%81nrm%E3%80%81nvm%E3%80%81yarn%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<hr>
<h1 id="一、npm"><a href="#一、npm" class="headerlink" title="一、npm"></a>一、npm</h1><h6 id="1、什么是npm？"><a href="#1、什么是npm？" class="headerlink" title="1、什么是npm？"></a>1、什么是npm？</h6><p>npm 是 Node.js 的包管理器，用于安装、管理、卸载 JavaScript 模块。npm 提供了一个包管理器，使得开发者可以方便使用第三方模块，同时也可以将自己编写的模块发布到 npm 上供其他人使用。（npm相当于后端的maven，帮助我们下载依赖）<br><strong>注意：</strong><br>    npm不用安装，只要安装了nodejs就有了。</p>
<h6 id="2、官网地址"><a href="#2、官网地址" class="headerlink" title="2、官网地址"></a>2、官网地址</h6><p><a href="https://www.npmjs.com/">https://www.npmjs.com/</a></p>
<h6 id="3、中文官网地址"><a href="#3、中文官网地址" class="headerlink" title="3、中文官网地址"></a>3、中文官网地址</h6><p><a href="https://www.npmjs.cn/">https://www.npmjs.cn/</a></p>
<h6 id="4、使用方法"><a href="#4、使用方法" class="headerlink" title="4、使用方法"></a>4、使用方法</h6><p>（1）查看npm版本</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure>
<p>（2）初始化一个npm项目<br>说明：在目录下运行下面的命名，目录中就会 多了一个文件 package.json（相当于pom.xml）</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">// -y:直接生成 package.json</span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure>
<p>（3）下载依赖包</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">// 可以简写为：npm i 【包名】</span><br><span class="line">npm install 【包名】</span><br></pre></td></tr></table></figure>
<p><strong>说明：</strong><br>npm install xxx –save –global（简写：-g）（简写：-S大写）-dev</p>
<ul>
<li>xxx 表示某个依赖名字</li>
<li>–save 表示将这个依赖保存进 package.json 依赖标签里</li>
<li>-dev 表示将这个依赖保存进 package.json 开发依赖标签里。</li>
<li>–global 表示全局安装</li>
</ul>
<p>（4）同时下载多个依赖包</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">// 包名之间用空格隔开</span><br><span class="line">npm i 【包名<span class="number">1</span>】 【包名<span class="number">2</span>】 【包名<span class="number">3</span>】...</span><br></pre></td></tr></table></figure>
<p>（5）配置npm下载镜像</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p>（6）卸载某个依赖包</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">// 可以简写为：npm i 【包名】</span><br><span class="line">npm uninstall 【包名】</span><br></pre></td></tr></table></figure>
<p>（7）npm启动项目命令</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">// 具体查看package.json中是不是serve</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure>
<p>（8）npm构建项目命令</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>
<p>（7）如何找依赖包<br>    可以去上面第2点中的官网查找需要的依赖包名。</p>
<br/>

<hr>
<br/>


<h1 id="二、yarn"><a href="#二、yarn" class="headerlink" title="二、yarn"></a>二、yarn</h1><h6 id="1、什么yarn？"><a href="#1、什么yarn？" class="headerlink" title="1、什么yarn？"></a>1、什么yarn？</h6><p>和npm是一样的（yarn需要使用npm安装，npm是npdejs自带的）。</p>
<h6 id="2、官网"><a href="#2、官网" class="headerlink" title="2、官网"></a>2、官网</h6><p>（1）地址1：<a href="https://yarnpkg.com/">https://yarnpkg.com/</a><br>（2）地址2：<a href="https://classic.yarnpkg.com/en/docs/install/#windows-stable">https://classic.yarnpkg.com/en/docs/install/#windows-stable</a></p>
<h6 id="3、中文官网"><a href="#3、中文官网" class="headerlink" title="3、中文官网"></a>3、中文官网</h6><p>（1）地址1：<a href="https://yarn.nodejs.cn/">https://yarn.nodejs.cn/</a><br>（2）地址2：<a href="https://www.yarnpkg.cn/">https://www.yarnpkg.cn/</a></p>
<h6 id="4、使用方法-1"><a href="#4、使用方法-1" class="headerlink" title="4、使用方法"></a>4、使用方法</h6><p>（1）安装方法</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install --global yarn</span><br></pre></td></tr></table></figure>
<p>（2）查看版本</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">yarn --version</span><br></pre></td></tr></table></figure>
<p>（3）添加依赖包<br><strong>说明：</strong> 下载不了就加  –ignore-engines</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">yarn add [package]</span><br><span class="line">yarn add [package]@[version]</span><br><span class="line">yarn add [package]@[tag]</span><br><span class="line"></span><br><span class="line">// 分别添加到 devDependencies、peerDependencies、optionalDependencies</span><br><span class="line">yarn add [package] --dev</span><br><span class="line">yarn add [package] --peer</span><br><span class="line">yarn add [package] --optional</span><br></pre></td></tr></table></figure>
<p>（4）升级依赖</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">yarn upgrade [package]</span><br><span class="line">yarn upgrade [package]@[version]</span><br><span class="line">yarn upgrade [package]@[tag]</span><br></pre></td></tr></table></figure>
<p>（5）删除依赖</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">yarn remove [package]</span><br></pre></td></tr></table></figure>

<br/>

<hr>
<br/>


<h1 id="三、nrm"><a href="#三、nrm" class="headerlink" title="三、nrm"></a>三、nrm</h1><h6 id="1、什么是nrm？为什么要使用nrm？"><a href="#1、什么是nrm？为什么要使用nrm？" class="headerlink" title="1、什么是nrm？为什么要使用nrm？"></a>1、什么是nrm？为什么要使用nrm？</h6><p>我们在使用npm下载依赖的时候，如果不设置国内镜像，下载得就很慢，所以我们需要手动去设置镜像，有可能有些依赖还不能使用国内镜像下载，这个时候还得去设置镜像，虽然有cnpm，但是还是太麻烦了。而nrm就是帮助我们解决了这个麻烦事，提供了一些最常用的npm包镜像地址，能够让我们快速的切换镜像地址。</p>
<h6 id="2、使用方法"><a href="#2、使用方法" class="headerlink" title="2、使用方法"></a>2、使用方法</h6><p>（1）安装方法</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">// 全局安装nrm包</span><br><span class="line">npm i nrm -g</span><br></pre></td></tr></table></figure>
<p>（2）查看当前所有可用的镜像源地址以及当前所使用的镜像源地址</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">nrm ls</span><br></pre></td></tr></table></figure>
<p>（3）切换不同的镜像源地址</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">// 切换成npm镜像</span><br><span class="line">nrm use npm</span><br><span class="line"></span><br><span class="line">// 切换成taobao镜像</span><br><span class="line">urm use taobao</span><br></pre></td></tr></table></figure>

<br/>

<hr>
<br/>

<h1 id="四、nvm"><a href="#四、nvm" class="headerlink" title="四、nvm"></a>四、nvm</h1><h6 id="1、什么是nvm？为什么要使用nvm？"><a href="#1、什么是nvm？为什么要使用nvm？" class="headerlink" title="1、什么是nvm？为什么要使用nvm？"></a>1、什么是nvm？为什么要使用nvm？</h6><p>我们在使用nodejs的时候，一台电脑只能装一个版本的nodejs，如果我们想要更换nodejs版本，就需要我们卸载已有的版本，重新下载我们需要的版本，很麻烦，而nvm帮我们解决了这个麻烦事。<br>nvm是一个 node版本管理工具，拥有它可以轻松的让我们在一台电脑上随时切换node版本。</p>
<h6 id="2、官网地址-1"><a href="#2、官网地址-1" class="headerlink" title="2、官网地址"></a>2、官网地址</h6><p><a href="https://nvm.uihtm.com/">https://nvm.uihtm.com/</a></p>
<h6 id="3、使用方法"><a href="#3、使用方法" class="headerlink" title="3、使用方法"></a>3、使用方法</h6><p>（1）设置镜像<br>    在 nvm 的安装路径下，找到 settings.txt，设置node_mirro与npm_mirror为国内镜像地址。<br>    将下面两行复制粘贴进settings.txt中。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">node_mirror: https://npm.taobao.org/mirrors/node/</span><br><span class="line">npm_mirror: https://npm.taobao.org/mirrors/npm/</span><br><span class="line"></span><br><span class="line">// 或者</span><br><span class="line">nvm npm_mirror https://npmmirror.com/mirrors/npm/</span><br><span class="line">nvm node_mirror https://npmmirror.com/mirrors/node/</span><br></pre></td></tr></table></figure>
<p>（2）显示nodejs可下载版本的部分列表</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">nvm list available</span><br></pre></td></tr></table></figure>
<p>也可以打开链接查看可以node版本：<a href="https://registry.npmmirror.com/binary.html?path=node/">https://registry.npmmirror.com/binary.html?path=node/</a><br>（3）安装最新版本 ( 安装时可以在上面看到 node.js 、 npm 相应的版本号 ，不建议安装最新版本)</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">nvm install latest</span><br></pre></td></tr></table></figure>
<p>（4）安装指定的版本的nodejs</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">// 例如：nvm install <span class="number">8</span>.<span class="number">12</span>.<span class="number">0</span></span><br><span class="line">nvm install 【版本号】</span><br></pre></td></tr></table></figure>
<p>（5）查看已安装版本<br><strong>说明：</strong> 当前版本号前面没有 * ， 此时还没有使用任何一个版本，这时使用 node.js 时会报错。 </p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">// 简写：nvm ls</span><br><span class="line">nvm list</span><br></pre></td></tr></table></figure>
<p>（6）切换node版本<br><strong>说明：</strong>  这时会发现在启用的 node 版本前面有 * 标记，这时就可以使用 node.js。</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">nvm use 【版本号】</span><br></pre></td></tr></table></figure>

<br/>

<hr>
<br/>

<h1 id="五、其它问题"><a href="#五、其它问题" class="headerlink" title="五、其它问题"></a>五、其它问题</h1><h5 id="1、npx、npm、cnpm、pnpm区别"><a href="#1、npx、npm、cnpm、pnpm区别" class="headerlink" title="1、npx、npm、cnpm、pnpm区别"></a>1、npx、npm、cnpm、pnpm区别</h5><p><a href="https://zhuanlan.zhihu.com/p/494076214">https://zhuanlan.zhihu.com/p/494076214</a></p>
<h5 id="2、npm、nrm、nvm的安装和使用"><a href="#2、npm、nrm、nvm的安装和使用" class="headerlink" title="2、npm、nrm、nvm的安装和使用"></a>2、npm、nrm、nvm的安装和使用</h5><p><a href="https://www.jianshu.com/p/95d5228ac73e">https://www.jianshu.com/p/95d5228ac73e</a></p>
]]></content>
      <categories>
        <category>前端技术</category>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Spring学习笔记</title>
    <url>/2023/10/04/%E5%85%B3%E4%BA%8ESpring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<hr>
<h1 id="一、Spring"><a href="#一、Spring" class="headerlink" title="一、Spring"></a>一、Spring</h1><p><code>spring</code>是一个轻量级的开发框架，为什么是轻量级，因为它所需jar包小，本身的大小也小，并且可以和其他任何框架集成。  </p>
<br/>

<hr>
<br/>


<h1 id="二、SpringBean的生命周期"><a href="#二、SpringBean的生命周期" class="headerlink" title="二、SpringBean的生命周期"></a>二、SpringBean的生命周期</h1><p><strong>图解：</strong>  </p>
<img src="/2023/10/04/%E5%85%B3%E4%BA%8ESpring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.jpg" class="">  
<p><strong>1、实例化</strong><br>在<code>AbstractAutowireCapableBeanFactory</code>类中的<code>createBeanInstance</code>方法中，根据反射的原理实例化bean对象。<br>（1）<code>createBeanInstance</code>方法中第一行是获取<code>Class</code>对象；<br>（2）在<code>instantiateBean</code>方法中，有一行为<code>beanInstance=getInstantiationStrategy（）.instantiate(mbd,beanName,this)</code>；<br>（3）在<code>instantiate</code>方法中的<code>constructorToUse=clazz.getDeclaredConstructor()</code>，这个是使用<code>Class</code>对象获取这个对象的构造器；<br>（4）在<code>instantiateClass</code>方法中的<code>ctor.newInstance(argsWithDefaultValues)</code>，根据构造器获取这个对象的实例。  </p>
<p><strong>2、初始化（自定义属性赋值）</strong><br>在<code>AbstractAutowireCapableBeanFactory</code>类中的<code>populateBean</code>方法中，使用<code>set</code>方法完成赋值。（使用 PropertyValue 实体类的 set 方法完成赋值 setPropertyValue(pv.getName(), pv.getValue())；  </p>
<p><strong>3、检查<code>Aware</code>相关接口并设置依赖（容器对象属性赋值）</strong><br>（1）<code>Aware</code>接口是用来干什么的？<br><code>Aware</code>接口相当于是一个标识作用，比如下面的例子：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(object <span class="keyword">instanceof</span> Aware) &#123;</span><br><span class="line">    <span class="keyword">if</span>(object <span class="keyword">instanceof</span> BeanFactory) &#123;</span><br><span class="line">        <span class="keyword">do</span> soming...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(object <span class="keyword">instanceof</span> ApplicationContext) &#123;</span><br><span class="line">        <span class="keyword">do</span> soming...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2023/10/04/%E5%85%B3%E4%BA%8ESpring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.jpg" class="">  
<p>上图说明：<br>相当于有多个接口去继承<code>Aware</code>接口，然后有多个类去实现那些接口，在<code>spring</code>容器启动的时候，会分别判断这些类的实例化对象<code>bean</code>属于哪个接口，然后按照那个接口的<code>set</code>方法去赋值。<br>（下面4到7步，每个<code>bean</code>对象都会执行，意思就是：每个<code>bean</code>对象在初始化好之后，都会执行前置处理，然后执行<code>invokeInitMethods</code>方法去判断这个<code>bean</code>对象是否实现了<code>InitializingBean</code>接口，有没有扩展点，如果实现了，就执行<code>afterPropertiesSet</code>方法，这个方法相当于一个扩展点，相当于给这个<code>bean</code>对象增强，最后执行后置处理。）  </p>
<p>4、<code>BeanPostProcessor</code>前置处理  </p>
<p>5、检查<code>bean</code>对象实现了<code>InitializingBean</code>接口（执行初始化方法<code>invokeInitMethods</code>，默认没有）  </p>
<p>6、检查是否配置有自定义的<code>init-method</code>（执行初始化方法<code>invokeInitMethods</code>，默认没有）  </p>
<p>7、<code>BeanPostProcessor</code>后置处理</p>
<br/>

<hr>
<br/>


<h1 id="三、Spring三大核心"><a href="#三、Spring三大核心" class="headerlink" title="三、Spring三大核心"></a>三、Spring三大核心</h1><h3 id="1、spring-IOC（控制反转）和spring-DI（依赖注入）"><a href="#1、spring-IOC（控制反转）和spring-DI（依赖注入）" class="headerlink" title="1、spring IOC（控制反转）和spring DI（依赖注入）"></a>1、spring IOC（控制反转）和spring DI（依赖注入）</h3><p><strong>1、什么是<code>IOC</code>控制反转和<code>DI</code>依赖注入？</strong><br>之前我们创建对象，是使用<code>new</code>，<code>new</code>一个对象，但是在<code>spring</code>中，我们不用创建对象，由<code>spring</code>帮我们创建，<code>spring</code>相当于一个容器，我们把对象当成<code>bean</code>，将<code>bean</code>注入（依赖注入）到<code>spring</code>容器中，由<code>spring</code>容器自己帮我们创建和管理对象，在需要使用这个对象的地方使用反射（控制反转）来使用这个对象。<br>例如：<br>（1）以前传统方式创建一个对象：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实体类对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dog&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, color=&#x27;&quot;</span> + color + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试输出</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;小黑狗&quot;</span>, <span class="string">&quot;黑色&quot;</span>);</span><br><span class="line">        System.out.println(dog.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）现在<code>spring</code>帮我们创建，去<code>xml</code>配置文件中配置<code>bean</code>对象：（也可以使用注解的方式，请查看<code>springboot</code>学习笔记）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置属性id的值，相当于给这个实例一个变量名 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置属性class的值，就是Dog实体类的包路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;Dog&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置property就相当于给对应的属性赋值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小黑狗&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">value</span>=<span class="string">&quot;黑色&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上述配置就相当于在java中的下述代码，差别就是这是写在配置文件中，不会造成程序的耦合：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">apple.setName(<span class="string">&quot;小黑狗&quot;</span>);</span><br><span class="line">apple.setColor(<span class="string">&quot;黑色&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>然后测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Dog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="comment">// 通过ClassPathXmlApplicationContext加载dog.xml配置文件，路径是target目录下的相对路径</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">dogContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath:dog.xml&quot;</span>);</span><br><span class="line">	<span class="comment">// 通过反射获取dog实例对象</span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> dogContext.getBean(<span class="string">&quot;dog&quot;</span>, Dog.class);</span><br><span class="line">        System.out.println(dog.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2、有参构造创建对象的例子（这里只列xml方式）</strong><br>（1）有一个<code>student</code>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cn.zuo.pojo</span><br><span class="line"></span><br><span class="line">Student&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StudentOne</span><span class="params">(String name, Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;StudentOne&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>student.xml</code>文件中：<br>第一种：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cn.zuo.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xiaoming&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;29&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>第二种：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cn.zuo.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xiaogang&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;27&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>第三种：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cn.zuo.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xiaohong&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> <span class="attr">value</span>=<span class="string">&quot;29&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>3、bean的自动注入方法</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//输入autowire=&quot;byName&quot; 就实现自动装配了。</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">calss</span>=<span class="string">&quot;com.cn.zuo.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xiaoming&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">说明：</span><br><span class="line">    byname，需要保证所有bean的id唯一，并且这个bean需要和自动注入的属性的set方法一致。</span><br><span class="line">    bytype，需要保证所有bean的class唯一，并且这个bean需要和自动注入的属性的类型一致。</span><br></pre></td></tr></table></figure>

<h3 id="2、spring-AOP（面向切面）"><a href="#2、spring-AOP（面向切面）" class="headerlink" title="2、spring AOP（面向切面）"></a>2、spring AOP（面向切面）</h3><p><strong>说明：</strong>需要导入依赖包 org.aspectj，Aop是用来处理那些和业务没有关系的功能和逻辑模块，比如日志、权限等。<br>Aop 是 IOC 整体流程中的一个扩展点。  </p>
<p>1、<code>SpringAop</code>专业术语</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    add();</span><br><span class="line">    update();</span><br><span class="line">    select();</span><br><span class="line">    delete();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（1）<code>连接点</code>：<code>User</code>类中可以被增强的方法都是连接点，比如上面的<code>add</code>、<code>update</code>、<code>select</code>、<code>delete</code>方法。<br>（2）<code>切入点</code>：实际上被增强的方法叫切入点，比如上面的四个方法中，我增强了<code>add</code>方法、<code>add</code>方法就是切入点。<br>（3）<code>通知（增强）</code>：增强的部分，比如我在<code>add</code>方法中增加一个日志输出，这个日志输出就是通知。通知的类型有：<br>    - 前置通知（BeforeAdvice）：在目标执行之前被调用，对应接口<code>BeforeAdvice</code>。<br>    - 后置通知（AfterReturning）：在目标方法执行之后调用（抛出异常不会执行），对应接口<code>AfterReturnAdvice</code>。<br>    - 环绕通知（前后通知Around）：在目标方法执行前后被调用，对应接口<code>MethodInterceptor</code>。<br>    - 异常通知（AfterThrowingAdvice）：在目标方法抛出异常后调用，对应接口<code>ThrowAdvice</code>。<br>    - 最终通知（相当于fially，After）：在目标方法执行之后被调用（抛出异常也会执行）。<br>（4）<code>切面</code>：把通知切入到切入点的过程。  </p>
<p>2、通过继承类实现<br>（1）<code>BeforeAdvice</code>类<br>    - 会在目标对象的方法之前被调用<br>    - 通过实现<code>MethodBeforeAdvice</code>接口来实现<br>    - 该接口中定义了一个方法即<code>before</code>方法，该方法会在目标对象<code>target</code>之前执行<br>（2）<code>AfterAdvice</code>类<br>    - 在目标对象的方法执行之后调用<br>    - 通过实现<code>AfterReturningAdvice</code>接口实现<br><strong>例子：</strong>  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DemoOneService业务一</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoOneService</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demoOne</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;demoOne...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demoTwo</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;demoTwo...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demoThree</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;demoThree...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DemoTwoService业务二</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoTwoService</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;f()...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增一个MyAfterAdvice类去实现AfterReturningAdvice接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAfterAdvice</span> <span class="keyword">implements</span> <span class="title class_">AfterReturningAdvice</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(Object o,Method method,Object[] objects,object o1)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;执行后发出的通知...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建一个MyBeforeAdvice类去实现MethodBeforeAdvice接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeforeAdvice</span> <span class="keyword">implements</span> <span class="title class_">MethodBeforeAdvice</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Method method,Object[] objects,Object o)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;执行前发出的通知...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Spring</code>核心配置文件<code>applicationContext.xml</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">	   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">	   http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">	   http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mybefore&quot;</span> <span class="attr">class</span>=<span class="string">&quot;MyBeforeAdvice&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;after&quot;</span> <span class="attr">class</span>=<span class="string">&quot;MyAfterAdvice&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;demoOneService&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* xxx.xxx.demo.*.*(...))&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:pointcut</span>&gt;</span></span><br><span class="line">		&lt;aop:advisorvadvice-ref=&quot;after&quot; pointcut-ref=&quot;demoOneService&quot; /&gt;</span><br><span class="line">		&lt;aop:advisorvadvice-ref=&quot;mybefore&quot; pointcut-ref=&quot;demoOneService&quot; /&gt;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;demoOneService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;DemoOneService&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;demoTwoService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;DemoTwoService&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">		<span class="type">DemoOneService</span> <span class="variable">do</span> <span class="operator">=</span> ac.getBean(<span class="string">&quot;demoTwoService&quot;</span>,DemoTwoService.class);</span><br><span class="line">		<span class="keyword">do</span>.demoOne();</span><br><span class="line">		<span class="keyword">do</span>.demoTwo();</span><br><span class="line">		<span class="keyword">do</span>.demoThree();</span><br><span class="line">		<span class="type">DemoTwoService</span> <span class="variable">dt</span> <span class="operator">=</span> ac.getBean(<span class="string">&quot;demoTwoService&quot;</span>,DemoTwoService.class);</span><br><span class="line">		dt.f();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、通过xml方式实现<br>（1）第一种（设置切入点）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    先注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;service.impl.UserServiceImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;beforeLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;log.BeforeLog&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;log.AfterLog&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启aop --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置切入点，expression(要切入的位置）execution（*修饰符 *返回值  *方法名 (..)参数) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* service.impl.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 设置要切入的类，设置要切入的点 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;beforeLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（2）第二种（设置切入面）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;service.impl.UserServiceImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;diyLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;service.diy.DiyLog&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--设置切入面--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;diyLog&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;point&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* service.impl.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- method里面的before是增强类中的方法 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4、通过注解配置切面<br>（1）创建一个<code>User</code>类和一个增强类<code>UserProxy</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增强类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span>  <span class="comment">// 生成增强类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line">    <span class="comment">// 前置通知</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）创建一个spring配置文件bean.xml（使用config类来配置请看第<code>(4)</code>点）  </p>
<ol>
<li>在配置文件头部声明中加入context、aop声明，开启注解扫描；</li>
<li>开启Aspect生成代理对象。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>（3）在需要增强的方法上增加不同通知的注解<br>比如我在上面增强类UserProxy中before方法上增加前置通知：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@before(value=&quot;execution(* User类的全路径.add(..))&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 环绕通知</span></span><br><span class="line"><span class="meta">@Around(value=&quot;execution(* User类的全路径.add(..))&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint p)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;环绕之前...&quot;</span>);</span><br><span class="line">    p.proceed(); <span class="comment">// 执行User类中add方法</span></span><br><span class="line">    System.out.println(<span class="string">&quot;环绕之后...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（4）使用Config类来代替xml配置文件  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.zuo&quot;&#125;)</span> <span class="comment">// 相当于xml中的包扫描</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span> <span class="comment">// 相当于xml中 &lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigAop</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br/>

<hr>
<br/>

<h1 id="四、关于Spring中的一些用法"><a href="#四、关于Spring中的一些用法" class="headerlink" title="四、关于Spring中的一些用法"></a>四、关于Spring中的一些用法</h1><h3 id="1、在xml中配置Spring扫描包"><a href="#1、在xml中配置Spring扫描包" class="headerlink" title="1、在xml中配置Spring扫描包"></a>1、在<code>xml</code>中配置<code>Spring</code>扫描包</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这是默认配置扫描包，会通过默认的 Filter ,扫描到需要的包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.cn.zuo.service&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 示例一</span></span><br><span class="line"><span class="comment">use-default-filters=&quot;false&quot; 表示现在不使用默认 filter，自己配置filter </span></span><br><span class="line"><span class="comment">context:include-filter 设置扫描哪些内容，下面的意思是扫描注解，只扫描带Controller注解的类</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.cn.zuo&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 示例二</span></span><br><span class="line"><span class="comment">context:exclude-filter 设置不扫描哪些内容，下面的意思是不扫描带Controller注解的类，其他在zuo包下的都扫描</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.cn.zuo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、开启事物管理和注解"><a href="#2、开启事物管理和注解" class="headerlink" title="2、开启事物管理和注解"></a>2、开启事物管理和注解</h3><p>（一般在service层加）<br>1、基于注解<br>（1）载入spring-tx依赖，在spring配置文件中加入头部声明，将<code>xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</code>的“xsi”改成“tx”，将<code>xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</code>的<code>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</code>的“beans”改成“tx”。<br>（2）加入事物管理器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 创建事物管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（3）开启事物注解</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启事务注解 </span></span><br><span class="line"><span class="comment">transaction-manager=&quot;transactionManager&quot;对应上面事务管理器中的id，这个属性的意思是指明开启的是哪个事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（4）在service层的实现类上或者方法上加@Transactional  </p>
<p>2、基于xml<br>同上面<code>1、</code>操作，不要（3）<br>加入通知配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;随便取&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;需要配置事务的方法&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>配置切入点</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启aop --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置切入点，expression(要切入的位置）execution（*修饰符 *返回值  *方法名 (..)参数) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* service.impl.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置要切入的类，设置要切入的点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;对应上面随便取的id&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、完全基于注解<br>（1）创建一个配置类，对比spring配置文件来配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.zuo&quot;)</span> <span class="comment">// 相当于xml中的包扫描</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span> <span class="comment">// 开启事务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigAop</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建数据库连接池</span></span><br><span class="line">     <span class="meta">@Bean</span></span><br><span class="line">      <span class="keyword">public</span> DruidDataSource <span class="title function_">getDruidDataSource</span> <span class="params">()</span>&#123;</span><br><span class="line">          <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span> ();</span><br><span class="line">          dataSource.setDriverClassName(<span class="string">&quot; &quot;</span>);</span><br><span class="line">          dataSource.setUrl(<span class="string">&quot; &quot;</span>);</span><br><span class="line">          dataSource.setUsername(<span class="string">&quot; &quot;</span>);</span><br><span class="line">          dataSource.setPassword(<span class="string">&quot; &quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> dataSource;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 同理创建JdbcTemplate</span></span><br><span class="line">      <span class="meta">@Bean</span></span><br><span class="line">      <span class="keyword">public</span>  JdbcTemplate <span class="title function_">getJdbcTemplate</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">          <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line">          <span class="comment">//jdbcTemplate.setDataSource(getDruidDataSource ()); </span></span><br><span class="line">         <span class="comment">//可以直接调用上面这个方法，但是会重新创建，我们需要用的是spring容器中已经存在的dataSource，</span></span><br><span class="line">        <span class="comment">//所以直接在这个方法里增加一个参数DataSource dataSource，这个dataSource是spring容器中已经存在的。</span></span><br><span class="line">        jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="meta">@Bean</span></span><br><span class="line">      <span class="keyword">public</span> DataSourceTransactionManager <span class="title function_">getDataSourceTransactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">DataSourceTransactionManager</span> <span class="variable">transactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">        transactionManager.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> transactionManager;</span><br><span class="line">      &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>


<h3 id="3、新特性之单元测试框架"><a href="#3、新特性之单元测试框架" class="headerlink" title="3、新特性之单元测试框架"></a>3、新特性之单元测试框架</h3><p>需要导入依赖spring-test</p>
<img src="/2023/10/04/%E5%85%B3%E4%BA%8ESpring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3.jpg" class="">]]></content>
      <categories>
        <category>后端技术</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>关于使用Postman笔记</title>
    <url>/2023/09/28/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Postman%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<hr>
<h1 id="一、关于Postman的说明"><a href="#一、关于Postman的说明" class="headerlink" title="一、关于Postman的说明"></a>一、关于Postman的说明</h1><h3 id="1、postman界面"><a href="#1、postman界面" class="headerlink" title="1、postman界面"></a>1、postman界面</h3><p>1、Collections：集合，项目集合<br>2、Apis：api文档<br>3、EnViromments：环境变量，全局变量<br>4、Mock Server：虚拟服务器<br>5、Monitors：监听器<br>6、History：历史记录  </p>
<h3 id="2、请求页面说明"><a href="#2、请求页面说明" class="headerlink" title="2、请求页面说明"></a>2、请求页面说明</h3><p>1、Params（get请求传参 ）<br>（1）@PathVariable 这种方式传参，直接在请求路径后面加参数值<br><strong>后端controller的请求为：</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;list/&#123;category&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">voidlist</span><span class="params">(<span class="meta">@PathVariable(&quot;category&quot;)</span> String category)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p><strong>postman发送请求为：</strong></p>
<img src="/2023/09/28/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Postman%E7%AC%94%E8%AE%B0/1.jpg" class="">
<p>（2）@RequestParam 这种方式传参，就在Query Params列表下输入参数<br><strong>说明：</strong> 要是参数比较多，不能一个一个输入，可以点击 Bulk Edit，批量输入。<br> <strong>后端controller的请求为：</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/doneList&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doneList</span><span class="params">(<span class="meta">@RequestParam(defaultValue = &quot;&quot;)</span> String category,</span></span><br><span class="line"><span class="params">                     <span class="meta">@RequestParam(value = &quot;keywords&quot;,defaultValue = &quot;&quot;)</span>String keywords)</span> &#123;&#125;       </span><br></pre></td></tr></table></figure>
<p><strong>postman发送请求为：</strong></p>
<img src="/2023/09/28/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Postman%E7%AC%94%E8%AE%B0/2.jpg" class="">
<p>2、Authorization（鉴权）<br>3、Headers（请求头）<br>4、Body（post请求参数）<br>（1）none：没有参数<br>（2）form-data：既可以传键值对参数，也可以传文件<br>（3）x-www-from-urlencoded：只能够传键值对参数<br>（4）raw：可以传json、text、xml、html、javascript<br>（5）binary：把文件以二进制的方式传参<br>5、Pre-request Script（请求前的前置脚本）<br>6、Tests（请求之后的断言，用来查看请求之后的结果）<br>7、Cookies（蓝色的字体，用来管理cookie信息）  </p>
<h3 id="3、响应页面说明"><a href="#3、响应页面说明" class="headerlink" title="3、响应页面说明"></a>3、响应页面说明</h3><p>（1）Body：接口返回的数据<br>（2）Cookies：响应的Cookie信息<br>（3）Headers：响应头<br>（4）Test Results：断言的结果</p>
<h3 id="4、Postman的内置参数"><a href="#4、Postman的内置参数" class="headerlink" title="4、Postman的内置参数"></a>4、Postman的内置参数</h3><p><strong>说明：</strong>“{ {}}” 中加上“$”就是内置的参数。<br>（1）{ { $timestamp }}：生成当前时间的时间戳。<br>（2）{ { $randomInt }}：生成 0-1000 之间的随机数。<br>（3）{ { $guid }}：生成速记 GUID 字符串。</p>
<h3 id="5、请求头各参数说明"><a href="#5、请求头各参数说明" class="headerlink" title="5、请求头各参数说明"></a>5、请求头各参数说明</h3><p>（1）Host：请求的主机地址。<br>（2）Connection：连接方式。<br>（3）Accept：客户端接收到的数据格式。<br>（4）X-Requested-With：异步请求。<br>（5）User-Agent：客户端的用户类型。（向服务器描述浏览器的类型）<br>（6）Referer：来源。<br>（7）Cookie：Cookie信息。<br>（8）Content-Type：请求内容的格式。</p>
<br/>

<hr>
<br/>

<h1 id="二、Postman的一些用法"><a href="#二、Postman的一些用法" class="headerlink" title="二、Postman的一些用法"></a>二、Postman的一些用法</h1><h3 id="1、Postman全局设置token"><a href="#1、Postman全局设置token" class="headerlink" title="1、Postman全局设置token"></a>1、Postman全局设置token</h3><p><strong>说明：</strong>当我们使用Postman来测试接口时，发送每个请求都需要手动加上token，这样的操作太繁琐了，所以我们可以设置全局token，在每次发送请求的时候自动给我们加上token。<br>（1）在Collections中，点击Pre-request Script选项。<br>（2）输入下面代码脚本，根据实际情况更改。  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pm.<span class="title function_">sendRequest</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://localhost:8080/api/v1/account/login&#x27;</span>, <span class="comment">// 登录的接口地址</span></span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">header</span>: &#123;</span><br><span class="line">        <span class="string">&quot;Accept&quot;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">body</span>: &#123;</span><br><span class="line">        <span class="attr">mode</span>: <span class="string">&#x27;raw&#x27;</span>,</span><br><span class="line">        <span class="attr">raw</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">            <span class="attr">username</span>: <span class="string">&quot;admin&quot;</span>, <span class="comment">// 登录账号</span></span><br><span class="line">            <span class="attr">password</span>: <span class="string">&quot;admin&quot;</span> <span class="comment">// 登录密码</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">err, res</span>) &#123;</span><br><span class="line">    pm.<span class="property">request</span>.<span class="property">headers</span>.<span class="title function_">add</span>(&#123;</span><br><span class="line">        <span class="attr">key</span>: <span class="string">&#x27;token&#x27;</span>, <span class="attr">value</span>: res.<span class="title function_">json</span>().<span class="property">data</span> <span class="comment">// 登录请求返回的token数据，如果是data里面的token，就是data.token；key后面的&#x27;token&#x27;表示token的名字。</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2、Postman全局变量使用方法"><a href="#2、Postman全局变量使用方法" class="headerlink" title="2、Postman全局变量使用方法"></a>2、Postman全局变量使用方法</h3><p>（1）在登录的接口那，点击 Tests 选项。<br>（2）在这里使用 js 代码提取 responseBody 返回的数据，比如 token。  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(responseBody); <span class="comment">// 查看 responseBody 数据</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(responseBody); <span class="comment">// 将 responseBody（返回的是 JSON 字符串） 转换为 JSON 数据</span></span><br><span class="line">pm.<span class="property">globals</span>.<span class="title function_">set</span>(<span class="string">&quot;token&quot;</span>,result.<span class="property">data</span>.<span class="property">token</span>); <span class="comment">// 左边方框里面 Snippets 下面选择 Set a global variable 这个选项，然后自动生成的</span></span><br></pre></td></tr></table></figure>
<p>（3）然后可以点击右上角 No Environment 旁边的小眼睛图标查看是否提取设置成功。<br><strong>注意：</strong>如果出现 token 无效等关于 token 的异常错误，就需要在每个请求接口的 Headers 头部中加入  这个。 </p>
<h3 id="3、Postman环境变量使用方法"><a href="#3、Postman环境变量使用方法" class="headerlink" title="3、Postman环境变量使用方法"></a>3、Postman环境变量使用方法</h3><p><strong>说明：</strong>有多种环境（开发环境、生产环境、测试环境）的情况下使用 EnViromments  环境变量。<br>（1）点击 EnViromments 选项，新增三个环境，分别为 开发环境、生产环境、测试环境；<br>（2）三个环境的 Variable 下的值要一样，比如都是 url ，Initial value下的值为服务器地址，比如 localhost:8080；<br>（3）在请求接口的时候就不用这样写了：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>localhost:<span class="number">8080</span><span class="regexp">/api/</span>v1<span class="regexp">/account/</span>login</span><br></pre></td></tr></table></figure>
<p>改成：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>&#123;&#123;url&#125;&#125;:<span class="number">8080</span><span class="regexp">/api/</span>v1<span class="regexp">/account/</span>login</span><br></pre></td></tr></table></figure>
<p>（4）使用：在右上角有一个 No EnViromment，点击选择需要在哪个环境下发送请求就可以了。</p>
<h3 id="4、Postman请求测试同时上传文件和json对象的接口"><a href="#4、Postman请求测试同时上传文件和json对象的接口" class="headerlink" title="4、Postman请求测试同时上传文件和json对象的接口"></a>4、Postman请求测试同时上传文件和json对象的接口</h3><p><strong>controller的代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 后端需要两个参数，一个参数用来接收上传文件，另一个参数用来接收json数据。</span></span><br><span class="line"><span class="comment">// 后端接收文件可以采用MultipartFile来接收，json数据可以创建对象进行接收， </span></span><br><span class="line"><span class="comment">// 采用@RequestPart注解进行数据绑定</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">upload</span><span class="params">(<span class="meta">@RequestPart(&quot;file&quot;)</span> MultipartFile uploadFile,<span class="meta">@RequestPart(&quot;req&quot;)</span> <span class="meta">@Valid</span> Query req)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//TODO 业务代码</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>使用postman进行请求：</strong><br>（1）使用 form-data 来进行传参，将文件和json数据隔开。<br>（2）根据后端别名来取名，文件为：file；json为：req（根据上面controller参数得来。<br>（3）在req json数据后面 Content type列加上 application&#x2F;json就可以了  </p>
<img src="/2023/09/28/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Postman%E7%AC%94%E8%AE%B0/3.jpg" class="">]]></content>
      <categories>
        <category>Postman</category>
      </categories>
      <tags>
        <tag>Postman</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8 stream 调式方法</title>
    <url>/2023/10/07/Java8-stream-%E8%B0%83%E5%BC%8F%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<br/>

<hr>
<br/>

<p><strong>说明：</strong><code>Java</code>的<code>Stream</code>编程给调试带来了极大的不便，IDEA推出了stream trace功能，可以详细看到每一步操作的关系、结果，非常方便进行调试。  </p>
<div align="center">
    <font size="50">StreamTrace 用法</font>
</div>

<h3 id="1、StreamTrace-例子"><a href="#1、StreamTrace-例子" class="headerlink" title="1、StreamTrace 例子"></a>1、StreamTrace 例子</h3><p>这里简单将字符串转成它的字符数，并设置断点开启debug模式。</p>
<img src="/2023/10/07/Java8-stream-%E8%B0%83%E5%BC%8F%E6%96%B9%E6%B3%95/1.png" class="">
<p>如上图所示，可以看到每一步操作的元素个数、操作的结果、元素转换前后的对应关，非常清晰明了；还可以查看具体的对象内容。  </p>
<h3 id="2、使用-StreamTrace-方法"><a href="#2、使用-StreamTrace-方法" class="headerlink" title="2、使用 StreamTrace 方法"></a>2、使用 StreamTrace 方法</h3><p>StreamTrace只有在debug模式下才能使用，当在Stream代码上设置断点后，启动debug，点击流按钮，如图所示：</p>
<img src="/2023/10/07/Java8-stream-%E8%B0%83%E5%BC%8F%E6%96%B9%E6%B3%95/2.png" class=""> 
<br/>

<p>点击后，默认Split 模式显示：</p>
<img src="/2023/10/07/Java8-stream-%E8%B0%83%E5%BC%8F%E6%96%B9%E6%B3%95/3.png" class=""> 
<br/>

<p>可以点击左下方按钮切换到FlatMode模式，当然也可以再切换回去：</p>
<img src="/2023/10/07/Java8-stream-%E8%B0%83%E5%BC%8F%E6%96%B9%E6%B3%95/4.png" class="">

<h3 id="3、实战演练"><a href="#3、实战演练" class="headerlink" title="3、实战演练"></a>3、实战演练</h3><p>这里演示一段字符转长度并过滤长度小于5的stream操作：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span>    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestTrace</span><span class="params">()</span> &#123;</span><br><span class="line">    Stream.of(<span class="string">&quot;beijing&quot;</span>,<span class="string">&quot;tianjin&quot;</span>,<span class="string">&quot;shanghai&quot;</span>,<span class="string">&quot;wuhan&quot;</span>)                </span><br><span class="line">        .map(String::length)               </span><br><span class="line">        .filter(e -&gt; e &gt; <span class="number">5</span>)               </span><br><span class="line">        .collect(Collectors.toList()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2023/10/07/Java8-stream-%E8%B0%83%E5%BC%8F%E6%96%B9%E6%B3%95/5.png" class="">
]]></content>
      <categories>
        <category>后端技术</category>
        <category>问题方法合集</category>
      </categories>
      <tags>
        <tag>问题方法合集</tag>
      </tags>
  </entry>
  <entry>
    <title>ObjectMapper（各个类型和Json类型互转）</title>
    <url>/2023/10/07/ObjectMapper%EF%BC%88%E5%90%84%E4%B8%AA%E7%B1%BB%E5%9E%8B%E5%92%8CJson%E7%B1%BB%E5%9E%8B%E4%BA%92%E8%BD%AC%EF%BC%89/</url>
    <content><![CDATA[<br/>

<hr>
<br/>

<h1 id="一、ObjectMapper（各个类型和Json类型互转）"><a href="#一、ObjectMapper（各个类型和Json类型互转）" class="headerlink" title="一、ObjectMapper（各个类型和Json类型互转）"></a>一、ObjectMapper（各个类型和Json类型互转）</h1><p><strong>说明：</strong><code>ObjectMapper</code>类<code>(com.fasterxml.jackson.databind.ObjectMapper)</code>是<code>Jackson</code>的主要类，它可以帮助我们快速的进行各个类型和Json类型的相互转换。  </p>
<h3 id="1、使用"><a href="#1、使用" class="headerlink" title="1、使用"></a>1、使用</h3><p>（1）引入Jackson的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据自己需要引入相关版本依赖。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、ObjectMapper的常用配置"><a href="#2、ObjectMapper的常用配置" class="headerlink" title="2、ObjectMapper的常用配置"></a>2、<code>ObjectMapper</code>的常用配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectMapper mapper;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ObjectMapper <span class="title function_">getObjectMapper</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.mapper;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">    <span class="comment">//创建ObjectMapper对象</span></span><br><span class="line">    mapper = <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>()</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//configure方法 配置一些需要的参数</span></span><br><span class="line">    <span class="comment">// 转换为格式化的json 显示出来的格式美化</span></span><br><span class="line">    mapper.enable(SerializationFeature.INDENT_OUTPUT);</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//序列化的时候序列对象的那些属性  </span></span><br><span class="line">   <span class="comment">//JsonInclude.Include.NON_DEFAULT 属性为默认值不序列化 </span></span><br><span class="line">   <span class="comment">//JsonInclude.Include.ALWAYS      所有属性</span></span><br><span class="line">   <span class="comment">//JsonInclude.Include.NON_EMPTY   属性为 空（“”） 或者为 NULL 都不序列化 </span></span><br><span class="line">   <span class="comment">//JsonInclude.Include.NON_NULL    属性为NULL 不序列化</span></span><br><span class="line">   mapper.setSerializationInclusion(JsonInclude.Include.ALWAYS);  </span><br><span class="line"> </span><br><span class="line">   </span><br><span class="line">    <span class="comment">//反序列化时,遇到未知属性会不会报错 </span></span><br><span class="line">    <span class="comment">//true - 遇到没有的属性就报错 false - 没有的属性不会管，不会报错</span></span><br><span class="line">    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//如果是空对象的时候,不抛异常  </span></span><br><span class="line">    mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, <span class="literal">false</span>);  </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 忽略 transient 修饰的属性</span></span><br><span class="line">    mapper.configure(MapperFeature.PROPAGATE_TRANSIENT_MARKER, <span class="literal">true</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//修改序列化后日期格式</span></span><br><span class="line">    mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="literal">false</span>);  </span><br><span class="line">    mapper.setDateFormat(<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//处理不同的时区偏移格式</span></span><br><span class="line">   mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);</span><br><span class="line">   mapper.registerModule(<span class="keyword">new</span> <span class="title class_">JavaTimeModule</span>());</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、ObjectMapper的常用方法"><a href="#3、ObjectMapper的常用方法" class="headerlink" title="3、ObjectMapper的常用方法"></a>3、<code>ObjectMapper</code>的常用方法</h3><h6 id="（1）json字符串转对象"><a href="#（1）json字符串转对象" class="headerlink" title="（1）json字符串转对象"></a>（1）json字符串转对象</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;Hyl\&quot;, \&quot;age\&quot;:20&#125;&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//将字符串转换为对象</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> mapper.readValue(jsonString, Student.class);</span><br><span class="line">System.out.println(student); <span class="comment">// 结果一</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//将对象转换为json字符串</span></span><br><span class="line">jsonString = mapper.writeValueAsString(student);</span><br><span class="line">System.out.println(jsonString); <span class="comment">// 结果二</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">结果一：</span><br><span class="line">Student [ name: Hyl, age: <span class="number">20</span> ]</span><br><span class="line">结果二：</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span> : <span class="string">&quot;Hyl&quot;</span>,</span><br><span class="line">  <span class="string">&quot;age&quot;</span> : <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="（2）数组和对象之间转换"><a href="#（2）数组和对象之间转换" class="headerlink" title="（2）数组和对象之间转换"></a>（2）数组和对象之间转换</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对象转为byte数组</span></span><br><span class="line"><span class="type">byte</span>[] byteArr = mapper.writeValueAsBytes(student);</span><br><span class="line">System.out.println(byteArr); <span class="comment">// 结果一</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//byte数组转为对象</span></span><br><span class="line">Student student= mapper.readValue(byteArr, Student.class);</span><br><span class="line">System.out.println(student); <span class="comment">// 结果二</span></span><br><span class="line"> </span><br><span class="line">结果一：</span><br><span class="line">[B@3327bd23</span><br><span class="line">结果二：</span><br><span class="line">Student [ name: Hyl, age: <span class="number">20</span> ]</span><br></pre></td></tr></table></figure>
<h6 id="（3）集合和json字符串之间转换"><a href="#（3）集合和json字符串之间转换" class="headerlink" title="（3）集合和json字符串之间转换"></a>（3）集合和json字符串之间转换</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Student&gt; studentList= <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">studentList.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;hyl1&quot;</span> ,<span class="number">20</span> , <span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">studentList.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;hyl2&quot;</span> ,<span class="number">21</span> , <span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">studentList.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;hyl3&quot;</span> ,<span class="number">22</span> , <span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">studentList.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;hyl4&quot;</span> ,<span class="number">23</span> , <span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line"> </span><br><span class="line"><span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> mapper.writeValueAsString(studentList);</span><br><span class="line">System.out.println(jsonStr); <span class="comment">// 结果一</span></span><br><span class="line">        </span><br><span class="line">List&lt;Student&gt; studentList2 = mapper.readValue(jsonStr, List.class);</span><br><span class="line">System.out.println(<span class="string">&quot;字符串转集合：&quot;</span> + studentList2 ); <span class="comment">// 结果二</span></span><br><span class="line"> </span><br><span class="line">结果一：</span><br><span class="line">[ &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span> : <span class="string">&quot;hyl1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;age&quot;</span> : <span class="number">20</span>,</span><br><span class="line">  <span class="string">&quot;sendTime&quot;</span> : <span class="number">1525164212803</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span> : <span class="string">&quot;hyl2&quot;</span>,</span><br><span class="line">  <span class="string">&quot;age&quot;</span> : <span class="number">21</span>,</span><br><span class="line">  <span class="string">&quot;sendTime&quot;</span> : <span class="number">1525164212803</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span> : <span class="string">&quot;hyl3&quot;</span>,</span><br><span class="line">  <span class="string">&quot;age&quot;</span> : <span class="number">22</span>,</span><br><span class="line">  <span class="string">&quot;sendTime&quot;</span> : <span class="number">1525164212803</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span> : <span class="string">&quot;hyl4&quot;</span>,</span><br><span class="line">  <span class="string">&quot;age&quot;</span> : <span class="number">23</span>,</span><br><span class="line">  <span class="string">&quot;sendTime&quot;</span> : <span class="number">1525164212803</span></span><br><span class="line">&#125; ]</span><br><span class="line">结果二：</span><br><span class="line">[</span><br><span class="line">	&#123;</span><br><span class="line">		name=hyl1, </span><br><span class="line">		age=<span class="number">20</span>, </span><br><span class="line">		sendTime=<span class="number">1525164212803</span></span><br><span class="line">	&#125;, &#123;</span><br><span class="line">		name=hyl2, </span><br><span class="line">		age=<span class="number">21</span>, </span><br><span class="line">		sendTime=<span class="number">1525164212803</span></span><br><span class="line">	&#125;, &#123;</span><br><span class="line">		name=hyl3, </span><br><span class="line">		age=<span class="number">22</span>, </span><br><span class="line">		sendTime=<span class="number">1525164212803</span></span><br><span class="line">	&#125;, &#123;</span><br><span class="line">		name=hyl4, </span><br><span class="line">		age=<span class="number">23</span>, </span><br><span class="line">		sendTime=<span class="number">1525164212803</span></span><br><span class="line">	&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h6 id="（4）map和json字符串之间转换"><a href="#（4）map和json字符串之间转换" class="headerlink" title="（4）map和json字符串之间转换"></a>（4）map和json字符串之间转换</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Object&gt; testMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">testMap.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;22&quot;</span>);</span><br><span class="line">testMap.put(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>);</span><br><span class="line">testMap.put(<span class="string">&quot;date&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">testMap.put(<span class="string">&quot;student&quot;</span>, <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;hyl&quot;</span>, <span class="number">20</span>, <span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> mapper.writeValueAsString(testMap);</span><br><span class="line">System.out.println(jsonStr); <span class="comment">// 结果一</span></span><br><span class="line">Map&lt;String, Object&gt; testMapDes = mapper.readValue(jsonStr, Map.class);</span><br><span class="line">System.out.println(testMapDes); <span class="comment">// 结果二</span></span><br><span class="line"> </span><br><span class="line">结果一：</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;date&quot;</span> : <span class="number">1525164212803</span>,</span><br><span class="line">  <span class="string">&quot;name&quot;</span> : <span class="string">&quot;22&quot;</span>,</span><br><span class="line">  <span class="string">&quot;student&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span> : <span class="string">&quot;hyl&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span> : <span class="number">20</span>,</span><br><span class="line">    <span class="string">&quot;sendTime&quot;</span> : <span class="number">1525164212803</span>,</span><br><span class="line">    <span class="string">&quot;intList&quot;</span> : <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;age&quot;</span> : <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line">结果二：</span><br><span class="line">&#123;date=<span class="number">1525164212803</span>, name=<span class="number">22</span>, student=&#123;name=hyl, age=<span class="number">20</span>, sendTime=<span class="number">1525164212803</span>, intList=<span class="literal">null</span>&#125;, age=<span class="number">20</span>&#125;</span><br></pre></td></tr></table></figure>
<h6 id="（5）日期转json字符串"><a href="#（5）日期转json字符串" class="headerlink" title="（5）日期转json字符串"></a>（5）日期转json字符串</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改时间格式</span></span><br><span class="line">mapper.setDateFormat(<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span> (<span class="string">&quot;hyl&quot;</span>,<span class="number">21</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">student.setIntList(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"> </span><br><span class="line"><span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> mapper.writeValueAsString(student);</span><br><span class="line">System.out.println(jsonStr);</span><br><span class="line"> </span><br><span class="line">结果：</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span> : <span class="string">&quot;hyl&quot;</span>,</span><br><span class="line">  <span class="string">&quot;age&quot;</span> : <span class="number">21</span>,</span><br><span class="line">  <span class="string">&quot;sendTime&quot;</span> : <span class="string">&quot;2020-07-23 13:14:36&quot;</span>,</span><br><span class="line">  <span class="string">&quot;intList&quot;</span> : [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java开发中工具和方法</category>
      </categories>
      <tags>
        <tag>Java开发中工具和方法</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA 2020.3.3 x64激活方法</title>
    <url>/2023/09/25/IntelliJ-IDEA-2020-3-3-x64%E6%BF%80%E6%B4%BB%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<hr>
<h1 id="一、激活工具和注册码"><a href="#一、激活工具和注册码" class="headerlink" title="一、激活工具和注册码"></a>一、激活工具和注册码</h1><p>链接：<a href="https://pan.baidu.com/s/1Kd9DgXzE3O_dU0g6akex6g">https://pan.baidu.com/s/1Kd9DgXzE3O_dU0g6akex6g</a><br>提取码：eool<br>软件请到官网下载2020.3版本：<br><a href="https://www.jetbrains.com/idea/download/#section=windows">https://www.jetbrains.com/idea/download/#section=windows</a><br><strong>注意：<br>Ultimate版本：用于web和企业开发<br>Community版本：用于JVM和Android开发</strong><br><br/></p>
<hr>
<h1 id="二、激活方法"><a href="#二、激活方法" class="headerlink" title="二、激活方法"></a>二、激活方法</h1><p>链接地址：<br><a href="https://www.exception.site/essay/how-to-free-use-idea-202021-by-resigter-code">https://www.exception.site/essay/how-to-free-use-idea-202021-by-resigter-code</a><br><br/></p>
<hr>
<h1 id="三、（以防上面的地址失效弄的激活步骤）"><a href="#三、（以防上面的地址失效弄的激活步骤）" class="headerlink" title="三、（以防上面的地址失效弄的激活步骤）"></a>三、（以防上面的地址失效弄的激活步骤）</h1><p>1.打开已经安装好的 IDEA, 我们选择 30 天免费试用。<img src="/2023/09/25/IntelliJ-IDEA-2020-3-3-x64%E6%BF%80%E6%B4%BB%E6%96%B9%E6%B3%95/1.jpg" class=""><br><strong>(注意，如果没有弹出上面的界面，可执行重置30天试用期脚本，脚本网盘地址下面可获取)</strong><img src="/2023/09/25/IntelliJ-IDEA-2020-3-3-x64%E6%BF%80%E6%B4%BB%E6%96%B9%E6%B3%95/2.jpg" class=""><br><br/><br>2. 进入 IDEA 中， 先随便建个 Java 工程， 然后将网盘中最新的 IDEA 破解补丁 BetterIntelliJ.zip拖入 IDEA 界面中，如下图所示：<img src="/2023/09/25/IntelliJ-IDEA-2020-3-3-x64%E6%BF%80%E6%B4%BB%E6%96%B9%E6%B3%95/3.jpg" class=""><br>   <strong>(注意:<br>   zip 补丁包无需解压 ~ 无需解压 ~ 无需解压 ~<br>   激活后补丁不要移动，不要删除~<br>   补丁安装成功后，需要输入激活补丁key.txt里面的激活码，两个步骤缺一不可，否则会激活失败~)</strong><br><br/><br>3. 如果拖动的方式不成功，还可以通过磁盘安装插件，点击菜单 File -&gt; Settings -&gt; Install Plugin From Disk，图文步骤如下：<img src="/2023/09/25/IntelliJ-IDEA-2020-3-3-x64%E6%BF%80%E6%B4%BB%E6%96%B9%E6%B3%95/4.jpg" class=""><br>   <strong>(注意：安装成功后一定要重启 IDEA !!!<br>   注意：安装成功后一定要重启 IDEA !!!<br>   注意：安装成功后一定要重启 IDEA !!!)<br>   PS: 如果重启一次还是提示 key is invaild, 请再重启一次试试 ！本人就是第一次没效果，再重启一次，再输入 激活补丁key.txt里面的激活码就ok了。</strong><br><br/><br>4. 检查插件是否安装成功<br>   插件安装完成后，建议检查一下是否安装成功，点击菜单：Help -&gt; Edit Custom VM Options…，如果成功，会自动生成<br>   -javaagent:C:\Users\Public.BetterIntelliJ\BetterIntelliJ-版本号.jar<br>   <strong>（如果有其它多余的-javaagent，请删除）</strong><br><br/><br>5. 输入 激活补丁key.txt里面的激活码<br>   重启成功后，点击菜单 Help -&gt; Register -&gt; Add New License ， 如下图所示:<img src="/2023/09/25/IntelliJ-IDEA-2020-3-3-x64%E6%BF%80%E6%B4%BB%E6%96%B9%E6%B3%95/5.jpg" class=""><br>   复制网盘中的 激活补丁key.txt文件中的激活码，拷贝到输入框中，然后点击 Activate 按钮激活：<img src="/2023/09/25/IntelliJ-IDEA-2020-3-3-x64%E6%BF%80%E6%B4%BB%E6%96%B9%E6%B3%95/6.jpg" class=""><br><br/><br>到这里， IDEA 就已经激活成功了 ~</p>
]]></content>
      <categories>
        <category>IntelliJ IDEA 2020.3.3 x64激活方法</category>
      </categories>
      <tags>
        <tag>IntelliJ IDEA 2020.3.3 x64激活方法</tag>
      </tags>
  </entry>
</search>
