{"title":"关于Spring学习笔记","slug":"关于Spring学习笔记","date":"2023-10-04T12:07:18.000Z","updated":"2023-10-06T05:50:17.625Z","comments":true,"path":"api/articles/关于Spring学习笔记.json","realPath":null,"excerpt":null,"covers":["/2023/10/04/%E5%85%B3%E4%BA%8ESpring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.jpg","/2023/10/04/%E5%85%B3%E4%BA%8ESpring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.jpg","/2023/10/04/%E5%85%B3%E4%BA%8ESpring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3.jpg"],"cover":"/2023/10/04/%E5%85%B3%E4%BA%8ESpring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.jpg","content":"<hr>\n<h1 id=\"一、Spring\"><a href=\"#一、Spring\" class=\"headerlink\" title=\"一、Spring\"></a>一、Spring</h1><p><code>spring</code>是一个轻量级的开发框架，为什么是轻量级，因为它所需jar包小，本身的大小也小，并且可以和其他任何框架集成。  </p>\n<br/>\n\n<hr>\n<br/>\n\n\n<h1 id=\"二、SpringBean的生命周期\"><a href=\"#二、SpringBean的生命周期\" class=\"headerlink\" title=\"二、SpringBean的生命周期\"></a>二、SpringBean的生命周期</h1><p><strong>图解：</strong>  </p>\n<img src=\"/2023/10/04/%E5%85%B3%E4%BA%8ESpring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.jpg\" class=\"\">  \n<p><strong>1、实例化</strong><br>在<code>AbstractAutowireCapableBeanFactory</code>类中的<code>createBeanInstance</code>方法中，根据反射的原理实例化bean对象。<br>（1）<code>createBeanInstance</code>方法中第一行是获取<code>Class</code>对象；<br>（2）在<code>instantiateBean</code>方法中，有一行为<code>beanInstance=getInstantiationStrategy（）.instantiate(mbd,beanName,this)</code>；<br>（3）在<code>instantiate</code>方法中的<code>constructorToUse=clazz.getDeclaredConstructor()</code>，这个是使用<code>Class</code>对象获取这个对象的构造器；<br>（4）在<code>instantiateClass</code>方法中的<code>ctor.newInstance(argsWithDefaultValues)</code>，根据构造器获取这个对象的实例。  </p>\n<p><strong>2、初始化（自定义属性赋值）</strong><br>在<code>AbstractAutowireCapableBeanFactory</code>类中的<code>populateBean</code>方法中，使用<code>set</code>方法完成赋值。（使用 PropertyValue 实体类的 set 方法完成赋值 setPropertyValue(pv.getName(), pv.getValue())；  </p>\n<p><strong>3、检查<code>Aware</code>相关接口并设置依赖（容器对象属性赋值）</strong><br>（1）<code>Aware</code>接口是用来干什么的？<br><code>Aware</code>接口相当于是一个标识作用，比如下面的例子：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(object <span class=\"keyword\">instanceof</span> Aware) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(object <span class=\"keyword\">instanceof</span> BeanFactory) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> soming...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(object <span class=\"keyword\">instanceof</span> ApplicationContext) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> soming...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<img src=\"/2023/10/04/%E5%85%B3%E4%BA%8ESpring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.jpg\" class=\"\">  \n<p>上图说明：<br>相当于有多个接口去继承<code>Aware</code>接口，然后有多个类去实现那些接口，在<code>spring</code>容器启动的时候，会分别判断这些类的实例化对象<code>bean</code>属于哪个接口，然后按照那个接口的<code>set</code>方法去赋值。<br>（下面4到7步，每个<code>bean</code>对象都会执行，意思就是：每个<code>bean</code>对象在初始化好之后，都会执行前置处理，然后执行<code>invokeInitMethods</code>方法去判断这个<code>bean</code>对象是否实现了<code>InitializingBean</code>接口，有没有扩展点，如果实现了，就执行<code>afterPropertiesSet</code>方法，这个方法相当于一个扩展点，相当于给这个<code>bean</code>对象增强，最后执行后置处理。）  </p>\n<p>4、<code>BeanPostProcessor</code>前置处理  </p>\n<p>5、检查<code>bean</code>对象实现了<code>InitializingBean</code>接口（执行初始化方法<code>invokeInitMethods</code>，默认没有）  </p>\n<p>6、检查是否配置有自定义的<code>init-method</code>（执行初始化方法<code>invokeInitMethods</code>，默认没有）  </p>\n<p>7、<code>BeanPostProcessor</code>后置处理</p>\n<br/>\n\n<hr>\n<br/>\n\n\n<h1 id=\"三、Spring三大核心\"><a href=\"#三、Spring三大核心\" class=\"headerlink\" title=\"三、Spring三大核心\"></a>三、Spring三大核心</h1><h3 id=\"1、spring-IOC（控制反转）和spring-DI（依赖注入）\"><a href=\"#1、spring-IOC（控制反转）和spring-DI（依赖注入）\" class=\"headerlink\" title=\"1、spring IOC（控制反转）和spring DI（依赖注入）\"></a>1、spring IOC（控制反转）和spring DI（依赖注入）</h3><p><strong>1、什么是<code>IOC</code>控制反转和<code>DI</code>依赖注入？</strong><br>之前我们创建对象，是使用<code>new</code>，<code>new</code>一个对象，但是在<code>spring</code>中，我们不用创建对象，由<code>spring</code>帮我们创建，<code>spring</code>相当于一个容器，我们把对象当成<code>bean</code>，将<code>bean</code>注入（依赖注入）到<code>spring</code>容器中，由<code>spring</code>容器自己帮我们创建和管理对象，在需要使用这个对象的地方使用反射（控制反转）来使用这个对象。<br>例如：<br>（1）以前传统方式创建一个对象：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实体类对象</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String color;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Dog</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Dog</span><span class=\"params\">(String name, String color)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.color = color;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getColor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> color;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setColor</span><span class=\"params\">(String color)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.color = color;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Dog&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, color=&#x27;&quot;</span> + color + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试输出</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Dog</span> <span class=\"variable\">dog</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Dog</span>(<span class=\"string\">&quot;小黑狗&quot;</span>, <span class=\"string\">&quot;黑色&quot;</span>);</span><br><span class=\"line\">        System.out.println(dog.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）现在<code>spring</code>帮我们创建，去<code>xml</code>配置文件中配置<code>bean</code>对象：（也可以使用注解的方式，请查看<code>springboot</code>学习笔记）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 配置属性id的值，相当于给这个实例一个变量名 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 配置属性class的值，就是Dog实体类的包路径 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dog&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;Dog&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 配置property就相当于给对应的属性赋值 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;小黑狗&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;color&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;黑色&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上述配置就相当于在java中的下述代码，差别就是这是写在配置文件中，不会造成程序的耦合：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Dog</span> <span class=\"variable\">dog</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Dog</span>();</span><br><span class=\"line\">apple.setName(<span class=\"string\">&quot;小黑狗&quot;</span>);</span><br><span class=\"line\">apple.setColor(<span class=\"string\">&quot;黑色&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>然后测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Dog;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 通过ClassPathXmlApplicationContext加载dog.xml配置文件，路径是target目录下的相对路径</span></span><br><span class=\"line\">        <span class=\"type\">ApplicationContext</span> <span class=\"variable\">dogContext</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;classpath:dog.xml&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 通过反射获取dog实例对象</span></span><br><span class=\"line\">        <span class=\"type\">Dog</span> <span class=\"variable\">dog</span> <span class=\"operator\">=</span> dogContext.getBean(<span class=\"string\">&quot;dog&quot;</span>, Dog.class);</span><br><span class=\"line\">        System.out.println(dog.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、有参构造创建对象的例子（这里只列xml方式）</strong><br>（1）有一个<code>student</code>类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cn.zuo.pojo</span><br><span class=\"line\"></span><br><span class=\"line\">Student&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">StudentOne</span><span class=\"params\">(String name, Integer age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">(Integer age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;StudentOne&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, age=&quot;</span> + age +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>student.xml</code>文件中：<br>第一种：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;student&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.cn.zuo.pojo.Student&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;xiaoming&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;age&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;29&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>第二种：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;student&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.cn.zuo.pojo.Student&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;xiaogang&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">&quot;1&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;27&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>第三种：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;student&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.cn.zuo.pojo.Student&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;java.lang.String&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;xiaohong&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;int&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;29&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>3、bean的自动注入方法</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//输入autowire=&quot;byName&quot; 就实现自动装配了。</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;people&quot;</span> <span class=\"attr\">calss</span>=<span class=\"string\">&quot;com.cn.zuo.pojo.People&quot;</span> <span class=\"attr\">autowire</span>=<span class=\"string\">&quot;byName&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;xiaoming&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">说明：</span><br><span class=\"line\">    byname，需要保证所有bean的id唯一，并且这个bean需要和自动注入的属性的set方法一致。</span><br><span class=\"line\">    bytype，需要保证所有bean的class唯一，并且这个bean需要和自动注入的属性的类型一致。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、spring-AOP（面向切面）\"><a href=\"#2、spring-AOP（面向切面）\" class=\"headerlink\" title=\"2、spring AOP（面向切面）\"></a>2、spring AOP（面向切面）</h3><p><strong>说明：</strong>需要导入依赖包 org.aspectj，Aop是用来处理那些和业务没有关系的功能和逻辑模块，比如日志、权限等。<br>Aop 是 IOC 整体流程中的一个扩展点。  </p>\n<p>1、<code>SpringAop</code>专业术语</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    add();</span><br><span class=\"line\">    update();</span><br><span class=\"line\">    select();</span><br><span class=\"line\">    delete();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（1）<code>连接点</code>：<code>User</code>类中可以被增强的方法都是连接点，比如上面的<code>add</code>、<code>update</code>、<code>select</code>、<code>delete</code>方法。<br>（2）<code>切入点</code>：实际上被增强的方法叫切入点，比如上面的四个方法中，我增强了<code>add</code>方法、<code>add</code>方法就是切入点。<br>（3）<code>通知（增强）</code>：增强的部分，比如我在<code>add</code>方法中增加一个日志输出，这个日志输出就是通知。通知的类型有：<br>    - 前置通知（BeforeAdvice）：在目标执行之前被调用，对应接口<code>BeforeAdvice</code>。<br>    - 后置通知（AfterReturning）：在目标方法执行之后调用（抛出异常不会执行），对应接口<code>AfterReturnAdvice</code>。<br>    - 环绕通知（前后通知Around）：在目标方法执行前后被调用，对应接口<code>MethodInterceptor</code>。<br>    - 异常通知（AfterThrowingAdvice）：在目标方法抛出异常后调用，对应接口<code>ThrowAdvice</code>。<br>    - 最终通知（相当于fially，After）：在目标方法执行之后被调用（抛出异常也会执行）。<br>（4）<code>切面</code>：把通知切入到切入点的过程。  </p>\n<p>2、通过继承类实现<br>（1）<code>BeforeAdvice</code>类<br>    - 会在目标对象的方法之前被调用<br>    - 通过实现<code>MethodBeforeAdvice</code>接口来实现<br>    - 该接口中定义了一个方法即<code>before</code>方法，该方法会在目标对象<code>target</code>之前执行<br>（2）<code>AfterAdvice</code>类<br>    - 在目标对象的方法执行之后调用<br>    - 通过实现<code>AfterReturningAdvice</code>接口实现<br><strong>例子：</strong>  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DemoOneService业务一</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoOneService</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">demoOne</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;demoOne...&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">demoTwo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;demoTwo...&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">demoThree</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;demoThree...&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DemoTwoService业务二</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoTwoService</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">f</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;f()...&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新增一个MyAfterAdvice类去实现AfterReturningAdvice接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAfterAdvice</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AfterReturningAdvice</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterReturning</span><span class=\"params\">(Object o,Method method,Object[] objects,object o1)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;执行后发出的通知...&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新建一个MyBeforeAdvice类去实现MethodBeforeAdvice接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyBeforeAdvice</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MethodBeforeAdvice</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">(Method method,Object[] objects,Object o)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;执行前发出的通知...&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Spring</code>核心配置文件<code>applicationContext.xml</code>：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t   <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t   <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t   <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">\t   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">\t   http://www.springframework.org/schema/aop</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">\t   http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;mybefore&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;MyBeforeAdvice&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;after&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;MyAfterAdvice&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demoOneService&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;execution(* xxx.xxx.demo.*.*(...))&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:pointcut</span>&gt;</span></span><br><span class=\"line\">\t\t&lt;aop:advisorvadvice-ref=&quot;after&quot; pointcut-ref=&quot;demoOneService&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;aop:advisorvadvice-ref=&quot;mybefore&quot; pointcut-ref=&quot;demoOneService&quot; /&gt;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demoOneService&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;DemoOneService&quot;</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demoTwoService&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;DemoTwoService&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">ApplicationContext</span> <span class=\"variable\">ac</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;applicationContext.xml&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"type\">DemoOneService</span> <span class=\"variable\">do</span> <span class=\"operator\">=</span> ac.getBean(<span class=\"string\">&quot;demoTwoService&quot;</span>,DemoTwoService.class);</span><br><span class=\"line\">\t\t<span class=\"keyword\">do</span>.demoOne();</span><br><span class=\"line\">\t\t<span class=\"keyword\">do</span>.demoTwo();</span><br><span class=\"line\">\t\t<span class=\"keyword\">do</span>.demoThree();</span><br><span class=\"line\">\t\t<span class=\"type\">DemoTwoService</span> <span class=\"variable\">dt</span> <span class=\"operator\">=</span> ac.getBean(<span class=\"string\">&quot;demoTwoService&quot;</span>,DemoTwoService.class);</span><br><span class=\"line\">\t\tdt.f();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、通过xml方式实现<br>（1）第一种（设置切入点）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--    先注册bean--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userServiceImpl&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;service.impl.UserServiceImpl&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;beforeLog&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;log.BeforeLog&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;afterLog&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;log.AfterLog&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 开启aop --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 设置切入点，expression(要切入的位置）execution（*修饰符 *返回值  *方法名 (..)参数) --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;pointcut&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;execution(* service.impl.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 设置要切入的类，设置要切入的点 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:advisor</span> <span class=\"attr\">advice-ref</span>=<span class=\"string\">&quot;beforeLog&quot;</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">&quot;pointcut&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:advisor</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:advisor</span> <span class=\"attr\">advice-ref</span>=<span class=\"string\">&quot;afterLog&quot;</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">&quot;pointcut&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:advisor</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>（2）第二种（设置切入面）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userServiceImpl&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;service.impl.UserServiceImpl&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;diyLog&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;service.diy.DiyLog&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">       <span class=\"comment\">&lt;!--设置切入面--&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">aop:aspect</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;diyLog&quot;</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;point&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;execution(* service.impl.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class=\"line\">           <span class=\"comment\">&lt;!-- method里面的before是增强类中的方法 --&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">aop:before</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;before&quot;</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">&quot;point&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:before</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">aop:after</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;after&quot;</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">&quot;point&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:after</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">aop:aspect</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>4、通过注解配置切面<br>（1）创建一个<code>User</code>类和一个增强类<code>UserProxy</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;add.....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 增强类</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span>  <span class=\"comment\">// 生成增强类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserProxy</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 前置通知</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;before....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）创建一个spring配置文件bean.xml（使用config类来配置请看第<code>(4)</code>点）  </p>\n<ol>\n<li>在配置文件头部声明中加入context、aop声明，开启注解扫描；</li>\n<li>开启Aspect生成代理对象。<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:aspectj-autoproxy</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>（3）在需要增强的方法上增加不同通知的注解<br>比如我在上面增强类UserProxy中before方法上增加前置通知：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@before(value=&quot;execution(* User类的全路径.add(..))&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;before...&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 环绕通知</span></span><br><span class=\"line\"><span class=\"meta\">@Around(value=&quot;execution(* User类的全路径.add(..))&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">around</span><span class=\"params\">(ProceedingJoinPoint p)</span> <span class=\"keyword\">throws</span> Throwable&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;环绕之前...&quot;</span>);</span><br><span class=\"line\">    p.proceed(); <span class=\"comment\">// 执行User类中add方法</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;环绕之后...&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（4）使用Config类来代替xml配置文件  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(basePackages = &#123;&quot;com.zuo&quot;&#125;)</span> <span class=\"comment\">// 相当于xml中的包扫描</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAspectJAutoProxy(proxyTargetClass = true)</span> <span class=\"comment\">// 相当于xml中 &lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConfigAop</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"四、关于Spring中的一些用法\"><a href=\"#四、关于Spring中的一些用法\" class=\"headerlink\" title=\"四、关于Spring中的一些用法\"></a>四、关于Spring中的一些用法</h1><h3 id=\"1、在xml中配置Spring扫描包\"><a href=\"#1、在xml中配置Spring扫描包\" class=\"headerlink\" title=\"1、在xml中配置Spring扫描包\"></a>1、在<code>xml</code>中配置<code>Spring</code>扫描包</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 这是默认配置扫描包，会通过默认的 Filter ,扫描到需要的包 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">&quot;com.cn.zuo.service&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 示例一</span></span><br><span class=\"line\"><span class=\"comment\">use-default-filters=&quot;false&quot; 表示现在不使用默认 filter，自己配置filter </span></span><br><span class=\"line\"><span class=\"comment\">context:include-filter 设置扫描哪些内容，下面的意思是扫描注解，只扫描带Controller注解的类</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">&quot;com.cn.zuo&quot;</span> <span class=\"attr\">use-default-filters</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">context:include-filter</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;annotation&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;org.springframework.stereotype.Controller&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 示例二</span></span><br><span class=\"line\"><span class=\"comment\">context:exclude-filter 设置不扫描哪些内容，下面的意思是不扫描带Controller注解的类，其他在zuo包下的都扫描</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">&quot;com.cn.zuo&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">context:exclude-filter</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;annotation&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;org.springframework.stereotype.Controller&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、开启事物管理和注解\"><a href=\"#2、开启事物管理和注解\" class=\"headerlink\" title=\"2、开启事物管理和注解\"></a>2、开启事物管理和注解</h3><p>（一般在service层加）<br>1、基于注解<br>（1）载入spring-tx依赖，在spring配置文件中加入头部声明，将<code>xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</code>的“xsi”改成“tx”，将<code>xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</code>的<code>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</code>的“beans”改成“tx”。<br>（2）加入事物管理器</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 创建事物管理器 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 注入数据源 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;dataSource&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>（3）开启事物注解</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 开启事务注解 </span></span><br><span class=\"line\"><span class=\"comment\">transaction-manager=&quot;transactionManager&quot;对应上面事务管理器中的id，这个属性的意思是指明开启的是哪个事务管理器 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tx:annotation-driven</span> <span class=\"attr\">transaction-manager</span>=<span class=\"string\">&quot;transactionManager&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tx:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>（4）在service层的实现类上或者方法上加@Transactional  </p>\n<p>2、基于xml<br>同上面<code>1、</code>操作，不要（3）<br>加入通知配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tx:advice</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;随便取&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tx:attributes</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;需要配置事务的方法&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tx:attributes</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>配置切入点</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 开启aop --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 设置切入点，expression(要切入的位置）execution（*修饰符 *返回值  *方法名 (..)参数) --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;pointcut&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;execution(* service.impl.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 设置要切入的类，设置要切入的点 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:advisor</span> <span class=\"attr\">advice-ref</span>=<span class=\"string\">&quot;对应上面随便取的id&quot;</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">&quot;pointcut&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:advisor</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3、完全基于注解<br>（1）创建一个配置类，对比spring配置文件来配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(basePackages = &quot;com.zuo&quot;)</span> <span class=\"comment\">// 相当于xml中的包扫描</span></span><br><span class=\"line\"><span class=\"meta\">@EnableTransactionManagement</span> <span class=\"comment\">// 开启事务</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConfigAop</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建数据库连接池</span></span><br><span class=\"line\">     <span class=\"meta\">@Bean</span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> DruidDataSource <span class=\"title function_\">getDruidDataSource</span> <span class=\"params\">()</span>&#123;</span><br><span class=\"line\">          <span class=\"type\">DruidDataSource</span> <span class=\"variable\">dataSource</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DruidDataSource</span> ();</span><br><span class=\"line\">          dataSource.setDriverClassName(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">          dataSource.setUrl(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">          dataSource.setUsername(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">          dataSource.setPassword(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> dataSource;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 同理创建JdbcTemplate</span></span><br><span class=\"line\">      <span class=\"meta\">@Bean</span></span><br><span class=\"line\">      <span class=\"keyword\">public</span>  JdbcTemplate <span class=\"title function_\">getJdbcTemplate</span><span class=\"params\">(DataSource dataSource)</span>&#123;</span><br><span class=\"line\">          <span class=\"type\">JdbcTemplate</span> <span class=\"variable\">jdbcTemplate</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JdbcTemplate</span>();</span><br><span class=\"line\">          <span class=\"comment\">//jdbcTemplate.setDataSource(getDruidDataSource ()); </span></span><br><span class=\"line\">         <span class=\"comment\">//可以直接调用上面这个方法，但是会重新创建，我们需要用的是spring容器中已经存在的dataSource，</span></span><br><span class=\"line\">        <span class=\"comment\">//所以直接在这个方法里增加一个参数DataSource dataSource，这个dataSource是spring容器中已经存在的。</span></span><br><span class=\"line\">        jdbcTemplate.setDataSource(dataSource);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> jdbcTemplate;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"meta\">@Bean</span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> DataSourceTransactionManager <span class=\"title function_\">getDataSourceTransactionManager</span><span class=\"params\">(DataSource dataSource)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">DataSourceTransactionManager</span> <span class=\"variable\">transactionManager</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataSourceTransactionManager</span>();</span><br><span class=\"line\">        transactionManager.setDataSource(dataSource);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> transactionManager;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"3、新特性之单元测试框架\"><a href=\"#3、新特性之单元测试框架\" class=\"headerlink\" title=\"3、新特性之单元测试框架\"></a>3、新特性之单元测试框架</h3><p>需要导入依赖spring-test</p>\n<img src=\"/2023/10/04/%E5%85%B3%E4%BA%8ESpring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3.jpg\" class=\"\">","more":"<hr>\n<h1 id=\"一、Spring\"><a href=\"#一、Spring\" class=\"headerlink\" title=\"一、Spring\"></a>一、Spring</h1><p><code>spring</code>是一个轻量级的开发框架，为什么是轻量级，因为它所需jar包小，本身的大小也小，并且可以和其他任何框架集成。  </p>\n<br/>\n\n<hr>\n<br/>\n\n\n<h1 id=\"二、SpringBean的生命周期\"><a href=\"#二、SpringBean的生命周期\" class=\"headerlink\" title=\"二、SpringBean的生命周期\"></a>二、SpringBean的生命周期</h1><p><strong>图解：</strong>  </p>\n<img src=\"/2023/10/04/%E5%85%B3%E4%BA%8ESpring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.jpg\" class=\"\">  \n<p><strong>1、实例化</strong><br>在<code>AbstractAutowireCapableBeanFactory</code>类中的<code>createBeanInstance</code>方法中，根据反射的原理实例化bean对象。<br>（1）<code>createBeanInstance</code>方法中第一行是获取<code>Class</code>对象；<br>（2）在<code>instantiateBean</code>方法中，有一行为<code>beanInstance=getInstantiationStrategy（）.instantiate(mbd,beanName,this)</code>；<br>（3）在<code>instantiate</code>方法中的<code>constructorToUse=clazz.getDeclaredConstructor()</code>，这个是使用<code>Class</code>对象获取这个对象的构造器；<br>（4）在<code>instantiateClass</code>方法中的<code>ctor.newInstance(argsWithDefaultValues)</code>，根据构造器获取这个对象的实例。  </p>\n<p><strong>2、初始化（自定义属性赋值）</strong><br>在<code>AbstractAutowireCapableBeanFactory</code>类中的<code>populateBean</code>方法中，使用<code>set</code>方法完成赋值。（使用 PropertyValue 实体类的 set 方法完成赋值 setPropertyValue(pv.getName(), pv.getValue())；  </p>\n<p><strong>3、检查<code>Aware</code>相关接口并设置依赖（容器对象属性赋值）</strong><br>（1）<code>Aware</code>接口是用来干什么的？<br><code>Aware</code>接口相当于是一个标识作用，比如下面的例子：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(object <span class=\"keyword\">instanceof</span> Aware) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(object <span class=\"keyword\">instanceof</span> BeanFactory) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> soming...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(object <span class=\"keyword\">instanceof</span> ApplicationContext) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> soming...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<img src=\"/2023/10/04/%E5%85%B3%E4%BA%8ESpring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.jpg\" class=\"\">  \n<p>上图说明：<br>相当于有多个接口去继承<code>Aware</code>接口，然后有多个类去实现那些接口，在<code>spring</code>容器启动的时候，会分别判断这些类的实例化对象<code>bean</code>属于哪个接口，然后按照那个接口的<code>set</code>方法去赋值。<br>（下面4到7步，每个<code>bean</code>对象都会执行，意思就是：每个<code>bean</code>对象在初始化好之后，都会执行前置处理，然后执行<code>invokeInitMethods</code>方法去判断这个<code>bean</code>对象是否实现了<code>InitializingBean</code>接口，有没有扩展点，如果实现了，就执行<code>afterPropertiesSet</code>方法，这个方法相当于一个扩展点，相当于给这个<code>bean</code>对象增强，最后执行后置处理。）  </p>\n<p>4、<code>BeanPostProcessor</code>前置处理  </p>\n<p>5、检查<code>bean</code>对象实现了<code>InitializingBean</code>接口（执行初始化方法<code>invokeInitMethods</code>，默认没有）  </p>\n<p>6、检查是否配置有自定义的<code>init-method</code>（执行初始化方法<code>invokeInitMethods</code>，默认没有）  </p>\n<p>7、<code>BeanPostProcessor</code>后置处理</p>\n<br/>\n\n<hr>\n<br/>\n\n\n<h1 id=\"三、Spring三大核心\"><a href=\"#三、Spring三大核心\" class=\"headerlink\" title=\"三、Spring三大核心\"></a>三、Spring三大核心</h1><h3 id=\"1、spring-IOC（控制反转）和spring-DI（依赖注入）\"><a href=\"#1、spring-IOC（控制反转）和spring-DI（依赖注入）\" class=\"headerlink\" title=\"1、spring IOC（控制反转）和spring DI（依赖注入）\"></a>1、spring IOC（控制反转）和spring DI（依赖注入）</h3><p><strong>1、什么是<code>IOC</code>控制反转和<code>DI</code>依赖注入？</strong><br>之前我们创建对象，是使用<code>new</code>，<code>new</code>一个对象，但是在<code>spring</code>中，我们不用创建对象，由<code>spring</code>帮我们创建，<code>spring</code>相当于一个容器，我们把对象当成<code>bean</code>，将<code>bean</code>注入（依赖注入）到<code>spring</code>容器中，由<code>spring</code>容器自己帮我们创建和管理对象，在需要使用这个对象的地方使用反射（控制反转）来使用这个对象。<br>例如：<br>（1）以前传统方式创建一个对象：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实体类对象</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String color;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Dog</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Dog</span><span class=\"params\">(String name, String color)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.color = color;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getColor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> color;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setColor</span><span class=\"params\">(String color)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.color = color;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Dog&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, color=&#x27;&quot;</span> + color + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试输出</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Dog</span> <span class=\"variable\">dog</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Dog</span>(<span class=\"string\">&quot;小黑狗&quot;</span>, <span class=\"string\">&quot;黑色&quot;</span>);</span><br><span class=\"line\">        System.out.println(dog.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）现在<code>spring</code>帮我们创建，去<code>xml</code>配置文件中配置<code>bean</code>对象：（也可以使用注解的方式，请查看<code>springboot</code>学习笔记）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 配置属性id的值，相当于给这个实例一个变量名 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 配置属性class的值，就是Dog实体类的包路径 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dog&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;Dog&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 配置property就相当于给对应的属性赋值 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;小黑狗&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;color&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;黑色&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上述配置就相当于在java中的下述代码，差别就是这是写在配置文件中，不会造成程序的耦合：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Dog</span> <span class=\"variable\">dog</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Dog</span>();</span><br><span class=\"line\">apple.setName(<span class=\"string\">&quot;小黑狗&quot;</span>);</span><br><span class=\"line\">apple.setColor(<span class=\"string\">&quot;黑色&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>然后测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Dog;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 通过ClassPathXmlApplicationContext加载dog.xml配置文件，路径是target目录下的相对路径</span></span><br><span class=\"line\">        <span class=\"type\">ApplicationContext</span> <span class=\"variable\">dogContext</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;classpath:dog.xml&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 通过反射获取dog实例对象</span></span><br><span class=\"line\">        <span class=\"type\">Dog</span> <span class=\"variable\">dog</span> <span class=\"operator\">=</span> dogContext.getBean(<span class=\"string\">&quot;dog&quot;</span>, Dog.class);</span><br><span class=\"line\">        System.out.println(dog.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、有参构造创建对象的例子（这里只列xml方式）</strong><br>（1）有一个<code>student</code>类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cn.zuo.pojo</span><br><span class=\"line\"></span><br><span class=\"line\">Student&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">StudentOne</span><span class=\"params\">(String name, Integer age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">(Integer age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;StudentOne&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, age=&quot;</span> + age +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>student.xml</code>文件中：<br>第一种：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;student&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.cn.zuo.pojo.Student&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;xiaoming&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;age&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;29&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>第二种：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;student&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.cn.zuo.pojo.Student&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;xiaogang&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">&quot;1&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;27&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>第三种：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;student&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.cn.zuo.pojo.Student&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;java.lang.String&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;xiaohong&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;int&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;29&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>3、bean的自动注入方法</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//输入autowire=&quot;byName&quot; 就实现自动装配了。</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;people&quot;</span> <span class=\"attr\">calss</span>=<span class=\"string\">&quot;com.cn.zuo.pojo.People&quot;</span> <span class=\"attr\">autowire</span>=<span class=\"string\">&quot;byName&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;xiaoming&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">说明：</span><br><span class=\"line\">    byname，需要保证所有bean的id唯一，并且这个bean需要和自动注入的属性的set方法一致。</span><br><span class=\"line\">    bytype，需要保证所有bean的class唯一，并且这个bean需要和自动注入的属性的类型一致。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、spring-AOP（面向切面）\"><a href=\"#2、spring-AOP（面向切面）\" class=\"headerlink\" title=\"2、spring AOP（面向切面）\"></a>2、spring AOP（面向切面）</h3><p><strong>说明：</strong>需要导入依赖包 org.aspectj，Aop是用来处理那些和业务没有关系的功能和逻辑模块，比如日志、权限等。<br>Aop 是 IOC 整体流程中的一个扩展点。  </p>\n<p>1、<code>SpringAop</code>专业术语</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    add();</span><br><span class=\"line\">    update();</span><br><span class=\"line\">    select();</span><br><span class=\"line\">    delete();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（1）<code>连接点</code>：<code>User</code>类中可以被增强的方法都是连接点，比如上面的<code>add</code>、<code>update</code>、<code>select</code>、<code>delete</code>方法。<br>（2）<code>切入点</code>：实际上被增强的方法叫切入点，比如上面的四个方法中，我增强了<code>add</code>方法、<code>add</code>方法就是切入点。<br>（3）<code>通知（增强）</code>：增强的部分，比如我在<code>add</code>方法中增加一个日志输出，这个日志输出就是通知。通知的类型有：<br>    - 前置通知（BeforeAdvice）：在目标执行之前被调用，对应接口<code>BeforeAdvice</code>。<br>    - 后置通知（AfterReturning）：在目标方法执行之后调用（抛出异常不会执行），对应接口<code>AfterReturnAdvice</code>。<br>    - 环绕通知（前后通知Around）：在目标方法执行前后被调用，对应接口<code>MethodInterceptor</code>。<br>    - 异常通知（AfterThrowingAdvice）：在目标方法抛出异常后调用，对应接口<code>ThrowAdvice</code>。<br>    - 最终通知（相当于fially，After）：在目标方法执行之后被调用（抛出异常也会执行）。<br>（4）<code>切面</code>：把通知切入到切入点的过程。  </p>\n<p>2、通过继承类实现<br>（1）<code>BeforeAdvice</code>类<br>    - 会在目标对象的方法之前被调用<br>    - 通过实现<code>MethodBeforeAdvice</code>接口来实现<br>    - 该接口中定义了一个方法即<code>before</code>方法，该方法会在目标对象<code>target</code>之前执行<br>（2）<code>AfterAdvice</code>类<br>    - 在目标对象的方法执行之后调用<br>    - 通过实现<code>AfterReturningAdvice</code>接口实现<br><strong>例子：</strong>  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DemoOneService业务一</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoOneService</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">demoOne</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;demoOne...&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">demoTwo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;demoTwo...&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">demoThree</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;demoThree...&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DemoTwoService业务二</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoTwoService</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">f</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;f()...&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新增一个MyAfterAdvice类去实现AfterReturningAdvice接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAfterAdvice</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AfterReturningAdvice</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterReturning</span><span class=\"params\">(Object o,Method method,Object[] objects,object o1)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;执行后发出的通知...&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新建一个MyBeforeAdvice类去实现MethodBeforeAdvice接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyBeforeAdvice</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MethodBeforeAdvice</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">(Method method,Object[] objects,Object o)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;执行前发出的通知...&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Spring</code>核心配置文件<code>applicationContext.xml</code>：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t   <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t   <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t   <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">\t   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">\t   http://www.springframework.org/schema/aop</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">\t   http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;mybefore&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;MyBeforeAdvice&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;after&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;MyAfterAdvice&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demoOneService&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;execution(* xxx.xxx.demo.*.*(...))&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:pointcut</span>&gt;</span></span><br><span class=\"line\">\t\t&lt;aop:advisorvadvice-ref=&quot;after&quot; pointcut-ref=&quot;demoOneService&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;aop:advisorvadvice-ref=&quot;mybefore&quot; pointcut-ref=&quot;demoOneService&quot; /&gt;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demoOneService&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;DemoOneService&quot;</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demoTwoService&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;DemoTwoService&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">ApplicationContext</span> <span class=\"variable\">ac</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;applicationContext.xml&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"type\">DemoOneService</span> <span class=\"variable\">do</span> <span class=\"operator\">=</span> ac.getBean(<span class=\"string\">&quot;demoTwoService&quot;</span>,DemoTwoService.class);</span><br><span class=\"line\">\t\t<span class=\"keyword\">do</span>.demoOne();</span><br><span class=\"line\">\t\t<span class=\"keyword\">do</span>.demoTwo();</span><br><span class=\"line\">\t\t<span class=\"keyword\">do</span>.demoThree();</span><br><span class=\"line\">\t\t<span class=\"type\">DemoTwoService</span> <span class=\"variable\">dt</span> <span class=\"operator\">=</span> ac.getBean(<span class=\"string\">&quot;demoTwoService&quot;</span>,DemoTwoService.class);</span><br><span class=\"line\">\t\tdt.f();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、通过xml方式实现<br>（1）第一种（设置切入点）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--    先注册bean--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userServiceImpl&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;service.impl.UserServiceImpl&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;beforeLog&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;log.BeforeLog&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;afterLog&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;log.AfterLog&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 开启aop --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 设置切入点，expression(要切入的位置）execution（*修饰符 *返回值  *方法名 (..)参数) --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;pointcut&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;execution(* service.impl.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 设置要切入的类，设置要切入的点 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:advisor</span> <span class=\"attr\">advice-ref</span>=<span class=\"string\">&quot;beforeLog&quot;</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">&quot;pointcut&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:advisor</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:advisor</span> <span class=\"attr\">advice-ref</span>=<span class=\"string\">&quot;afterLog&quot;</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">&quot;pointcut&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:advisor</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>（2）第二种（设置切入面）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userServiceImpl&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;service.impl.UserServiceImpl&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;diyLog&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;service.diy.DiyLog&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">       <span class=\"comment\">&lt;!--设置切入面--&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">aop:aspect</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;diyLog&quot;</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;point&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;execution(* service.impl.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class=\"line\">           <span class=\"comment\">&lt;!-- method里面的before是增强类中的方法 --&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">aop:before</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;before&quot;</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">&quot;point&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:before</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">aop:after</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;after&quot;</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">&quot;point&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:after</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">aop:aspect</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>4、通过注解配置切面<br>（1）创建一个<code>User</code>类和一个增强类<code>UserProxy</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;add.....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 增强类</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span>  <span class=\"comment\">// 生成增强类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserProxy</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 前置通知</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;before....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）创建一个spring配置文件bean.xml（使用config类来配置请看第<code>(4)</code>点）  </p>\n<ol>\n<li>在配置文件头部声明中加入context、aop声明，开启注解扫描；</li>\n<li>开启Aspect生成代理对象。<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:aspectj-autoproxy</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>（3）在需要增强的方法上增加不同通知的注解<br>比如我在上面增强类UserProxy中before方法上增加前置通知：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@before(value=&quot;execution(* User类的全路径.add(..))&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;before...&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 环绕通知</span></span><br><span class=\"line\"><span class=\"meta\">@Around(value=&quot;execution(* User类的全路径.add(..))&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">around</span><span class=\"params\">(ProceedingJoinPoint p)</span> <span class=\"keyword\">throws</span> Throwable&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;环绕之前...&quot;</span>);</span><br><span class=\"line\">    p.proceed(); <span class=\"comment\">// 执行User类中add方法</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;环绕之后...&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（4）使用Config类来代替xml配置文件  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(basePackages = &#123;&quot;com.zuo&quot;&#125;)</span> <span class=\"comment\">// 相当于xml中的包扫描</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAspectJAutoProxy(proxyTargetClass = true)</span> <span class=\"comment\">// 相当于xml中 &lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConfigAop</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"四、关于Spring中的一些用法\"><a href=\"#四、关于Spring中的一些用法\" class=\"headerlink\" title=\"四、关于Spring中的一些用法\"></a>四、关于Spring中的一些用法</h1><h3 id=\"1、在xml中配置Spring扫描包\"><a href=\"#1、在xml中配置Spring扫描包\" class=\"headerlink\" title=\"1、在xml中配置Spring扫描包\"></a>1、在<code>xml</code>中配置<code>Spring</code>扫描包</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 这是默认配置扫描包，会通过默认的 Filter ,扫描到需要的包 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">&quot;com.cn.zuo.service&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 示例一</span></span><br><span class=\"line\"><span class=\"comment\">use-default-filters=&quot;false&quot; 表示现在不使用默认 filter，自己配置filter </span></span><br><span class=\"line\"><span class=\"comment\">context:include-filter 设置扫描哪些内容，下面的意思是扫描注解，只扫描带Controller注解的类</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">&quot;com.cn.zuo&quot;</span> <span class=\"attr\">use-default-filters</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">context:include-filter</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;annotation&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;org.springframework.stereotype.Controller&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 示例二</span></span><br><span class=\"line\"><span class=\"comment\">context:exclude-filter 设置不扫描哪些内容，下面的意思是不扫描带Controller注解的类，其他在zuo包下的都扫描</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">&quot;com.cn.zuo&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">context:exclude-filter</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;annotation&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;org.springframework.stereotype.Controller&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、开启事物管理和注解\"><a href=\"#2、开启事物管理和注解\" class=\"headerlink\" title=\"2、开启事物管理和注解\"></a>2、开启事物管理和注解</h3><p>（一般在service层加）<br>1、基于注解<br>（1）载入spring-tx依赖，在spring配置文件中加入头部声明，将<code>xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</code>的“xsi”改成“tx”，将<code>xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</code>的<code>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</code>的“beans”改成“tx”。<br>（2）加入事物管理器</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 创建事物管理器 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 注入数据源 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;dataSource&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>（3）开启事物注解</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 开启事务注解 </span></span><br><span class=\"line\"><span class=\"comment\">transaction-manager=&quot;transactionManager&quot;对应上面事务管理器中的id，这个属性的意思是指明开启的是哪个事务管理器 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tx:annotation-driven</span> <span class=\"attr\">transaction-manager</span>=<span class=\"string\">&quot;transactionManager&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tx:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>（4）在service层的实现类上或者方法上加@Transactional  </p>\n<p>2、基于xml<br>同上面<code>1、</code>操作，不要（3）<br>加入通知配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tx:advice</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;随便取&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tx:attributes</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;需要配置事务的方法&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tx:attributes</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>配置切入点</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 开启aop --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 设置切入点，expression(要切入的位置）execution（*修饰符 *返回值  *方法名 (..)参数) --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;pointcut&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;execution(* service.impl.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 设置要切入的类，设置要切入的点 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:advisor</span> <span class=\"attr\">advice-ref</span>=<span class=\"string\">&quot;对应上面随便取的id&quot;</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">&quot;pointcut&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:advisor</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3、完全基于注解<br>（1）创建一个配置类，对比spring配置文件来配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(basePackages = &quot;com.zuo&quot;)</span> <span class=\"comment\">// 相当于xml中的包扫描</span></span><br><span class=\"line\"><span class=\"meta\">@EnableTransactionManagement</span> <span class=\"comment\">// 开启事务</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConfigAop</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建数据库连接池</span></span><br><span class=\"line\">     <span class=\"meta\">@Bean</span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> DruidDataSource <span class=\"title function_\">getDruidDataSource</span> <span class=\"params\">()</span>&#123;</span><br><span class=\"line\">          <span class=\"type\">DruidDataSource</span> <span class=\"variable\">dataSource</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DruidDataSource</span> ();</span><br><span class=\"line\">          dataSource.setDriverClassName(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">          dataSource.setUrl(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">          dataSource.setUsername(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">          dataSource.setPassword(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> dataSource;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 同理创建JdbcTemplate</span></span><br><span class=\"line\">      <span class=\"meta\">@Bean</span></span><br><span class=\"line\">      <span class=\"keyword\">public</span>  JdbcTemplate <span class=\"title function_\">getJdbcTemplate</span><span class=\"params\">(DataSource dataSource)</span>&#123;</span><br><span class=\"line\">          <span class=\"type\">JdbcTemplate</span> <span class=\"variable\">jdbcTemplate</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JdbcTemplate</span>();</span><br><span class=\"line\">          <span class=\"comment\">//jdbcTemplate.setDataSource(getDruidDataSource ()); </span></span><br><span class=\"line\">         <span class=\"comment\">//可以直接调用上面这个方法，但是会重新创建，我们需要用的是spring容器中已经存在的dataSource，</span></span><br><span class=\"line\">        <span class=\"comment\">//所以直接在这个方法里增加一个参数DataSource dataSource，这个dataSource是spring容器中已经存在的。</span></span><br><span class=\"line\">        jdbcTemplate.setDataSource(dataSource);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> jdbcTemplate;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"meta\">@Bean</span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> DataSourceTransactionManager <span class=\"title function_\">getDataSourceTransactionManager</span><span class=\"params\">(DataSource dataSource)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">DataSourceTransactionManager</span> <span class=\"variable\">transactionManager</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataSourceTransactionManager</span>();</span><br><span class=\"line\">        transactionManager.setDataSource(dataSource);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> transactionManager;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"3、新特性之单元测试框架\"><a href=\"#3、新特性之单元测试框架\" class=\"headerlink\" title=\"3、新特性之单元测试框架\"></a>3、新特性之单元测试框架</h3><p>需要导入依赖spring-test</p>\n<img src=\"/2023/10/04/%E5%85%B3%E4%BA%8ESpring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3.jpg\" class=\"\">","categories":[{"name":"后端技术","path":"api/categories/后端技术.json"},{"name":"Spring","path":"api/categories/Spring.json"}],"tags":[{"name":"Spring","path":"api/tags/Spring.json"}]}