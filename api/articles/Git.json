{
  "title": "Git 学习笔记",
  "slug": "Git",
  "date": "2023-09-25T09:52:33.000Z",
  "updated": "2023-10-08T02:21:16.783Z",
  "comments": true,
  "path": "api/articles/Git.json",
  "realPath": null,
  "excerpt": null,
  "covers": [
    "/assets/posts/Git/1.jpg",
    "/assets/posts/Git/2.jpg",
    "/assets/posts/Git/3.jpg",
    "/assets/posts/Git/4.png",
    "/assets/posts/Git/5.jpg",
    "/assets/posts/Git/6.jpg",
    "/assets/posts/Git/7.jpg"
  ],
  "cover": "http://lc-YBz2laX5.cn-n1.lcfile.com/dM7Ew9h3YAKVsJHMPYvQFXLPSPWn6Tvw/cover_background.jpg",
  "content": "<hr>\n<h1 id=\"一、图标含义\"><a href=\"#一、图标含义\" class=\"headerlink\" title=\"一、图标含义\"></a>一、图标含义</h1><h3 id=\"1、简单说明\"><a href=\"#1、简单说明\" class=\"headerlink\" title=\"1、简单说明\"></a>1、简单说明</h3><p>（1）<a href=\"https://www.jianshu.com/p/4363a5b8895f?ivk_sa=1024320u\">master、origin master 与 origin&#x2F;master介绍</a><br>（2）o&#x2F;master(remote name&#x2F;branch name):远程仓库名&#x2F;分支名。<br>（3）Git Bash：Unix与Linux风格的命令行，使用最多，推荐最多。<br>（4）Git CMD：Windows风格的命令行。<br>（5）Git GUI：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令。  </p>\n<h3 id=\"2、日常更新上传的步骤：\"><a href=\"#2、日常更新上传的步骤：\" class=\"headerlink\" title=\"2、日常更新上传的步骤：\"></a>2、日常更新上传的步骤：</h3><ul>\n<li>git add</li>\n<li>git commit</li>\n<li>git pull</li>\n<li>git push</li>\n</ul>\n<h3 id=\"3、关于IDEA集成字体颜色\"><a href=\"#3、关于IDEA集成字体颜色\" class=\"headerlink\" title=\"3、关于IDEA集成字体颜色\"></a>3、关于IDEA集成字体颜色</h3><ul>\n<li><span style=\"color:green\">绿色</span>，已经加入控制暂未提交</li>\n<li><span style=\"color:red\">红色</span>，未加入版本控制</li>\n<li><span style=\"color:blue\">蓝色</span>，加入，已提交，有改动</li>\n<li>白色，加入，已提交，无改动</li>\n<li><span style=\"color:#cccccc\">灰色</span>，版本控制已忽略文件</li>\n</ul>\n<h3 id=\"4、分支说明：\"><a href=\"#4、分支说明：\" class=\"headerlink\" title=\"4、分支说明：\"></a>4、分支说明：</h3><p>每个分支都是一个完整的项目，互不影响。<img src=\"/assets/posts/Git/1.jpg\" class=\"\"></p>\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"二、Git-常用命令\"><a href=\"#二、Git-常用命令\" class=\"headerlink\" title=\"二、Git 常用命令\"></a>二、Git 常用命令</h1><h3 id=\"1、设置全局变量\"><a href=\"#1、设置全局变量\" class=\"headerlink\" title=\"1、设置全局变量\"></a>1、设置全局变量</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config <span class=\"attr\">--global</span> user<span class=\"selector-class\">.name</span> <span class=\"string\">&quot;zjy&quot;</span> <span class=\"comment\">// 这个和账号没关系，只是一个用户签名</span></span><br><span class=\"line\">git config <span class=\"attr\">--global</span> user<span class=\"selector-class\">.email</span> <span class=\"string\">&quot;xxxx@qq.com&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2、常用操作\"><a href=\"#2、常用操作\" class=\"headerlink\" title=\"2、常用操作\"></a>2、常用操作</h3><h6 id=\"（1）初始化\"><a href=\"#（1）初始化\" class=\"headerlink\" title=\"（1）初始化\"></a>（1）初始化</h6><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span> 需要新建一个目录，在此目录执行之后，这个目录里就有了本地git仓库</span><br><span class=\"line\">git init </span><br></pre></td></tr></table></figure>\n<h6 id=\"（2）下载项目\"><a href=\"#（2）下载项目\" class=\"headerlink\" title=\"（2）下载项目\"></a>（2）下载项目</h6><p>说明：下载项目不需要管理凭证，但是只要把代码推送到远程的就需要管理凭证，一台电脑只有一个管理凭证，管理凭证就是git账号</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">clone</span> <span class=\"title\">【url</span>】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（3）查看所有提交跟踪状态\"><a href=\"#（3）查看所有提交跟踪状态\" class=\"headerlink\" title=\"（3）查看所有提交跟踪状态\"></a>（3）查看所有提交跟踪状态</h6><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">//</span> 单个文件查看</span><br><span class=\"line\">git status 文件名</span><br></pre></td></tr></table></figure>\n<h6 id=\"（4）加入到暂存区\"><a href=\"#（4）加入到暂存区\" class=\"headerlink\" title=\"（4）加入到暂存区\"></a>（4）加入到暂存区</h6><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">git</span> <span class=\"keyword\">add</span> 文件名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 添加所有文件到暂存区</span></span><br><span class=\"line\"><span class=\"symbol\">git</span> <span class=\"keyword\">add</span> .</span><br></pre></td></tr></table></figure>\n<h6 id=\"（5）提交暂存区的文件到本地仓库\"><a href=\"#（5）提交暂存区的文件到本地仓库\" class=\"headerlink\" title=\"（5）提交暂存区的文件到本地仓库\"></a>（5）提交暂存区的文件到本地仓库</h6><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">git</span> commit -m 【提交的备注信息】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（6）创建公钥密钥\"><a href=\"#（6）创建公钥密钥\" class=\"headerlink\" title=\"（6）创建公钥密钥\"></a>（6）创建公钥密钥</h6><figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -<span class=\"built_in\">t</span> rsa -C 【邮箱】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（7）列出所有本地分支\"><a href=\"#（7）列出所有本地分支\" class=\"headerlink\" title=\"（7）列出所有本地分支\"></a>（7）列出所有本地分支</h6><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span> git branch -v:列出所有本地分支和分支信息</span><br><span class=\"line\">git branch</span><br></pre></td></tr></table></figure>\n<h6 id=\"（8）列出所有远程分支\"><a href=\"#（8）列出所有远程分支\" class=\"headerlink\" title=\"（8）列出所有远程分支\"></a>（8）列出所有远程分支</h6><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">git branch -r</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"（9）新建一个分支，但依然停留在当前分支\"><a href=\"#（9）新建一个分支，但依然停留在当前分支\" class=\"headerlink\" title=\"（9）新建一个分支，但依然停留在当前分支\"></a>（9）新建一个分支，但依然停留在当前分支</h6><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">branch </span>【分支名字】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（10）新建一个分支，并切换到该分支\"><a href=\"#（10）新建一个分支，并切换到该分支\" class=\"headerlink\" title=\"（10）新建一个分支，并切换到该分支\"></a>（10）新建一个分支，并切换到该分支</h6><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">git</span> checkout -<span class=\"keyword\">b</span> 【分支名字】</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 只切换分支</span></span><br><span class=\"line\"><span class=\"symbol\">git</span> checkout 【分支名字】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（11）合并指定分支到当前分支\"><a href=\"#（11）合并指定分支到当前分支\" class=\"headerlink\" title=\"（11）合并指定分支到当前分支\"></a>（11）合并指定分支到当前分支</h6><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span> 在分支<span class=\"number\">1</span>使用该命令，分支<span class=\"number\">2</span>合并到分支<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"regexp\">//</span> 例如：在分支<span class=\"number\">1</span>使用，git merge 分支<span class=\"number\">2</span>，将分支<span class=\"number\">2</span>合并到分支<span class=\"number\">1</span></span><br><span class=\"line\">git merge 【要合并的分支名字】</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">//</span> 在分支<span class=\"number\">1</span>使用该命令，将分支<span class=\"number\">1</span>合并到分支<span class=\"number\">2</span>（将自己写的代码提到最前面）</span><br><span class=\"line\"><span class=\"regexp\">//</span> 例如：在分支<span class=\"number\">1</span>使用，git rebase 分支<span class=\"number\">2</span>，将分支<span class=\"number\">1</span>合并到分支<span class=\"number\">2</span></span><br><span class=\"line\">git rebase 【要合并到的分支名字】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（12）删除分支\"><a href=\"#（12）删除分支\" class=\"headerlink\" title=\"（12）删除分支\"></a>（12）删除分支</h6><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d 【分支名字】</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">//</span> 删除远程分支方法一</span><br><span class=\"line\">git push origin --<span class=\"keyword\">delete</span> 【分支名字】</span><br><span class=\"line\"><span class=\"regexp\">//</span> 删除远程分支方法二</span><br><span class=\"line\">git branch -dr 【remote/branch】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（13）强制移动HEAD\"><a href=\"#（13）强制移动HEAD\" class=\"headerlink\" title=\"（13）强制移动HEAD\"></a>（13）强制移动HEAD</h6><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 将<span class=\"literal\">master</span>向上移动<span class=\"number\">3</span>个节点</span><br><span class=\"line\">git branch -f <span class=\"keyword\">master</span> <span class=\"title\">HEAD</span>~<span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"（14）查看日志信息\"><a href=\"#（14）查看日志信息\" class=\"headerlink\" title=\"（14）查看日志信息\"></a>（14）查看日志信息</h6><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">ref</span>log</span><br></pre></td></tr></table></figure>\n<h6 id=\"（15）查看详细信息\"><a href=\"#（15）查看详细信息\" class=\"headerlink\" title=\"（15）查看详细信息\"></a>（15）查看详细信息</h6><figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"（16）回退到某个版本\"><a href=\"#（16）回退到某个版本\" class=\"headerlink\" title=\"（16）回退到某个版本\"></a>（16）回退到某个版本</h6><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span> 版本号从信息里查看</span><br><span class=\"line\">git reset --hard 【版本号】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（17）查看远程库所有别名\"><a href=\"#（17）查看远程库所有别名\" class=\"headerlink\" title=\"（17）查看远程库所有别名\"></a>（17）查看远程库所有别名</h6><p><strong>说明：</strong>别名的意思是项目链接太长了，给项目重新取一个别名。  </p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">git remote -v</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"（18）创建别名\"><a href=\"#（18）创建别名\" class=\"headerlink\" title=\"（18）创建别名\"></a>（18）创建别名</h6><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote <span class=\"built_in\">add</span> 【别名】 【项目链接】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（19）推送本地库的代码到远程库\"><a href=\"#（19）推送本地库的代码到远程库\" class=\"headerlink\" title=\"（19）推送本地库的代码到远程库\"></a>（19）推送本地库的代码到远程库</h6><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">push</span> （别名） 【分支名】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（20）拉取远程库的代码到本地库\"><a href=\"#（20）拉取远程库的代码到本地库\" class=\"headerlink\" title=\"（20）拉取远程库的代码到本地库\"></a>（20）拉取远程库的代码到本地库</h6><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">git</span> pull （别名） 【分支名】</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"三、git用法图解\"><a href=\"#三、git用法图解\" class=\"headerlink\" title=\"三、git用法图解\"></a>三、git用法图解</h1><img src=\"/assets/posts/Git/2.jpg\" class=\"\">\n\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"四、Git流程说明\"><a href=\"#四、Git流程说明\" class=\"headerlink\" title=\"四、Git流程说明\"></a>四、Git流程说明</h1><p>（1）当前在master分支上，需要开发master分支的项目。<br>（2）创建一个开发分支 dev ，git branch dev，dev分支创建成功，dev上存在和master分支一摸一样的项目，当前所在的分支还是master。<br>（3）切换分支，git checkout dev，从当前分支master切换到开发分支dev。（也可以 2 和 3 合并起来，就是 git checkout -b dev，新建一个开发分支dev，并切换到 dev 分支）<br>（4）在开发分支 dev 开发项目，开发完成，准备合并分支。<br>（5）将把开发分支dev合并到master分支上，先切换到master分支，然后键入 git merge dev。（也可以这样，不切换到master分支，当前所在分支为开发分支dev，然后 git rebase master，将dev分支合并到master分支上）</p>\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"五、Git集成IDEA\"><a href=\"#五、Git集成IDEA\" class=\"headerlink\" title=\"五、Git集成IDEA\"></a>五、Git集成IDEA</h1><p>1、首先先配置忽略的配置，作用是：每当把项目上传的时候，git会将所有文件默认选取，为了把一些不必要的文件忽略，所以配置忽略文件。<br>创建 xxx.ignore 文件，然后将需要忽略的文件键入，在.gitconfig配置文件中输入<br>需要用到正斜线 “ &#x2F; ”，不能用反斜线 “ \\ ”</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[core]</span></span><br><span class=\"line\">    <span class=\"attr\">excludesfile</span> = xxx.ignore文件地址</span><br></pre></td></tr></table></figure>\n<p>2、IDEA配置Git</p>\n<img src=\"/assets/posts/Git/3.jpg\" class=\"\">\n\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"六、Git-流程idea更新代码时的两个选项Merge-the-incoming-changes-into-the-current-branch与Rebase-the-current-branch-on-top-of-the-incoming-changes\"><a href=\"#六、Git-流程idea更新代码时的两个选项Merge-the-incoming-changes-into-the-current-branch与Rebase-the-current-branch-on-top-of-the-incoming-changes\" class=\"headerlink\" title=\"六、Git 流程idea更新代码时的两个选项Merge the incoming changes into the current branch与Rebase the current branch on top of the incoming changes\"></a>六、Git 流程idea更新代码时的两个选项Merge the incoming changes into the current branch与Rebase the current branch on top of the incoming changes</h1><p>1、第一个Merge<br>一般都使用这个，这个是按照时间顺序更新代码，什么意思呢，就是有两个场景：<br>假如有两个开发人员a、b都在同一个分支test上进行开发：<br>（1）a、b把代码都拉下来；<br>（2）a进行开发，在a开发的同时，b可能也在开发（场景一），可能没有（场景二）；<br>（3）场景一：a开发之后，更新代码并提交代码，然后b也开发好，更新代码，因为Merge更新代码是按照时间来更新的，所以不会出现冲突问题，b很顺利地将代码更新下来；<br>（4）场景二：a开发之后，更新代码并提交代码，b没有进行开发，直接更新代码，这个肯定顺利成功。<br>2、第二个Rebase<br>这个是将别人的代码先更新下来，然后将自己的代码提到最顶端，什么意思呢，就比如：<br>两个开发人员a、b在同一个分支test上进行开发：<br>（1）a、b把代码都拉下来；<br>（2）a进行开发，在a开发的同时，b可能也在开发（场景一），可能没有（场景二）；<br>（3）场景一：a开发之后，更新代码并提交代码，然后b也开发好，更新代码，此时就会出现问题，它会更新代码，将b代码覆盖下来，就会冲突；<br>（4）场景二：b没有开发代码，直接更新代码，这是没有问题的。</p>\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"七、IDEA上面使用Git提交到本地仓库怎么回退\"><a href=\"#七、IDEA上面使用Git提交到本地仓库怎么回退\" class=\"headerlink\" title=\"七、IDEA上面使用Git提交到本地仓库怎么回退\"></a>七、IDEA上面使用Git提交到本地仓库怎么回退</h1><p>1、右键选中需要回退的文件，点击git</p>\n<img src=\"/assets/posts/Git/4.png\" class=\"\">\n<p>2、使用 HEAD^ 来描述版本，一个 ^ 表示前一个版本，两个 ^^ 表示前两个版本，以此类推。也可以使用数字来代替 ^，比如说前 100 个版本可以写作 HEAD~100。</p>\n<img src=\"/assets/posts/Git/5.jpg\" class=\"\">\n<p>3、回退</p>\n<img src=\"/assets/posts/Git/6.jpg\" class=\"\">\n\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"八、Git提交规范（fix、feat等字段含义）\"><a href=\"#八、Git提交规范（fix、feat等字段含义）\" class=\"headerlink\" title=\"八、Git提交规范（fix、feat等字段含义）\"></a>八、Git提交规范（fix、feat等字段含义）</h1><p>feat: 新功能（feature）<br>fix: 修补bug<br>docs: 文档（documentation）<br>style: 格式（不影响代码运行的变动）<br>refactor: 重构（即不是新增功能，也不是修改bug的代码变动）<br>chore: 构建过程或辅助工具的变动<br>revert: 撤销，版本回退<br>perf: 性能优化<br>test：测试<br>improvement: 改进<br>build: 打包<br>ci: 持续集成</p>\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"九、git-merge和git-rebase使用方法（都是针对本地来进行合并的）\"><a href=\"#九、git-merge和git-rebase使用方法（都是针对本地来进行合并的）\" class=\"headerlink\" title=\"九、git merge和git rebase使用方法（都是针对本地来进行合并的）\"></a>九、git merge和git rebase使用方法（都是针对本地来进行合并的）</h1><p>有三个分支master、dev、test：<br>（1）A在dev上开发功能，完成功能开发，先得在dev分支提交开发的功能模块，然后推送到远程服务器，然后git checkout master切换到本地的master分支，使用git merge dev将在dev分支上开发的功能合并到本地的master分支，然后推送到远程服务器；<br>（2）B在本地切换到master分支，更新代码，在本地git checkout test切换到test分支，在使用git rebase master将更新下来的代码合并到自己的本地test分支上。</p>\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"十、Git常见的问题\"><a href=\"#十、Git常见的问题\" class=\"headerlink\" title=\"十、Git常见的问题\"></a>十、Git常见的问题</h1><h3 id=\"1、error-remote-origin-already-exists\"><a href=\"#1、error-remote-origin-already-exists\" class=\"headerlink\" title=\"1、error: remote origin already exists.\"></a>1、error: remote origin already exists.</h3><p><strong>说明：</strong>当本地向远程仓库提交代码时，出现：<code>error: remote origin already exists.</code>。<br>解决办法：<br>（1）git remote -v：查看远程库的信息。<br>（2）git remote rm origin：删除现有的远程仓库。<br>（3）git remote add origin + 远程仓库地址：建立新的远程仓库地址。（远程仓库地址是git上clone的地址）  </p>\n<h3 id=\"2、怎么将本地仓库和远程仓库关联\"><a href=\"#2、怎么将本地仓库和远程仓库关联\" class=\"headerlink\" title=\"2、怎么将本地仓库和远程仓库关联\"></a>2、怎么将本地仓库和远程仓库关联</h3><p>1、需要新建一个项目，并在该项目中执行命令<code>git init</code>初始化一个本地仓库；<br>2、在云端新建一个仓库；<br>3、然后可以使用下面两种方式之一：<br><strong>第一种方式：</strong>通过IDEA连接<br>（1）打开菜单栏中Git（注意：不是设置中Git） -&gt; Manage Remotes；  </p>\n<img src=\"/assets/posts/Git/7.jpg\" class=\"\">  \n<p>（2）将远程仓库中的clone的地址复制粘贴进去就将本地和远程关联上了。<br><strong>第二种方式：</strong>通过git指令<br>使用git命令<code>git remote add 【远程分支名】 【远程仓库clone地址】</code>将本地和远程关联：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin https://xxxx......</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、error-failed-to-push-some-refs-to’xxxx’\"><a href=\"#3、error-failed-to-push-some-refs-to’xxxx’\" class=\"headerlink\" title=\"3、error: failed to push some refs to’xxxx’\"></a>3、error: failed to push some refs to’xxxx’</h3><p><strong>说明：</strong>出现这个错误可能有两个原因：  </p>\n<ol>\n<li>直接在github或者gitee远程仓库中修改了代码或者文件，没有更新本地代码，对本地仓库同步；</li>\n<li>修改了本地的代码，没有<code>commit</code>提交到本地仓库。<br>1、如果是原因<code>1. </code>：<br>（1）先将远程代码库中文件<code>pull</code>到本地，进行代码合并，使用<code>git pull --rebase origin master</code>（注意啊，这里master是你远程仓库的分支名称）<br>（2）再push新的代码到远程代码库中，进行上传<code>git push -u origin master</code>（注意啊，这里master是你远程仓库的分支名称）<br>2、如果是原因<code>2.</code>：<br>（1）就将修改的代码文件先<code>git add 【修改的文件名】</code>到暂存区（<code>git add .</code>add后面有个点，是将全部修改过的代码添加到暂存区，忽略文件不会被添加）<br>（2）然后提交到本地仓库<code>git commit -m &quot;注释&quot;</code><br>（3）再push到远程代码库中，进行上传<code>git push -u origin master</code>（注意啊，这里master是你远程仓库的分支名称）</li>\n</ol>\n",
  "more": "<hr>\n<h1 id=\"一、图标含义\"><a href=\"#一、图标含义\" class=\"headerlink\" title=\"一、图标含义\"></a>一、图标含义</h1><h3 id=\"1、简单说明\"><a href=\"#1、简单说明\" class=\"headerlink\" title=\"1、简单说明\"></a>1、简单说明</h3><p>（1）<a href=\"https://www.jianshu.com/p/4363a5b8895f?ivk_sa=1024320u\">master、origin master 与 origin&#x2F;master介绍</a><br>（2）o&#x2F;master(remote name&#x2F;branch name):远程仓库名&#x2F;分支名。<br>（3）Git Bash：Unix与Linux风格的命令行，使用最多，推荐最多。<br>（4）Git CMD：Windows风格的命令行。<br>（5）Git GUI：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令。  </p>\n<h3 id=\"2、日常更新上传的步骤：\"><a href=\"#2、日常更新上传的步骤：\" class=\"headerlink\" title=\"2、日常更新上传的步骤：\"></a>2、日常更新上传的步骤：</h3><ul>\n<li>git add</li>\n<li>git commit</li>\n<li>git pull</li>\n<li>git push</li>\n</ul>\n<h3 id=\"3、关于IDEA集成字体颜色\"><a href=\"#3、关于IDEA集成字体颜色\" class=\"headerlink\" title=\"3、关于IDEA集成字体颜色\"></a>3、关于IDEA集成字体颜色</h3><ul>\n<li><span style=\"color:green\">绿色</span>，已经加入控制暂未提交</li>\n<li><span style=\"color:red\">红色</span>，未加入版本控制</li>\n<li><span style=\"color:blue\">蓝色</span>，加入，已提交，有改动</li>\n<li>白色，加入，已提交，无改动</li>\n<li><span style=\"color:#cccccc\">灰色</span>，版本控制已忽略文件</li>\n</ul>\n<h3 id=\"4、分支说明：\"><a href=\"#4、分支说明：\" class=\"headerlink\" title=\"4、分支说明：\"></a>4、分支说明：</h3><p>每个分支都是一个完整的项目，互不影响。<img src=\"/assets/posts/Git/1.jpg\" class=\"\"></p>\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"二、Git-常用命令\"><a href=\"#二、Git-常用命令\" class=\"headerlink\" title=\"二、Git 常用命令\"></a>二、Git 常用命令</h1><h3 id=\"1、设置全局变量\"><a href=\"#1、设置全局变量\" class=\"headerlink\" title=\"1、设置全局变量\"></a>1、设置全局变量</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config <span class=\"attr\">--global</span> user<span class=\"selector-class\">.name</span> <span class=\"string\">&quot;zjy&quot;</span> <span class=\"comment\">// 这个和账号没关系，只是一个用户签名</span></span><br><span class=\"line\">git config <span class=\"attr\">--global</span> user<span class=\"selector-class\">.email</span> <span class=\"string\">&quot;xxxx@qq.com&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2、常用操作\"><a href=\"#2、常用操作\" class=\"headerlink\" title=\"2、常用操作\"></a>2、常用操作</h3><h6 id=\"（1）初始化\"><a href=\"#（1）初始化\" class=\"headerlink\" title=\"（1）初始化\"></a>（1）初始化</h6><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span> 需要新建一个目录，在此目录执行之后，这个目录里就有了本地git仓库</span><br><span class=\"line\">git init </span><br></pre></td></tr></table></figure>\n<h6 id=\"（2）下载项目\"><a href=\"#（2）下载项目\" class=\"headerlink\" title=\"（2）下载项目\"></a>（2）下载项目</h6><p>说明：下载项目不需要管理凭证，但是只要把代码推送到远程的就需要管理凭证，一台电脑只有一个管理凭证，管理凭证就是git账号</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">clone</span> <span class=\"title\">【url</span>】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（3）查看所有提交跟踪状态\"><a href=\"#（3）查看所有提交跟踪状态\" class=\"headerlink\" title=\"（3）查看所有提交跟踪状态\"></a>（3）查看所有提交跟踪状态</h6><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">//</span> 单个文件查看</span><br><span class=\"line\">git status 文件名</span><br></pre></td></tr></table></figure>\n<h6 id=\"（4）加入到暂存区\"><a href=\"#（4）加入到暂存区\" class=\"headerlink\" title=\"（4）加入到暂存区\"></a>（4）加入到暂存区</h6><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">git</span> <span class=\"keyword\">add</span> 文件名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 添加所有文件到暂存区</span></span><br><span class=\"line\"><span class=\"symbol\">git</span> <span class=\"keyword\">add</span> .</span><br></pre></td></tr></table></figure>\n<h6 id=\"（5）提交暂存区的文件到本地仓库\"><a href=\"#（5）提交暂存区的文件到本地仓库\" class=\"headerlink\" title=\"（5）提交暂存区的文件到本地仓库\"></a>（5）提交暂存区的文件到本地仓库</h6><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">git</span> commit -m 【提交的备注信息】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（6）创建公钥密钥\"><a href=\"#（6）创建公钥密钥\" class=\"headerlink\" title=\"（6）创建公钥密钥\"></a>（6）创建公钥密钥</h6><figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -<span class=\"built_in\">t</span> rsa -C 【邮箱】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（7）列出所有本地分支\"><a href=\"#（7）列出所有本地分支\" class=\"headerlink\" title=\"（7）列出所有本地分支\"></a>（7）列出所有本地分支</h6><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span> git branch -v:列出所有本地分支和分支信息</span><br><span class=\"line\">git branch</span><br></pre></td></tr></table></figure>\n<h6 id=\"（8）列出所有远程分支\"><a href=\"#（8）列出所有远程分支\" class=\"headerlink\" title=\"（8）列出所有远程分支\"></a>（8）列出所有远程分支</h6><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">git branch -r</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"（9）新建一个分支，但依然停留在当前分支\"><a href=\"#（9）新建一个分支，但依然停留在当前分支\" class=\"headerlink\" title=\"（9）新建一个分支，但依然停留在当前分支\"></a>（9）新建一个分支，但依然停留在当前分支</h6><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">branch </span>【分支名字】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（10）新建一个分支，并切换到该分支\"><a href=\"#（10）新建一个分支，并切换到该分支\" class=\"headerlink\" title=\"（10）新建一个分支，并切换到该分支\"></a>（10）新建一个分支，并切换到该分支</h6><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">git</span> checkout -<span class=\"keyword\">b</span> 【分支名字】</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 只切换分支</span></span><br><span class=\"line\"><span class=\"symbol\">git</span> checkout 【分支名字】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（11）合并指定分支到当前分支\"><a href=\"#（11）合并指定分支到当前分支\" class=\"headerlink\" title=\"（11）合并指定分支到当前分支\"></a>（11）合并指定分支到当前分支</h6><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span> 在分支<span class=\"number\">1</span>使用该命令，分支<span class=\"number\">2</span>合并到分支<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"regexp\">//</span> 例如：在分支<span class=\"number\">1</span>使用，git merge 分支<span class=\"number\">2</span>，将分支<span class=\"number\">2</span>合并到分支<span class=\"number\">1</span></span><br><span class=\"line\">git merge 【要合并的分支名字】</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">//</span> 在分支<span class=\"number\">1</span>使用该命令，将分支<span class=\"number\">1</span>合并到分支<span class=\"number\">2</span>（将自己写的代码提到最前面）</span><br><span class=\"line\"><span class=\"regexp\">//</span> 例如：在分支<span class=\"number\">1</span>使用，git rebase 分支<span class=\"number\">2</span>，将分支<span class=\"number\">1</span>合并到分支<span class=\"number\">2</span></span><br><span class=\"line\">git rebase 【要合并到的分支名字】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（12）删除分支\"><a href=\"#（12）删除分支\" class=\"headerlink\" title=\"（12）删除分支\"></a>（12）删除分支</h6><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d 【分支名字】</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">//</span> 删除远程分支方法一</span><br><span class=\"line\">git push origin --<span class=\"keyword\">delete</span> 【分支名字】</span><br><span class=\"line\"><span class=\"regexp\">//</span> 删除远程分支方法二</span><br><span class=\"line\">git branch -dr 【remote/branch】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（13）强制移动HEAD\"><a href=\"#（13）强制移动HEAD\" class=\"headerlink\" title=\"（13）强制移动HEAD\"></a>（13）强制移动HEAD</h6><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 将<span class=\"literal\">master</span>向上移动<span class=\"number\">3</span>个节点</span><br><span class=\"line\">git branch -f <span class=\"keyword\">master</span> <span class=\"title\">HEAD</span>~<span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"（14）查看日志信息\"><a href=\"#（14）查看日志信息\" class=\"headerlink\" title=\"（14）查看日志信息\"></a>（14）查看日志信息</h6><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">ref</span>log</span><br></pre></td></tr></table></figure>\n<h6 id=\"（15）查看详细信息\"><a href=\"#（15）查看详细信息\" class=\"headerlink\" title=\"（15）查看详细信息\"></a>（15）查看详细信息</h6><figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"（16）回退到某个版本\"><a href=\"#（16）回退到某个版本\" class=\"headerlink\" title=\"（16）回退到某个版本\"></a>（16）回退到某个版本</h6><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span> 版本号从信息里查看</span><br><span class=\"line\">git reset --hard 【版本号】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（17）查看远程库所有别名\"><a href=\"#（17）查看远程库所有别名\" class=\"headerlink\" title=\"（17）查看远程库所有别名\"></a>（17）查看远程库所有别名</h6><p><strong>说明：</strong>别名的意思是项目链接太长了，给项目重新取一个别名。  </p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">git remote -v</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"（18）创建别名\"><a href=\"#（18）创建别名\" class=\"headerlink\" title=\"（18）创建别名\"></a>（18）创建别名</h6><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote <span class=\"built_in\">add</span> 【别名】 【项目链接】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（19）推送本地库的代码到远程库\"><a href=\"#（19）推送本地库的代码到远程库\" class=\"headerlink\" title=\"（19）推送本地库的代码到远程库\"></a>（19）推送本地库的代码到远程库</h6><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">push</span> （别名） 【分支名】</span><br></pre></td></tr></table></figure>\n<h6 id=\"（20）拉取远程库的代码到本地库\"><a href=\"#（20）拉取远程库的代码到本地库\" class=\"headerlink\" title=\"（20）拉取远程库的代码到本地库\"></a>（20）拉取远程库的代码到本地库</h6><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">git</span> pull （别名） 【分支名】</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"三、git用法图解\"><a href=\"#三、git用法图解\" class=\"headerlink\" title=\"三、git用法图解\"></a>三、git用法图解</h1><img src=\"/assets/posts/Git/2.jpg\" class=\"\">\n\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"四、Git流程说明\"><a href=\"#四、Git流程说明\" class=\"headerlink\" title=\"四、Git流程说明\"></a>四、Git流程说明</h1><p>（1）当前在master分支上，需要开发master分支的项目。<br>（2）创建一个开发分支 dev ，git branch dev，dev分支创建成功，dev上存在和master分支一摸一样的项目，当前所在的分支还是master。<br>（3）切换分支，git checkout dev，从当前分支master切换到开发分支dev。（也可以 2 和 3 合并起来，就是 git checkout -b dev，新建一个开发分支dev，并切换到 dev 分支）<br>（4）在开发分支 dev 开发项目，开发完成，准备合并分支。<br>（5）将把开发分支dev合并到master分支上，先切换到master分支，然后键入 git merge dev。（也可以这样，不切换到master分支，当前所在分支为开发分支dev，然后 git rebase master，将dev分支合并到master分支上）</p>\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"五、Git集成IDEA\"><a href=\"#五、Git集成IDEA\" class=\"headerlink\" title=\"五、Git集成IDEA\"></a>五、Git集成IDEA</h1><p>1、首先先配置忽略的配置，作用是：每当把项目上传的时候，git会将所有文件默认选取，为了把一些不必要的文件忽略，所以配置忽略文件。<br>创建 xxx.ignore 文件，然后将需要忽略的文件键入，在.gitconfig配置文件中输入<br>需要用到正斜线 “ &#x2F; ”，不能用反斜线 “ \\ ”</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[core]</span></span><br><span class=\"line\">    <span class=\"attr\">excludesfile</span> = xxx.ignore文件地址</span><br></pre></td></tr></table></figure>\n<p>2、IDEA配置Git</p>\n<img src=\"/assets/posts/Git/3.jpg\" class=\"\">\n\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"六、Git-流程idea更新代码时的两个选项Merge-the-incoming-changes-into-the-current-branch与Rebase-the-current-branch-on-top-of-the-incoming-changes\"><a href=\"#六、Git-流程idea更新代码时的两个选项Merge-the-incoming-changes-into-the-current-branch与Rebase-the-current-branch-on-top-of-the-incoming-changes\" class=\"headerlink\" title=\"六、Git 流程idea更新代码时的两个选项Merge the incoming changes into the current branch与Rebase the current branch on top of the incoming changes\"></a>六、Git 流程idea更新代码时的两个选项Merge the incoming changes into the current branch与Rebase the current branch on top of the incoming changes</h1><p>1、第一个Merge<br>一般都使用这个，这个是按照时间顺序更新代码，什么意思呢，就是有两个场景：<br>假如有两个开发人员a、b都在同一个分支test上进行开发：<br>（1）a、b把代码都拉下来；<br>（2）a进行开发，在a开发的同时，b可能也在开发（场景一），可能没有（场景二）；<br>（3）场景一：a开发之后，更新代码并提交代码，然后b也开发好，更新代码，因为Merge更新代码是按照时间来更新的，所以不会出现冲突问题，b很顺利地将代码更新下来；<br>（4）场景二：a开发之后，更新代码并提交代码，b没有进行开发，直接更新代码，这个肯定顺利成功。<br>2、第二个Rebase<br>这个是将别人的代码先更新下来，然后将自己的代码提到最顶端，什么意思呢，就比如：<br>两个开发人员a、b在同一个分支test上进行开发：<br>（1）a、b把代码都拉下来；<br>（2）a进行开发，在a开发的同时，b可能也在开发（场景一），可能没有（场景二）；<br>（3）场景一：a开发之后，更新代码并提交代码，然后b也开发好，更新代码，此时就会出现问题，它会更新代码，将b代码覆盖下来，就会冲突；<br>（4）场景二：b没有开发代码，直接更新代码，这是没有问题的。</p>\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"七、IDEA上面使用Git提交到本地仓库怎么回退\"><a href=\"#七、IDEA上面使用Git提交到本地仓库怎么回退\" class=\"headerlink\" title=\"七、IDEA上面使用Git提交到本地仓库怎么回退\"></a>七、IDEA上面使用Git提交到本地仓库怎么回退</h1><p>1、右键选中需要回退的文件，点击git</p>\n<img src=\"/assets/posts/Git/4.png\" class=\"\">\n<p>2、使用 HEAD^ 来描述版本，一个 ^ 表示前一个版本，两个 ^^ 表示前两个版本，以此类推。也可以使用数字来代替 ^，比如说前 100 个版本可以写作 HEAD~100。</p>\n<img src=\"/assets/posts/Git/5.jpg\" class=\"\">\n<p>3、回退</p>\n<img src=\"/assets/posts/Git/6.jpg\" class=\"\">\n\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"八、Git提交规范（fix、feat等字段含义）\"><a href=\"#八、Git提交规范（fix、feat等字段含义）\" class=\"headerlink\" title=\"八、Git提交规范（fix、feat等字段含义）\"></a>八、Git提交规范（fix、feat等字段含义）</h1><p>feat: 新功能（feature）<br>fix: 修补bug<br>docs: 文档（documentation）<br>style: 格式（不影响代码运行的变动）<br>refactor: 重构（即不是新增功能，也不是修改bug的代码变动）<br>chore: 构建过程或辅助工具的变动<br>revert: 撤销，版本回退<br>perf: 性能优化<br>test：测试<br>improvement: 改进<br>build: 打包<br>ci: 持续集成</p>\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"九、git-merge和git-rebase使用方法（都是针对本地来进行合并的）\"><a href=\"#九、git-merge和git-rebase使用方法（都是针对本地来进行合并的）\" class=\"headerlink\" title=\"九、git merge和git rebase使用方法（都是针对本地来进行合并的）\"></a>九、git merge和git rebase使用方法（都是针对本地来进行合并的）</h1><p>有三个分支master、dev、test：<br>（1）A在dev上开发功能，完成功能开发，先得在dev分支提交开发的功能模块，然后推送到远程服务器，然后git checkout master切换到本地的master分支，使用git merge dev将在dev分支上开发的功能合并到本地的master分支，然后推送到远程服务器；<br>（2）B在本地切换到master分支，更新代码，在本地git checkout test切换到test分支，在使用git rebase master将更新下来的代码合并到自己的本地test分支上。</p>\n<br/>\n\n<hr>\n<br/>\n\n<h1 id=\"十、Git常见的问题\"><a href=\"#十、Git常见的问题\" class=\"headerlink\" title=\"十、Git常见的问题\"></a>十、Git常见的问题</h1><h3 id=\"1、error-remote-origin-already-exists\"><a href=\"#1、error-remote-origin-already-exists\" class=\"headerlink\" title=\"1、error: remote origin already exists.\"></a>1、error: remote origin already exists.</h3><p><strong>说明：</strong>当本地向远程仓库提交代码时，出现：<code>error: remote origin already exists.</code>。<br>解决办法：<br>（1）git remote -v：查看远程库的信息。<br>（2）git remote rm origin：删除现有的远程仓库。<br>（3）git remote add origin + 远程仓库地址：建立新的远程仓库地址。（远程仓库地址是git上clone的地址）  </p>\n<h3 id=\"2、怎么将本地仓库和远程仓库关联\"><a href=\"#2、怎么将本地仓库和远程仓库关联\" class=\"headerlink\" title=\"2、怎么将本地仓库和远程仓库关联\"></a>2、怎么将本地仓库和远程仓库关联</h3><p>1、需要新建一个项目，并在该项目中执行命令<code>git init</code>初始化一个本地仓库；<br>2、在云端新建一个仓库；<br>3、然后可以使用下面两种方式之一：<br><strong>第一种方式：</strong>通过IDEA连接<br>（1）打开菜单栏中Git（注意：不是设置中Git） -&gt; Manage Remotes；  </p>\n<img src=\"/assets/posts/Git/7.jpg\" class=\"\">  \n<p>（2）将远程仓库中的clone的地址复制粘贴进去就将本地和远程关联上了。<br><strong>第二种方式：</strong>通过git指令<br>使用git命令<code>git remote add 【远程分支名】 【远程仓库clone地址】</code>将本地和远程关联：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin https://xxxx......</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、error-failed-to-push-some-refs-to’xxxx’\"><a href=\"#3、error-failed-to-push-some-refs-to’xxxx’\" class=\"headerlink\" title=\"3、error: failed to push some refs to’xxxx’\"></a>3、error: failed to push some refs to’xxxx’</h3><p><strong>说明：</strong>出现这个错误可能有两个原因：  </p>\n<ol>\n<li>直接在github或者gitee远程仓库中修改了代码或者文件，没有更新本地代码，对本地仓库同步；</li>\n<li>修改了本地的代码，没有<code>commit</code>提交到本地仓库。<br>1、如果是原因<code>1. </code>：<br>（1）先将远程代码库中文件<code>pull</code>到本地，进行代码合并，使用<code>git pull --rebase origin master</code>（注意啊，这里master是你远程仓库的分支名称）<br>（2）再push新的代码到远程代码库中，进行上传<code>git push -u origin master</code>（注意啊，这里master是你远程仓库的分支名称）<br>2、如果是原因<code>2.</code>：<br>（1）就将修改的代码文件先<code>git add 【修改的文件名】</code>到暂存区（<code>git add .</code>add后面有个点，是将全部修改过的代码添加到暂存区，忽略文件不会被添加）<br>（2）然后提交到本地仓库<code>git commit -m &quot;注释&quot;</code><br>（3）再push到远程代码库中，进行上传<code>git push -u origin master</code>（注意啊，这里master是你远程仓库的分支名称）</li>\n</ol>\n",
  "categories": [
    {
      "name": "版本控制",
      "path": "api/categories/版本控制.json"
    }
  ],
  "tags": [
    {
      "name": "版本控制",
      "path": "api/tags/版本控制.json"
    }
  ]
}
